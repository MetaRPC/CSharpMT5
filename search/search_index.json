{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started with MetaTrader 5","text":"<p>This guide walks you through the steps required to:</p> <ul> <li>\u2705 Register and log in to a MetaTrader 5 account</li> <li>\u2705 Connect the C# gRPC client to your MT5 terminal</li> <li>\u2705 Retrieve live account and trading data programmatically</li> </ul>"},{"location":"#account-setup","title":"\ud83e\uddfe Account Setup","text":""},{"location":"#1-launch-metatrader-5","title":"1. Launch MetaTrader 5","text":"<p>Open the MetaTrader 5 application on your machine.</p>"},{"location":"#2-access-account-panel","title":"2. Access Account Panel","text":"<p> Click the person icon in the top-right corner to access account options.</p>"},{"location":"#3-register-or-log-in","title":"3. Register or Log In","text":"<p> Choose to log into an existing account or register a new one.</p>"},{"location":"#4-registering-an-account","title":"4. Registering an Account","text":"<p> Enter your email and desired username, then click Create.</p> <ul> <li>You will receive an email with your login credentials and a button to activate the account.</li> </ul>"},{"location":"#5-activate-your-account","title":"5. Activate Your Account","text":"<p>Click the Activate Account button from the email. Once confirmed, return to MetaTrader 5 and log in with the provided credentials.</p>"},{"location":"#opening-a-trading-account","title":"\ud83d\udce5 Opening a Trading Account","text":""},{"location":"#6-open-account-in-mt5","title":"6. Open Account in MT5","text":"<p> Go to <code>File</code> \u2192 <code>Open an Account</code></p>"},{"location":"#7-select-your-broker","title":"7. Select Your Broker","text":"<p> Choose <code>MetaQuotes Ltd</code> or your preferred broker.</p>"},{"location":"#8-choose-account-type","title":"8. Choose Account Type","text":"<p> Select a demo or real account type. Click Next.</p>"},{"location":"#9-fill-in-your-details","title":"9. Fill in Your Details","text":"<p>Enter personal info, accept terms, and click Next.</p>"},{"location":"#10-save-your-login-credentials","title":"10. Save Your Login Credentials","text":"<p> Your login, password, and investor password will be shown. Save them securely.</p>"},{"location":"#11-log-in-to-the-trading-account","title":"11. Log in to the Trading Account","text":"<p> Go to <code>File</code> \u2192 <code>Log in to Trading Account</code> and enter your saved credentials.</p>"},{"location":"#12-confirm-login","title":"12. Confirm Login","text":"<p> Check <code>Save Password</code> if you want to auto-login next time.</p>"},{"location":"#accessing-webtrader","title":"\ud83c\udf10 Accessing WebTrader","text":""},{"location":"#1316-log-in-to-webtrader","title":"13\u201316. Log In to WebTrader","text":"<p>Follow these steps to access your account online:</p> <ul> <li>Web login</li> <li>Enter credentials</li> <li>Click <code>Connect to Account</code></li> <li>Access WebTrader Dashboard</li> </ul>"},{"location":"#connecting-the-mt5-c-application","title":"\u2699\ufe0f Connecting the MT5 C# Application","text":"<p>This section explains how to run the MT5 C# gRPC client.</p>"},{"location":"#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<ul> <li>A valid MetaTrader 5 account (from steps above)</li> <li>Visual Studio or any C# IDE installed</li> <li>The MetaRPC MT5 repository cloned locally</li> </ul>"},{"location":"#steps","title":"Steps","text":""},{"location":"#1-clone-the-mt5-repository","title":"1. Clone the MT5 Repository","text":"<p>Download the CSharpMT5 project to your machine.</p>"},{"location":"#2-open-the-project-in-your-code-editor","title":"2. Open the Project in Your Code Editor","text":"<p>Open the repo in Visual Studio or VS Code.</p>"},{"location":"#3-open-profilesjson","title":"3. Open <code>profiles.json</code>","text":"<p>Fill in the relevant information. You can also create multiple profiles and switch through them quickly.</p> <pre><code>{\n  \"default\": {\n    \"AccountId\": 21455,\n    \"Password\": \"1nJeS+Ae\",\n    \"Host\": \"95.217.147.61\",\n    \"Port\": 443,\n    \"GrpcServer\": \"https://mt5.mrpc.pro:443\",\n    \"DefaultSymbol\": \"EURUSD\",\n    \"DefaultVolume\": 0.1\n  },\n  \"demo\": {\n    \"AccountId\": 95591860,\n    \"Password\": \"GyI@7a1m\",\n    \"ServerName\": \"MetaQuotes-Demo\",\n    \"GrpcServer\": \"https://mt5.mrpc.pro:443\",\n    \"DefaultSymbol\": \"GBPUSD\",\n    \"DefaultVolume\": 0.2\n  }\n}\n</code></pre>"},{"location":"#after-filling-profilesjson","title":"\u25b6\ufe0f After filling <code>profiles.json</code>","text":"<p>Once your profiles.json is ready, the next step is to actually run the MT5 C# CLI and test connectivity.</p>"},{"location":"#1-restore-and-build","title":"1. Restore and build","text":"<p>From the repo root:</p> <pre><code>dotnet restore\n</code></pre>"},{"location":"#2-run-commands","title":"2. Run commands","text":"<p>The general pattern is:</p> <pre><code>dotnet run -- &lt;command&gt; [options]\n</code></pre> <p>Examples:</p> <pre><code># Show all available profiles\ndotnet run -- profiles list\n\n# Show details for your \"default\" profile\ndotnet run -- profiles show -p default\n\n# Health check (ping)\ndotnet run -- health -p default\n\n# Get one quote\ndotnet run -- quote -p default -s EURUSD\n</code></pre>"},{"location":"#3-place-your-first-order-demo-profile","title":"3. Place your first order (demo profile)","text":"<pre><code>dotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0700 --tp 1.0800 --deviation 10\n</code></pre> <p>Tip: use <code>--dry-run</code> to preview what would be sent without touching the account.</p>"},{"location":"#shortcasts-optional-but-handy","title":"\u26a1 Shortcasts (optional but handy)","text":"<p>You can also load PowerShell aliases once per session:</p> <pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nuse-sym EURUSD\n\ninfo   # expands to: mt5 info -p demo\nq      # expands to: mt5 quote -p demo -s EURUSD\nb -v 0.10   # market buy with defaults\n</code></pre> <p>See also: CLI Shortcasts &amp; Live Examples \u00b7 Logging: Output Formats.</p>"},{"location":"#sltp-rules-quick","title":"\ud83e\udde0 SL/TP rules (quick)","text":"<ul> <li>BUY: enter at Ask \u2192 <code>SL &lt; Ask</code>, <code>TP &gt; Ask</code></li> <li>SELL: enter at Bid \u2192 <code>SL &gt; Bid</code>, <code>TP &lt; Bid</code></li> <li>Use <code>position.modify.points</code> with <code>--from entry|market</code> to set distances in points.</li> </ul> <p>Learn more: Position.modify.points \u00b7 Modify (overview) \u00b7 Symbol Rules &amp; Smart Stops</p>"},{"location":"#timeouts-retries","title":"\u23f1 Timeouts &amp; retries","text":"<ul> <li><code>--timeout-ms</code> bounds each RPC. Internally we wrap operations in <code>UseOpTimeout</code> and per-call CTS via <code>StartOpCts</code>.</li> <li>Calls go through <code>CallWithRetry(...)</code> to automatically retry selected transient errors.</li> <li>For CI, reduce timeout (fast fail). For slow terminals, increase to 60\u2013120s.</li> </ul> <p>Details: Timeouts &amp; Retries Policy \u00b7 Health checks</p>"},{"location":"#troubleshooting","title":"\ud83d\udedf Troubleshooting","text":"<ul> <li>\u201cSet Host or MtClusterName\u201d \u2192 profile not picked up. Run <code>profiles show</code> and verify <code>profiles.json</code> path. See: Profiles.</li> <li>Hidden symbol \u2192 <code>symbol ensure -s &lt;SYM&gt;</code> before trading or pending changes. See: Ensure Symbol Visible.</li> <li>Timeouts \u2192 raise <code>--timeout-ms</code>, test with <code>--trace</code> to see where it stuck. See: Timeouts &amp; Retries Policy.</li> <li>Zero Margin/FreeMargin on empty accounts is normal; equity \u2248 balance when flat.</li> </ul> <p>More fixes: Troubleshooting &amp; FAQ</p>"},{"location":"#what-next","title":"\ud83d\udd17 What next","text":"<ul> <li>Profiles \u2192 details &amp; tips: Profiles.md</li> <li>Account / Info \u2192 Info.md \u00b7 Overview.md \u00b7 Show.md</li> <li>Market data \u2192 Quote.md \u00b7 Symbol.md \u00b7 Limits.md \u00b7 Ensure Symbol Visible</li> <li>Orders &amp; Positions \u2192 Orders_Positions_Overview.md \u00b7 Place.md \u00b7 Modify.md \u00b7 Buy.md \u00b7 Sell.md</li> <li>History \u2192 History.md \u00b7 History_export.md \u00b7 History_Overview.md</li> <li>Diagnostics / Ops \u2192 Health.md \u00b7 SymbolRules_SmartStops.md \u00b7 Troubleshooting (FAQ)</li> <li>Risk tools \u2192 Lot.calc.md</li> <li>Misc tools \u2192 Ticket_Show.md \u00b7 Specific_Ticket.md \u00b7 Reverse_Ticket.md \u00b7 Pending_List.md \u00b7 Panic.md</li> </ul>"},{"location":"Architecture_DataFlow/","title":"\ud83c\udfd7\ufe0f Architecture &amp; Data Flow (C# / MT5)","text":"<p>This section describes the structure of the C# MT5 project and how data flows between components.</p>"},{"location":"Architecture_DataFlow/#general-diagram","title":"General Diagram","text":"<pre><code>          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502        \ud83d\udcbb MT5 Server        \u2502\n          \u2502 (broker connection, quotes, \u2502\n          \u2502  orders, account handling)  \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502  gRPC\n                         \u25bc\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502   \ud83d\ude80 C# MT5 Client Library \u2502\n          \u2502 (MT5Account + gRPC stubs)  \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502           \u2502\n                  \u25bc           \u25bc\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 \ud83d\udc69\u200d\ud83d\udcbb User Code  \u2502   \u2502 \ud83d\udd04 Streaming      \u2502\n       \u2502 (apps, bots)   \u2502   \u2502 (quotes, orders,  \u2502\n       \u2502                \u2502   \u2502 balances, history)\u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udcc4 config.json \u2192 stores login, password, server, and default symbol.  \n\ud83d\udce6 mt5_term_api \u2192 generated C# classes from `.proto` files.  \n</code></pre>"},{"location":"Architecture_DataFlow/#components","title":"\u2699\ufe0f Components","text":"<ul> <li> <p>\ud83d\udcbb MT5 Server   Provided by the broker. Executes trades, streams quotes, and holds account data.</p> </li> <li> <p>\ud83d\ude80 C# MT5 Client Library   Contains <code>MT5Account</code> class and gRPC clients (<code>ConnectionClient</code>, <code>SubscriptionServiceClient</code>, <code>AccountHelperClient</code>, <code>TradingHelperClient</code>, <code>MarketInfoClient</code>, <code>TradeFunctionsClient</code>, <code>AccountInformationClient</code>).  Manages connection lifecycle and request building.</p> </li> <li> <p>\ud83d\udce6 mt5_term_api (generated code)   Auto-generated C# code from protobuf (<code>.proto</code>). Includes messages like <code>OrderSendRequest</code>, <code>OrderModifyRequest</code> and enums like <code>TMT5_ENUM_ORDER_TYPE</code>.</p> </li> <li> <p>\ud83d\udcc4 config.json   Stores credentials (login, password, server), default chart symbol, and connection settings.</p> </li> <li> <p>\ud83d\udc69\u200d\ud83d\udcbb User Code   Applications, bots, or tools that use the <code>MT5Account</code> class to trade, query account state, or subscribe to market data.</p> </li> </ul>"},{"location":"Architecture_DataFlow/#data-flow","title":"\ud83d\udd00 Data Flow","text":"<ol> <li> <p>\ud83d\udce1 RPC call    User code calls a method (e.g., <code>PlaceStopLimitOrderAsync</code>) on <code>MT5Account</code>.</p> </li> <li> <p>\u2699\ufe0f Client library    Maps parameters into protobuf request objects and sends them via gRPC client.</p> </li> <li> <p>\ud83d\udcbb MT5 Server    Executes the request (order placement, quote fetch, etc.).</p> </li> <li> <p>\u2b05\ufe0f Return path    Response is returned as a protobuf reply, mapped back into C# structures.</p> </li> <li> <p>\ud83d\udd04 Streaming calls    Subscriptions (quotes, balances, orders) maintain an open channel to push updates.</p> </li> </ol>"},{"location":"Architecture_DataFlow/#highlights","title":"\u2728 Highlights","text":"<ul> <li>All tickets are <code>ulong</code> (UInt64).</li> <li>Orders support Stop Limit and Time in Force (GTC, DAY, GTD, Specified).</li> <li><code>EnsureSymbolVisibleAsync</code> guarantees that symbol is active before use.</li> <li>Connection lifecycle handled by <code>ConnectAsync()</code> / <code>DisconnectAsync()</code>.</li> <li>Streaming keeps charts and UI in sync in real time.</li> </ul>"},{"location":"Architecture_DataFlow/#developer-notes","title":"\ud83d\udee0\ufe0f Developer Notes","text":"<ul> <li>Main entry for apps: <code>MT5Account</code> class.</li> <li>Protobuf code lives in <code>mt5_term_api</code> namespace.</li> <li>When adding new RPCs \u2192 update <code>.proto</code>, regenerate C# classes.</li> <li>Error handling: server retcodes are exposed via wrapper exceptions.</li> <li>Timeout control: all RPC calls support <code>CancellationToken</code> and per-call deadlines.</li> </ul>"},{"location":"Command_Index/","title":"Command Index","text":""},{"location":"Command_Index/#command-index-full-reference","title":"\ud83d\udcd6 Command Index (Full Reference)","text":"<p>All available commands in CSharpMT5 CLI, grouped by category. Use with:</p> <pre><code>dotnet run -- &lt;command&gt; [options]\n</code></pre>"},{"location":"Command_Index/#profiles-setup","title":"\u2699\ufe0f Profiles &amp; Setup","text":"<ul> <li> <p>profiles</p> </li> <li> <p><code>profiles</code> \u2014 Working with profiles</p> </li> <li><code>list</code> \u2014 Show profile names from <code>profiles.json</code></li> <li><code>show</code> \u2014 Show profile parameters (respects <code>MT5_PASSWORD</code>)</li> </ul>"},{"location":"Command_Index/#account-diagnostics","title":"\ud83e\uddfe Account &amp; Diagnostics","text":"<ul> <li>info \u2014 Show account summary</li> <li>health \u2014 Quick connectivity &amp; account diagnostics</li> <li>quote \u2014 Get a snapshot quote (Bid/Ask/Time)</li> <li>stream \u2014 Subscribe to trading events/ticks (auto-reconnect)</li> </ul>"},{"location":"Command_Index/#market-orders","title":"\ud83d\udcb9 Market Orders","text":"<ul> <li>buy \u2014 Market buy</li> <li>sell \u2014 Market sell</li> </ul>"},{"location":"Command_Index/#sltp-breakeven-trailing","title":"\ud83d\udd12 SL/TP, Breakeven &amp; Trailing","text":"<ul> <li> <p>modify</p> </li> <li> <p><code>modify</code> \u2014 Modify StopLoss / TakeProfit by ticket</p> </li> <li> <p>position</p> </li> <li> <p><code>position.modify</code> \u2014 Modify SL/TP for a position by ticket</p> </li> <li><code>position.modify.points</code> \u2014 Set SL/TP by distance in points from entry/market</li> <li>breakeven \u2014 Move SL to entry \u00b1 offset (breakeven)</li> <li> <p>trail</p> </li> <li> <p><code>trail.start</code> \u2014 Start local trailing stop</p> </li> <li><code>trail.stop</code> \u2014 Stop local trailing stop</li> </ul>"},{"location":"Command_Index/#closing-reversing","title":"\ud83d\udd04 Closing / Reversing","text":"<ul> <li> <p>close</p> </li> <li> <p><code>close</code> \u2014 Close by ticket (volume normalized)</p> </li> <li><code>close.percent</code> \u2014 Close % of a position by ticket</li> <li><code>close.half</code> \u2014 Close half (alias of close.percent --pct 50)</li> <li><code>close.partial</code> \u2014 Partially close exact volume</li> <li>close-all \u2014 Close ALL open positions (optionally by symbol)</li> <li>close-symbol \u2014 Close ALL positions for a symbol</li> <li>closeby \u2014 Close a position by the opposite position (emulated)</li> <li> <p>reverse</p> </li> <li> <p><code>reverse</code> \u2014 Reverse net position by symbol (<code>--mode net|flat</code>)</p> </li> <li><code>reverse.ticket</code> \u2014 Reverse a specific position by ticket</li> </ul>"},{"location":"Command_Index/#pending-orders","title":"\ud83d\udcd1 Pending Orders","text":"<ul> <li>place \u2014 Place a pending order (limit/stop/stop-limit)</li> <li> <p>pending</p> </li> <li> <p><code>pending</code> \u2014 Pending utilities</p> </li> <li><code>pending.modify</code> \u2014 Modify pending (price/SL/TP/expiry)</li> <li><code>pending.move</code> \u2014 Move pending by \u00b1N points</li> <li><code>pending list</code> \u2014 List pending tickets</li> <li> <p>cancel</p> </li> <li> <p><code>cancel</code> \u2014 Cancel pending by ticket</p> </li> <li><code>cancel.all</code> \u2014 Cancel all pendings (optional filters)</li> </ul>"},{"location":"Command_Index/#tickets-orders-positions","title":"\ud83c\udf9f\ufe0f Tickets / Orders / Positions","text":"<ul> <li> <p>ticket</p> </li> <li> <p><code>ticket</code> \u2014 Work with a specific ticket</p> </li> <li><code>ticket show</code> \u2014 Show info (open or recent history)</li> <li>orders \u2014 List open orders &amp; positions tickets</li> <li>positions \u2014 List active positions</li> </ul>"},{"location":"Command_Index/#symbols","title":"\ud83d\udcca Symbols","text":"<ul> <li> <p>symbol</p> </li> <li> <p><code>symbol</code> \u2014 Symbol utilities</p> </li> <li><code>symbol ensure</code> \u2014 Ensure symbol is visible in terminal</li> <li><code>symbol limits</code> \u2014 Show min/step/max volume</li> <li><code>symbol show</code> \u2014 Short card: Quote + Limits</li> </ul>"},{"location":"Command_Index/#history-tools","title":"\ud83d\udd52 History &amp; Tools","text":"<ul> <li> <p>history</p> </li> <li> <p><code>history</code> \u2014 Orders/deals history (last N days)</p> </li> <li><code>history.export</code> \u2014 Export history to CSV/JSON</li> <li> <p>lot</p> </li> <li> <p><code>lot.calc</code> \u2014 Calculate position volume by risk % and SL distance (points)</p> </li> <li>panic \u2014 Close ALL positions and cancel ALL pendings (optionally filtered)</li> </ul>"},{"location":"Documentation_BASE/","title":"Home","text":"<ul> <li> <p> Start Here     ---     First run, profiles, quick commands.       Getting Started  Command Index</p> </li> <li> <p> Architecture &amp; Reliability     ---     Data flow, health checks, timeouts &amp; retries.       Data Flow  Timeouts &amp; Retries  Health</p> </li> <li> <p> Market Data     ---     Quotes, symbols, limits, ensure visible.       Quote  Ensure Visible  Limits</p> </li> <li> <p> Orders &amp; Positions     ---     Place, modify, partial closes, trails.       Place  Modify  Close %</p> </li> <li> <p> Streaming     ---     Subscribe to live tick events.       Subscribe</p> </li> <li> <p> Account     ---     Profiles and account info.       Overview  Show  Profiles</p> </li> <li> <p> API Reference     ---     Types, messages, and streaming (C#).       Overview  Enums  Messages  Streaming</p> </li> <li> <p> Shortcasts &amp; Tools     ---     Live examples, ticket toolbox, logging formats.       Live Examples  Ticket Toolbox  Logging Formats</p> </li> <li> <p> Ops     ---     Smart stops, risk tools, troubleshooting.       Smart Stops  Lot Calc  Troubleshooting</p> </li> </ul>"},{"location":"Documentation_BASE/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":""},{"location":"Documentation_BASE/#core-guides","title":"Core Guides","text":"<ul> <li>Getting Started</li> <li>Architecture &amp; Data Flow</li> <li>Timeouts &amp; Retries Policy</li> <li>Command Index</li> <li>Glossary</li> <li>Shortcasts: Live Examples</li> <li>Ticket Toolbox</li> <li>Logging: Output Formats</li> </ul>"},{"location":"Documentation_BASE/#account","title":"\ud83d\udcca Account","text":"<ul> <li>Overview</li> <li>Show</li> <li>Info</li> <li>Profiles</li> </ul>"},{"location":"Documentation_BASE/#market-data","title":"\ud83d\udcc8 Market Data","text":"<ul> <li>Overview</li> <li>Quote</li> <li>Symbol</li> <li>Limits</li> <li>Ensure Symbol Visible</li> <li>Reverse</li> <li>Close (generic)</li> <li>Close (by symbol)</li> <li>Close (all)</li> <li>Panic</li> <li>Pending: move</li> <li>Pending: modify</li> </ul>"},{"location":"Documentation_BASE/#orders-positions","title":"\ud83d\udce6 Orders &amp; Positions","text":"<ul> <li>Overview</li> <li>Orders</li> <li>Positions</li> <li>Place</li> <li>Buy</li> <li>Sell</li> <li>Pending</li> <li>Modify</li> <li>Position.modify</li> <li>Position.modify.points</li> <li>CloseBy</li> <li>Cancel</li> <li>Cancel All</li> <li>Partial-close (how-to)</li> <li>Close.half</li> <li>Close.partial</li> <li>Close.percent</li> <li>Trail.start</li> <li>Trail.stop</li> </ul>"},{"location":"Documentation_BASE/#streaming","title":"\ud83d\udd01 Streaming","text":"<ul> <li>Subscribe</li> </ul>"},{"location":"Documentation_BASE/#history","title":"\ud83d\udcc4 History","text":"<ul> <li>Overview</li> <li>History</li> <li>Export</li> <li>History Expor (legacy)</li> </ul>"},{"location":"Documentation_BASE/#diagnostics-ops","title":"\u2764\ufe0f Diagnostics / Ops","text":"<ul> <li>Health</li> <li>Troubleshooting &amp; FAQ</li> <li>Symbol Rules &amp; Smart Stops</li> </ul>"},{"location":"Documentation_BASE/#api-reference","title":"\ud83d\udcd8 API Reference","text":"<ul> <li>Overview</li> <li>Enums</li> <li>Messages</li> <li>Streaming</li> </ul>"},{"location":"Documentation_BASE/#misc","title":"\ud83d\udcda Misc","text":"<ul> <li>Overview</li> <li>List</li> <li>Ticket Show</li> <li>Specific Ticket</li> <li>Pending List</li> <li>Reverse by Ticket</li> </ul>"},{"location":"Documentation_BASE/#in-10-minutes-you-can","title":"\u26a1 In 10 minutes you can","text":"<ul> <li>Run a demo profile and fetch a quote.</li> <li>Subscribe to multi-symbol ticks.</li> <li>Place a market order with safe stops.</li> <li>Modify a position respecting symbol rules.</li> </ul> <p>Quick links: \ud83d\udc49 Quote \u00b7 \ud83d\udc49 Place \u00b7 \ud83d\udc49 Subscribe</p>"},{"location":"Getting_Started/","title":"CSharpMT5 \u2014 Getting Started \ud83d\ude80","text":"<p>A fast, script\u2011friendly CLI for MT5 via gRPC. Run one\u2011shot actions (quotes, orders, history) or wire it into scripts/CI.</p>"},{"location":"Getting_Started/#what-you-need","title":"\u2705 What you need","text":"<ul> <li>.NET 8+ (SDK)</li> <li>MT5 account (demo or live) and network access to your MT5 gateway</li> <li>Your profiles.json (connection + defaults)</li> <li>(Optional) PowerShell for shortcasts (helper aliases)</li> </ul>"},{"location":"Getting_Started/#install-run","title":"\ud83e\udde9 Install &amp; Run","text":"<p>Clone and run from the repo root:</p> <pre><code># First run\ndotnet restore\n\n# General pattern\ndotnet run -- &lt;command&gt; [options]\n</code></pre> <p>Examples:</p> <pre><code># Show profiles and connectivity\ndotnet run -- profiles list\ndotnet run -- profiles show -p default\ndotnet run -- health -p default\n\n# One quote\ndotnet run -- quote -p default -s EURUSD\n</code></pre> <p>Tip: use <code>-o json</code> for machine\u2011readable output where supported.</p>"},{"location":"Getting_Started/#profiles-credentials","title":"\ud83d\udd10 Profiles &amp; credentials","text":"<p>Create profiles.json in the working directory (or in <code>Config/</code>, copied to build output). Minimal examples:</p> <pre><code>{\n  \"default\": {\n    \"AccountId\": 111111,\n    \"Password\": \"YOUR_PASSWORD\",\n    \"Host\": \"95.217.147.61\",\n    \"Port\": 443,\n    \"DefaultSymbol\": \"EURUSD\",\n    \"DefaultVolume\": 0.1\n  },\n  \"demo\": {\n    \"AccountId\": 95591860,\n    \"Password\": \"YOUR_DEMO_PASSWORD\",\n    \"ServerName\": \"MetaQuotes-Demo\",\n    \"DefaultSymbol\": \"GBPUSD\",\n    \"DefaultVolume\": 0.2\n  }\n}\n</code></pre> <p>Password priority: the environment variable <code>MT5_PASSWORD</code> overrides the password in the selected profile.</p> <p>Check your setup:</p> <pre><code>dotnet run -- profiles show -p default\n</code></pre>"},{"location":"Getting_Started/#global-options-most-used","title":"\u2699\ufe0f Global options (most used)","text":"Option Meaning Notes <code>-p, --profile &lt;name&gt;</code> Which profile from <code>profiles.json</code> to use default is <code>default</code> <code>-s, --symbol &lt;SYM&gt;</code> Instrument, e.g., <code>EURUSD</code> defaults to profile\u2019s <code>DefaultSymbol</code> <code>-v, --volume &lt;lots&gt;</code> Order volume in lots defaults to profile\u2019s <code>DefaultVolume</code> <code>--deviation &lt;pts&gt;</code> Max slippage in points useful for market orders `-o, --output text json` Output format where supported <code>--timeout-ms &lt;ms&gt;</code> Per\u2011RPC timeout default <code>30000</code> <code>--dry-run</code> Print the action without sending safe preview <code>--verbose</code> / <code>--trace</code> Increase logging <code>trace</code> is very detailed"},{"location":"Getting_Started/#first-five-commands","title":"\u25b6\ufe0f First five commands","text":"<pre><code># 1) See account summary\ndotnet run -- info -p default\n\n# 2) Check price\ndotnet run -- q -p default -s EURUSD\n\n# 3) Place a small demo buy (if your profile points to demo)\ndotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0700 --tp 1.0800 --deviation 10\n\n# 4) Move SL to breakeven by points\ndotnet run -- breakeven -p demo -t 123456 --offset-points 20\n\n# 5) Export recent history to CSV\ndotnet run -- history.export -p demo -d 7 --to csv --file C:\\\\temp\\\\hist.csv\n</code></pre> <p>Use <code>--dry-run</code> to preview what would be sent without touching the account.</p>"},{"location":"Getting_Started/#shortcasts-optional","title":"\u26a1 Shortcasts (optional)","text":"<p>Load aliases from <code>ps/shortcasts.ps1</code> once per session:</p> <pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo      # default profile\nuse-sym EURUSD   # default symbol\nuse-to 90000     # default timeout\n\ninfo             # expands to: mt5 info -p demo --timeout-ms 90000\nq                # expands to: mt5 quote -p demo -s EURUSD --timeout-ms 90000\nb -v 0.10        # market buy with defaults\n</code></pre> <p>See also: CLI Shortcasts &amp; Live Examples.</p>"},{"location":"Getting_Started/#sltp-rules-quick","title":"\ud83e\udde0 SL/TP rules (quick)","text":"<ul> <li>BUY: enter at Ask \u2192 <code>SL &lt; Ask</code>, <code>TP &gt; Ask</code></li> <li>SELL: enter at Bid \u2192 <code>SL &gt; Bid</code>, <code>TP &lt; Bid</code></li> <li>Use <code>position.modify.points</code> with <code>--from entry|market</code> to set distances in points.</li> </ul>"},{"location":"Getting_Started/#timeouts-retries","title":"\u23f1 Timeouts &amp; retries","text":"<ul> <li><code>--timeout-ms</code> bounds each RPC. Internally we wrap operations in <code>UseOpTimeout</code> and per\u2011call CTS via <code>StartOpCts</code>.</li> <li>Calls go through <code>CallWithRetry(...)</code> to automatically retry selected transient errors.</li> <li>For CI, reduce timeout (fast fail). For slow terminals, increase to 60\u2013120s.</li> </ul>"},{"location":"Getting_Started/#troubleshooting","title":"\ud83d\udedf Troubleshooting","text":"<ul> <li>\u201cSet Host or MtClusterName\u201d \u2192 profile not picked up. Run <code>profiles show</code> and verify <code>profiles.json</code> path.</li> <li>Hidden symbol \u2192 <code>symbol ensure -s &lt;SYM&gt;</code> before trading or pending changes.</li> <li>Timeouts \u2192 raise <code>--timeout-ms</code>, test with <code>--trace</code> to see where it stuck.</li> <li>Zero Margin/FreeMargin on empty accounts is normal; equity \u2248 balance when flat.</li> </ul>"},{"location":"Getting_Started/#what-next","title":"\ud83d\udd17 What next","text":"<ul> <li>Profiles \u2192 details &amp; tips: <code>Profiles_Reference.md</code></li> <li>Account / Info \u2192 <code>Info.md</code></li> <li>Market data \u2192 <code>Quote.md</code>, <code>Symbol/Show.md</code>, <code>Symbol/Limits.md</code>, <code>Symbol/Ensure.md</code></li> <li>Orders &amp; Positions \u2192 <code>Orders_Positions_Overview.md</code></li> <li>History \u2192 <code>History.md</code>, <code>History_Export.md</code></li> <li>Misc tools \u2192 <code>Ticket.md</code>, <code>Lot_Calc.md</code>, <code>Panic.md</code></li> </ul> <p>If something is unclear, open an issue or ping in the repo discussions \u2014 happy to help! \ud83c\udfaf</p>"},{"location":"Glossary/","title":"\ud83d\udcd6 Glossary (MT5 / GoMT5)","text":"<p>Quick reference for common MT5/GoMT5 terms used throughout the docs and code.</p>"},{"location":"Glossary/#quick-cheat-sheet","title":"\ud83d\udcdd Quick Cheat Sheet","text":"Term Example Meaning Symbol <code>EURUSD</code> Instrument identifier Lot <code>1.0</code> \u2192 100,000 Standard trading volume SL <code>1.09500</code> Stop Loss TP <code>1.10500</code> Take Profit Ticket <code>123456789012</code> (UInt64) Unique order ID Digits <code>5</code> Quote precision (1.23456) Point <code>0.00001</code> Minimum price step Margin <code>100.00</code> Locked funds for position Equity <code>1000.00</code> Balance \u00b1 open positions PnL Stream <code>SubscribeQuotes()</code> Continuous updates (ticks, orders, profits) TIF <code>GTC/DAY/GTD/...</code> Time in Force for pending orders"},{"location":"Glossary/#order-lifecycle-mt5","title":"\ud83d\udcca Order Lifecycle (MT5)","text":"<pre><code>   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 New Order \u2502  (market or pending)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502  market \u2192 executes immediately\n         \u2502  pending \u2192 waits for trigger (Stop/Limit, incl. StopLimit)\n         \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Open    \u2502  (position or active pending)\n   \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n       \u2502   \u2502\n       \u2502   \u2502  SL hit  \u2192 Closed (loss)\n       \u2502   \u2502  TP hit  \u2192 Closed (profit)\n       \u2502   \u25bc\n       \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 \u2502Closed \u2502\n       \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Cancelled \u2502 (pending deleted or expired by TIF)\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"Glossary/#account","title":"\ud83e\uddd1\u200d\ud83d\udcbb Account","text":"<ul> <li>Login \u2192 Numeric ID of your trading account.</li> <li>Password \u2192 Investor or trader password.</li> <li>Server / ServerName \u2192 Broker server name (e.g., <code>Broker-MT5-Demo</code>).</li> <li>Balance / Equity / Margin / Free Margin / Leverage \u2192 Standard account metrics.</li> <li>Id (Guid) \u2192 Local identifier sent in gRPC header <code>id</code> for session tracking.</li> </ul>"},{"location":"Glossary/#connection-grpc","title":"\ud83d\udd0c Connection &amp; gRPC","text":"<ul> <li>Endpoint \u2192 Default is <code>https://mt5.mrpc.pro:443</code> (<code>GrpcServer</code>).</li> <li>Channel \u2192 <code>GrpcChannel</code> (lifecycle managed in code).</li> <li>Clients \u2192 gRPC stubs: <code>Connection</code>, <code>SubscriptionService</code>, <code>AccountHelper</code>, <code>TradingHelper</code>, <code>MarketInfo</code>, <code>TradeFunctions</code>, <code>AccountInformation</code>.</li> <li>Headers \u2192 <code>Metadata { \"id\": &lt;Guid&gt; }</code> if <code>Id != Guid.Empty</code>.</li> <li>IsConnected \u2192 True if channel is alive and all clients are initialized.</li> </ul>"},{"location":"Glossary/#market-info","title":"\ud83d\udcc8 Market Info","text":"<ul> <li>Symbol \u2192 Instrument identifier (e.g., <code>EURUSD</code>).</li> <li>Digits / Point \u2192 Precision and minimum price step.</li> <li>Contract Size / Lot / Lot Step \u2192 Base volume definitions.</li> <li>Stops Level \u2192 Minimum distance for SL/TP/pending orders.</li> <li>Freeze Level \u2192 Zone where modifications are restricted by broker.</li> </ul>"},{"location":"Glossary/#orders","title":"\ud83d\udce6 Orders","text":"<ul> <li>Order / Position \u2192 Instruction and active position.</li> <li>SL / TP \u2192 Protective and target levels.</li> <li>Ticket (UInt64) \u2192 Unique identifier.</li> <li>Comment / Magic \u2192 Free text or EA tag.</li> </ul>"},{"location":"Glossary/#order-types-mt5","title":"\ud83d\udd04 Order Types (MT5)","text":"<p>Market Orders</p> <ul> <li><code>Buy</code>, <code>Sell</code> \u2014 executed immediately at market price.</li> </ul> <p>Pending Orders</p> <ul> <li><code>Buy Limit</code> \u2014 buy if price drops to X.</li> <li><code>Sell Limit</code> \u2014 sell if price rises to X.</li> <li><code>Buy Stop</code> \u2014 buy if price rises to X.</li> <li><code>Sell Stop</code> \u2014 sell if price falls to X.</li> <li> <p><code>Buy Stop Limit</code> / <code>Sell Stop Limit</code> \u2014 two-level orders: trigger (Stop) \u2192 place Limit.</p> </li> <li> <p>Buy Stop Limit: <code>Limit \u2264 Stop</code>.</p> </li> <li>Sell Stop Limit: <code>Limit \u2265 Stop</code>.</li> </ul> <p>TIF (Time in Force)</p> <ul> <li><code>GTC</code> \u2014 Good Till Cancel.</li> <li><code>DAY</code> \u2014 Valid for the trading day.</li> <li><code>GTD / SPECIFIED</code> \u2014 Good Till Date.</li> <li><code>SPECIFIED_DAY</code> \u2014 Until end of a specified day.</li> </ul>"},{"location":"Glossary/#history-streaming","title":"\ud83d\udcca History &amp; Streaming","text":"<ul> <li>Quotes / Bars \u2192 Historical ticks/bars.</li> <li>Orders / Deals \u2192 Trade history.</li> <li>Subscriptions \u2192 Real-time updates for quotes, trades, balances, etc.</li> </ul>"},{"location":"Glossary/#errors-codes","title":"\ud83d\udee1\ufe0f Errors &amp; Codes","text":"<ul> <li>Transport \u2192 Network/timeouts.</li> <li>Server trade errors \u2192 Broker-side validation (volume, prices, hours, etc.).</li> <li>Slippage / Requote \u2192 Price deviation or counter-quote.</li> <li>Wrapper behavior \u2192 Wrappers normalize server/oneof errors to exceptions.</li> </ul>"},{"location":"Glossary/#summary","title":"\u2705 Summary","text":"<ul> <li>Account \u2192 who you are.</li> <li>Market Info \u2192 what you trade.</li> <li>Orders \u2192 how you trade (incl. Stop Limit + TIF).</li> <li>Connection \u2192 how MT5 talks over gRPC.</li> <li>History/Streaming \u2192 how you monitor.</li> <li>Errors \u2192 what can go wrong.</li> </ul>"},{"location":"History_Expor/","title":"\ud83d\udcdc History &amp; Export","text":""},{"location":"History_Expor/#purpose","title":"Purpose","text":"<p>Work with account trading history \u2014 list past orders/deals and export them into machine-readable formats (CSV/JSON) for further analysis.</p>"},{"location":"History_Expor/#history-show-history-for-n-days","title":"\ud83d\udd39 <code>history</code> \u2014 show history for N days","text":"<p>Lists all trades (orders &amp; deals) for the last N days.</p> <p>Options:</p> Option Meaning Required <code>-p, --profile</code> Profile from <code>profiles.json</code> Yes <code>-d, --days &lt;int&gt;</code> How many days back to query Yes <code>-o, --output</code> Format: <code>text</code> (default) or <code>json</code> No <code>--timeout-ms</code> Per-RPC timeout No <p>Examples:</p> <pre><code># Show last 7 days in text\ndotnet run -- history -p demo -d 7\n\n# Show last 30 days in JSON\ndotnet run -- history -p demo -d 30 -o json\n</code></pre>"},{"location":"History_Expor/#historyexport-export-to-csvjson","title":"\ud83d\udd39 <code>history.export</code> \u2014 export to CSV/JSON","text":"<p>Export history into a file for external tools.</p> <p>Options:</p> Option Meaning Required <code>-p, --profile</code> Profile from <code>profiles.json</code> Yes <code>--days &lt;int&gt;</code> How many days back to include Yes <code>--to &lt;fmt&gt;</code> Export format: <code>csv</code> or <code>json</code> Yes <code>--file &lt;path&gt;</code> Output file path Yes <code>--symbol &lt;SYM&gt;</code> Optional filter by symbol (e.g., EURUSD) No <code>--timeout-ms &lt;ms&gt;</code> Per-RPC timeout No <p>Examples:</p> <pre><code># Export 30 days to CSV\ndotnet run -- history.export -p demo --days 30 --to csv  --file C:\\temp\\hist.csv\n\n# Export 30 days to JSON, filter by symbol\ndotnet run -- history.export -p demo --days 30 --to json --file C:\\temp\\eurusd.json --symbol EURUSD\n</code></pre>"},{"location":"History_Expor/#related-docs","title":"Related Docs \ud83d\udcda","text":"<ul> <li>History.md \u2014 Orders/deals history for N days  </li> <li>History_export.md \u2014 Export history (CSV/JSON)  </li> </ul>"},{"location":"History_Expor/#shortcasts","title":"\ud83d\udd39 Shortcasts","text":"<p>From <code>ps/shortcasts.ps1</code>:</p> <pre><code># Show history\nhist   # =&gt; mt5 history -p $PF -d 7 -o text\n\n# Export\nhexport # =&gt; mt5 history.export -p $PF --days 30 --to csv --file &lt;...&gt;\n</code></pre>"},{"location":"History_Expor/#notes-specific-to-our-code","title":"\ud83d\udccc Notes specific to our code","text":"<ul> <li>Both commands call <code>_mt5Account.HistoryOrdersAsync/DealsAsync</code> internally.</li> <li><code>history</code> prints directly to console (text or JSON).</li> <li><code>history.export</code> serializes to a file, using safe retry &amp; timeout logic.</li> <li>Output aligns with MT5\u2019s orders and deals model (tickets, prices, volumes, times).</li> </ul>"},{"location":"Logging_OutputFormats/","title":"Logging &amp; Output Formats \ud83d\udcdd","text":""},{"location":"Logging_OutputFormats/#logging-levels","title":"Logging levels \ud83d\udd0d","text":"<p>The CLI provides two extended logging modes in addition to the default (<code>info</code>):</p> <ul> <li> <p><code>--verbose</code> \u2014 enables debug-level logging.   \u2139\ufe0f Useful for tracing account IDs, symbol visibility, ticket numbers.</p> </li> <li> <p><code>--trace</code> \u2014 enables very detailed logs (wire/stream-level).   \u26a0\ufe0f Warning: very noisy, mostly for troubleshooting connectivity or gRPC issues.</p> </li> </ul> <p>By default only important <code>info</code> / <code>warn</code> / <code>error</code> messages are printed.</p>"},{"location":"Logging_OutputFormats/#output-formats","title":"Output formats \ud83d\udce4","text":"<p>Many commands support an <code>-o, --output</code> option:</p> <ul> <li><code>text</code> (default) \u2014 human-readable, concise output.</li> <li><code>json</code> \u2014 structured JSON, suitable for parsing by scripts and external systems.</li> </ul> <p>Examples:</p> <pre><code># Positions in JSON\n\ud83d\udcca dotnet run -- positions -p demo -o json\n\n# Dry-run in JSON\n\ud83e\udd16 dotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0700 --tp 1.0800 --dry-run -o json\n</code></pre>"},{"location":"Logging_OutputFormats/#dry-run-mode","title":"Dry-run mode \ud83d\uded1","text":"<p><code>--dry-run</code> shows what would be executed without sending anything to the server. This is especially useful for testing and debugging scripts.</p> <pre><code># Preview a reverse order without sending\n\ud83d\udc40 dotnet run -- reverse -p demo -s EURUSD --mode net --sl 1.0700 --tp 1.0850 --dry-run\n</code></pre>"},{"location":"Logging_OutputFormats/#related","title":"Related \ud83d\udd17","text":"<ul> <li>Timeouts &amp; Retries Policy</li> <li>Shortcasts &amp; Live Examples</li> </ul>"},{"location":"Shortcasts_LiveExamples/","title":"CSharpMT5 CLI \u2014 Shortcasts &amp; Live Examples \ud83d\ude80","text":"<p>\u2699\ufe0f General launch pattern (PowerShell / CMD):</p> <pre><code>dotnet run -- &lt;command&gt; [options]\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#global-options","title":"\ud83c\udf0d Global Options","text":"Option Meaning Notes <code>-p, --profile &lt;name&gt;</code> Profile from <code>profiles.json</code> (default: <code>default</code>) Switch accounts quickly <code>-s, --symbol &lt;SYM&gt;</code> Instrument/ticker, e.g., <code>EURUSD</code> Default taken from profile <code>-v, --volume &lt;lots&gt;</code> Order volume in lots <code>--deviation &lt;pts&gt;</code> Max slippage in points `-o, --output text json` Output format <code>text</code> or <code>json</code> (machine-friendly) <code>--timeout-ms &lt;ms&gt;</code> Per-RPC timeout (default: <code>30000</code>) Avoids hangs <code>--dry-run</code> Don\u2019t send anything, just show what would be done Great for testing <code>--verbose</code> / <code>--trace</code> Extended logging Debug / trace everything <p>\ud83d\udca1 Tip: set password via environment variable <code>MT5_PASSWORD</code> instead of hardcoding in files.</p>"},{"location":"Shortcasts_LiveExamples/#command-reference-shortcasts","title":"\ud83d\udcd1 Command Reference (Shortcasts)","text":"<p>Format: command \u2014 aliases \u2014 what it does</p>"},{"location":"Shortcasts_LiveExamples/#profiles","title":"\ud83d\udc64 Profiles","text":"<ul> <li><code>profiles list</code> \u2014 <code>ls</code> \u2192 list profile names</li> <li><code>profiles show</code> \u2014 <code>view</code> \u2192 show profile parameters (uses <code>MT5_PASSWORD</code>)</li> </ul>"},{"location":"Shortcasts_LiveExamples/#general-info","title":"\ud83d\udcca General / Info","text":"<ul> <li><code>info</code> \u2014 <code>i</code> \u2192 account summary</li> <li><code>quote</code> \u2014 <code>q</code> \u2192 one-shot spot quote (Bid/Ask/Time)</li> <li><code>health</code> \u2014 <code>ping</code> \u2192 connectivity diagnostics</li> <li><code>stream</code> \u2014 <code>st</code> \u2192 tick/event stream (auto-reconnect)</li> </ul>"},{"location":"Shortcasts_LiveExamples/#market-orders","title":"\ud83d\udcb9 Market Orders","text":"<ul> <li><code>buy</code> \u2014 <code>b</code> \u2192 market buy</li> <li><code>sell</code> \u2014 <code>s</code> \u2192 market sell</li> </ul>"},{"location":"Shortcasts_LiveExamples/#closing-reversing","title":"\ud83d\udd04 Closing / Reversing","text":"<ul> <li><code>close</code> \u2014 <code>c</code> \u2192 close by ticket (exact/normalized volume)</li> <li><code>close.percent</code> \u2014 <code>cpp</code> \u2192 close by percent</li> <li><code>close.half</code> \u2014 <code>ch</code> \u2192 close half (50%)</li> <li><code>close.partial</code> \u2014 <code>cp</code> \u2192 close exact volume</li> <li><code>close-all</code> \u2014 <code>flatten</code> \u2192 close all open positions</li> <li><code>close-symbol</code> \u2014 <code>cs</code> \u2192 close all positions for a symbol</li> <li><code>reverse</code> \u2014 <code>rv</code> \u2192 reverse net position (<code>--mode net|flat</code>)</li> <li><code>reverse.ticket</code> \u2014 <code>rvt</code> \u2192 reverse a specific ticket</li> </ul>"},{"location":"Shortcasts_LiveExamples/#sltp-safety","title":"\ud83c\udfaf SL/TP &amp; Safety","text":"<ul> <li><code>position.modify</code> \u2014 <code>posmod</code> \u2192 set SL/TP by price</li> <li><code>position.modify.points</code> \u2014 <code>pmp</code> \u2192 set SL/TP by points</li> <li><code>breakeven</code> \u2014 <code>be</code> \u2192 move SL to breakeven \u00b1 offset</li> <li><code>trail.start</code> \u2192 start a local trailing stop</li> <li><code>trail.stop</code> \u2192 stop trailing</li> </ul>"},{"location":"Shortcasts_LiveExamples/#pending-orders","title":"\ud83d\udccc Pending Orders","text":"<ul> <li><code>place</code> \u2014 <code>pl</code> \u2192 place pending (limit/stop/stop-limit)</li> <li><code>pending.modify</code> \u2014 <code>pm</code> \u2192 change pending params</li> <li><code>pending.move</code> \u2014 <code>pmove</code> \u2192 shift price(s) by \u00b1N pts</li> <li><code>pending list</code> \u2014 <code>ls</code> \u2192 list pending tickets</li> <li><code>cancel</code> \u2014 <code>x</code> \u2192 delete pending by ticket</li> <li><code>cancel.all</code> \u2014 <code>ca</code> \u2192 delete all pendings (with filters)</li> </ul>"},{"location":"Shortcasts_LiveExamples/#tickets-symbols-lists","title":"\ud83c\udf9f Tickets / Symbols / Lists","text":"<ul> <li><code>ticket show</code> \u2014 <code>tsh</code> \u2192 show info for a ticket (open/recent)</li> <li><code>positions</code> \u2014 <code>pos</code> \u2192 active positions</li> <li><code>orders</code> \u2014 <code>ord</code> \u2192 open orders + positions tickets</li> <li><code>symbol ensure</code> \u2014 <code>en</code> \u2192 make symbol visible</li> <li><code>symbol limits</code> \u2014 <code>lim</code> \u2192 lot min/step/max</li> <li><code>symbol show</code> \u2014 <code>sh</code> \u2192 symbol card (quote + limits)</li> </ul>"},{"location":"Shortcasts_LiveExamples/#history-tools","title":"\ud83d\udcdc History / Tools","text":"<ul> <li><code>history</code> \u2014 <code>h</code> \u2192 orders/deals history for N days</li> <li><code>history.export</code> \u2014 <code>hexport</code> \u2192 export history (CSV/JSON)</li> <li><code>lot.calc</code> \u2014 <code>lc</code> \u2192 lot size from risk% &amp; SL pts</li> <li><code>panic</code> \u2192 close all + cancel all pendings</li> </ul>"},{"location":"Shortcasts_LiveExamples/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Profiles\ndotnet run -- profiles list\ndotnet run -- profiles show -p demo\n\n# Connectivity\ndotnet run -- health -p demo\n\n# One quote\ndotnet run -- q -p demo -s EURUSD\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#practical-scenarios","title":"\ud83d\udee0 Practical Scenarios","text":""},{"location":"Shortcasts_LiveExamples/#1-open-manage-position","title":"1\ufe0f\u20e3 Open &amp; Manage Position","text":"<pre><code>dotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0700 --tp 1.0800 --deviation 10\ndotnet run -- breakeven -p demo -t 123456 --offset-points 2\ndotnet run -- position.modify.points -p demo -t 123456 --sl-points 150 --tp-points 250\ndotnet run -- trail.start -p demo -t 123456 --distance 150 --step 20\ndotnet run -- trail.stop -p demo -t 123456\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#2-partial-close-reverse","title":"2\ufe0f\u20e3 Partial Close &amp; Reverse","text":"<pre><code>dotnet run -- close.half -p demo -t 123456\ndotnet run -- close.percent -p demo -t 123456 --pct 30\ndotnet run -- close.partial -p demo -t 123456 --volume 0.05\ndotnet run -- reverse -p demo -s EURUSD --mode net  --sl 1.0700 --tp 1.0850\ndotnet run -- reverse.ticket -p demo -t 123456 --sl 1.0700 --tp 1.0850\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#3-pendings","title":"3\ufe0f\u20e3 Pendings","text":"<pre><code>dotnet run -- place -p demo --type buylimit  -s EURUSD --price 1.0750 --sl 1.0700 --tp 1.0800\ndotnet run -- pending.modify -p demo -t 778899 --price 1.0765 --sl 1.0745\ndotnet run -- pending.move -p demo -t 778899 --by-points 15\ndotnet run -- pending list -p demo\ndotnet run -- cancel -p demo -t 778899 -s EURUSD\ndotnet run -- cancel.all -p demo --symbol EURUSD\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#4-lists-symbols","title":"4\ufe0f\u20e3 Lists &amp; Symbols","text":"<pre><code>dotnet run -- positions -p demo -o json\ndotnet run -- orders -p demo\ndotnet run -- symbol show -p demo -s EURUSD\ndotnet run -- symbol ensure -p demo -s GBPUSD\ndotnet run -- symbol limits -p demo -s USDJPY\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#5-tickets-history","title":"5\ufe0f\u20e3 Tickets &amp; History","text":"<pre><code>dotnet run -- ticket show -p demo -t 123456 --days 30\ndotnet run -- history -p demo -d 7\ndotnet run -- history.export -p demo -d 30 --to csv  --file C:\\temp\\hist.csv\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#6-risk-panic","title":"6\ufe0f\u20e3 Risk &amp; Panic","text":"<pre><code>dotnet run -- lot.calc -s EURUSD --risk-pct 1 --sl-points 150 --balance 1000\ndotnet run -- panic -p demo\n</code></pre>"},{"location":"Shortcasts_LiveExamples/#debugging-tips","title":"\ud83d\udd0e Debugging &amp; Tips","text":"<ul> <li>Profile not found: check <code>profiles.json</code> placement</li> <li>Hidden symbol: run <code>symbol ensure</code></li> <li>Timeouts: bump <code>--timeout-ms</code> or add <code>--trace</code></li> </ul>"},{"location":"SymbolRules_SmartStops/","title":"Symbol Rules &amp; Smart Stops \u2699\ufe0f\ud83c\udfaf","text":""},{"location":"SymbolRules_SmartStops/#what-this-solves","title":"What this solves","text":"<p>When placing market orders with SL/TP, brokers enforce symbol-specific rules:</p> <ul> <li>price precision (digits / point),</li> <li>minimum stop distance from market (aka StopLevel in points),</li> <li>correct side of SL/TP for BUY/SELL (SL must reduce risk, TP must take profit),</li> <li>rounding to tick size.</li> </ul> <p>To avoid server rejections and \u201cInvalid stops\u201d, the CLI performs preflight stop validation (we call it Smart Stops) before sending the order.</p>"},{"location":"SymbolRules_SmartStops/#where-rules-come-from","title":"Where rules come from \ud83d\udce1","text":"<p>We derive constraints from these calls:</p> <ul> <li>Latest quote \u2192 <code>FirstTickAsync(symbol, ct)</code>   Gives Bid/Ask &amp; time; used as the market reference for SL/TP direction and min distance.</li> <li>Point size (guess) \u2192 <code>_mt5Account.PointGuess(symbol)</code>   Fast heuristic when exact meta isn\u2019t available.</li> <li>Symbol limits (min/step/max lot) \u2192 <code>symbol limits</code> command   Useful for sizing; not directly for SL/TP but part of the same \u201csymbol rules\u201d family.</li> <li> <p>(Optional/Recommended) Market meta (if available in your build):</p> </li> <li> <p><code>digits</code> (price precision)</p> </li> <li><code>stopLevelPoints</code> (minimal distance for SL/TP from market/entry)</li> <li><code>point</code> (tick size)     Your <code>buy</code> handler already has placeholders for these:</li> </ul> <pre><code>int? digits = null;             // TODO: fetch via MarketInfo if available\ndouble? stopLevelPoints = null; \ndouble? point = null;\n</code></pre> <p>If <code>digits/point/stopLevelPoints</code> are not fetched, Smart Stops still work using <code>quote + PointGuess(symbol)</code>, but having true broker values makes them stricter and safer.</p>"},{"location":"SymbolRules_SmartStops/#smart-stops-what-it-does","title":"Smart Stops: what it does \ud83e\udde0","text":"<p><code>PreflightStops(isBuy, bid, ask, ref sl, ref tp, digits?, stopLevelPoints?, point?)</code>:</p> <ol> <li> <p>Rounding</p> </li> <li> <p>Rounds <code>sl</code>/<code>tp</code> to the symbol\u2019s <code>digits</code> (if provided).</p> </li> <li> <p>If <code>digits</code> is unknown, it derives rounding from <code>point</code> (e.g., <code>0.0001</code>).</p> </li> <li> <p>Correct side</p> </li> <li> <p>BUY:</p> <ul> <li>SL must be &lt; Ask</li> <li>TP must be &gt; Ask</li> <li> <p>SELL:</p> </li> <li> <p>SL must be &gt; Bid</p> </li> <li>TP must be &lt; Bid</li> <li>If a user-provided stop is on the wrong side, it\u2019s nudged to the nearest valid side (or rejected if impossible).</li> </ul> </li> <li> <p>Minimum distance (StopLevel)</p> </li> <li> <p>If <code>stopLevelPoints</code> is provided (or can be estimated from <code>point</code>):</p> <ul> <li> <p>BUY:</p> </li> <li> <p><code>SL \u2264 Ask - stopLevel*point</code></p> </li> <li><code>TP \u2265 Ask + stopLevel*point</code></li> <li> <p>SELL:</p> </li> <li> <p><code>SL \u2265 Bid + stopLevel*point</code></p> </li> <li><code>TP \u2264 Bid - stopLevel*point</code></li> <li>If too close, the value is pushed out to the minimal allowed distance.</li> </ul> </li> <li> <p>Idempotence &amp; No surprises</p> </li> <li> <p>If user skipped SL or TP (<code>null</code>), nothing is created implicitly.</p> </li> <li>If both are provided and valid \u2014 no changes beyond rounding.</li> </ol> <p>The goal is to catch broker rejections upfront and keep the order flow smooth.</p>"},{"location":"SymbolRules_SmartStops/#buy-flow","title":"BUY flow \u2705","text":"<pre><code>// 1) Ensure symbol is visible (best-effort; some servers require this)\nawait _mt5Account.EnsureSymbolVisibleAsync(s, maxWait: TimeSpan.FromSeconds(3), cancellationToken: visCts.Token);\n\n// 2) Get current market context\nvar q = await CallWithRetry(ct =&gt; FirstTickAsync(s, ct), opCts.Token);\nvar bid = q.Bid; \nvar ask = q.Ask;\n\n// 3) Apply Smart Stops (digits/point/stopLevel can be wired to real meta later)\nint? digits = null;\ndouble? stopLevelPoints = null;\ndouble? point = null;\n\nPreflightStops(\n  isBuy: true,\n  bid: bid,\n  ask: ask,\n  sl: ref sl,\n  tp: ref tp,\n  digits: digits,\n  stopLevelPoints: stopLevelPoints,\n  point: point\n);\n\n// 4) Place order (with final, validated SL/TP)\nvar ticket = await CallWithRetry(\n  ct =&gt; _mt5Account.SendMarketOrderAsync(\n          symbol: s, isBuy: true, volume: volume, deviation: deviation,\n          stopLoss: sl, takeProfit: tp, deadline: null, cancellationToken: ct),\n  opCts.Token);\n</code></pre>"},{"location":"SymbolRules_SmartStops/#common-pitfalls-the-preflight-avoids","title":"Common pitfalls the preflight avoids \ud83e\udde8","text":"<ul> <li>\u201cInvalid SL/TP: too close to market\u201d \u2014 enforces <code>StopLevel</code> distance.</li> <li>\u201cInvalid SL/TP side\u201d \u2014 e.g., BUY with SL above Ask or TP below Ask.</li> <li>\u201cBad precision\u201d \u2014 rounds prices to <code>digits</code> / <code>point</code> tick.</li> <li>\u201cHidden symbol\u201d \u2014 ensures the symbol is visible first.</li> </ul>"},{"location":"SymbolRules_SmartStops/#cli-examples","title":"CLI examples \ud83d\udee0\ufe0f","text":"<pre><code># BUY with clearly valid SL/TP (assuming StopLevel ~ 150 pts)\ndotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0700 --tp 1.0800 --deviation 10\n\n# If SL/TP are on the wrong side or too close, Smart Stops will push them to the nearest valid prices.\n# (You\u2019ll see only final accepted values in logs or in JSON payload if requested.)\n</code></pre> <p>Tip: if you see rejections like \u201cTP must be &gt; Ask\u201d, it means your input levels were inconsistent with current market. Quotes can move even between validation and send. Smart Stops reduce this risk, but they can\u2019t fix a level that\u2019s fundamentally on the wrong side at the exact server check. Re-run quickly or widen distance.</p>"},{"location":"SymbolRules_SmartStops/#related-commands","title":"Related commands \ud83d\udd17","text":"<ul> <li><code>symbol show</code> \u2014 quick quote + lot limits card</li> <li><code>symbol limits</code> \u2014 min/step/max lot (sizing/risk)</li> <li><code>quote</code> \u2014 check Bid/Ask/Time before placing an order</li> </ul>"},{"location":"SymbolRules_SmartStops/#tldr","title":"TL;DR","text":"<ul> <li>Always: get a fresh quote \u2192 run <code>PreflightStops</code> \u2192 send the order.</li> <li>Provide true symbol meta when possible (digits/point/stopLevel).</li> <li>Smart Stops save you from 80% of broker-side rejections on SL/TP.</li> </ul>"},{"location":"Ticket_Toolbox/","title":"Ticket Toolbox \ud83c\udf9f\ufe0f","text":""},{"location":"Ticket_Toolbox/#purpose","title":"Purpose","text":"<p>Work with a specific ticket: inspect, reverse, or partially close. These commands rely on ticket IDs (<code>ulong</code>) from MT5 and respect our validation rules (<code>Validators.EnsureTicket</code>).</p>"},{"location":"Ticket_Toolbox/#available-commands","title":"Available Commands \ud83d\udee0\ufe0f","text":""},{"location":"Ticket_Toolbox/#inspect","title":"\ud83d\udd0d Inspect","text":"<ul> <li><code>ticket show</code>   Show info for a specific ticket.   If ticket is open \u2192 full position/order details.   If ticket is closed \u2192 recent history lookup.</li> </ul>"},{"location":"Ticket_Toolbox/#reverse","title":"\u2194\ufe0f Reverse","text":"<ul> <li><code>reverse.ticket</code>   Reverse a single position by ticket (open opposite with same volume).   Useful for flipping only one position instead of whole net exposure.</li> </ul>"},{"location":"Ticket_Toolbox/#partial-closes","title":"\u2702\ufe0f Partial closes","text":"<ul> <li> <p><code>close</code> / <code>close.partial</code> / <code>close.percent</code> / <code>close.half</code>   All these support working by ticket.</p> </li> <li> <p><code>close</code> \u2014 full close (or with specified volume).</p> </li> <li><code>close.partial</code> \u2014 close exact lot amount.</li> <li><code>close.percent</code> \u2014 close percentage.</li> <li><code>close.half</code> \u2014 shortcut for 50%.</li> </ul>"},{"location":"Ticket_Toolbox/#implementation-notes","title":"Implementation Notes \u2699\ufe0f","text":"<ul> <li> <p>Validation:   All commands call <code>Validators.EnsureTicket(ticket)</code> to ensure <code>&gt;0</code>.</p> </li> <li> <p>Lookup:   Utility <code>TryFindByTicketInAggregate(...)</code> is used to locate an order/position inside returned aggregates (<code>OpenedOrdersAsync</code>, <code>OpenedOrdersTicketsAsync</code>).</p> </li> <li> <p>Execution:</p> </li> <li> <p><code>CloseOrderByTicketAsync</code> \u2014 the low-level gRPC API used by <code>close*</code> commands.</p> </li> <li><code>ModifyPositionSlTpAsync</code> \u2014 for SL/TP changes.</li> <li> <p><code>CloseByEmulatedAsync</code> \u2014 for <code>closeby</code> logic.</p> </li> <li> <p>Dry-run:   Every ticket command supports <code>--dry-run</code> to preview without sending.</p> </li> </ul>"},{"location":"Ticket_Toolbox/#shortcuts","title":"Shortcuts \u26a1","text":"Command Alias <code>ticket show</code> <code>t sh</code> <code>reverse.ticket</code> <code>rvt</code> <code>close.partial</code> <code>cp</code> <code>close.percent</code> <code>cpp</code> <code>close.half</code> <code>ch</code>"},{"location":"Timeouts_RetriesPolicy/","title":"Timeouts &amp; Retries Policy \u23f1\ufe0f\ud83d\udd01","text":"<p>This page explains how CSharpMT5 CLI bounds operations with timeouts and stabilizes calls with retries. Use it to tune reliability for local use and CI.</p>"},{"location":"Timeouts_RetriesPolicy/#tldr","title":"TL;DR","text":"<ul> <li><code>--timeout-ms</code> sets a per\u2011RPC time budget (default 30000 ms).</li> <li>Every high\u2011level command is wrapped by operation scopes to prevent hangs.</li> <li><code>CallWithRetry(...)</code> re\u2011invokes transiently failing RPCs with a short exponential backoff + jitter.</li> <li>Prefer shorter timeouts in CI (fast fail) and longer for slow terminals.</li> </ul>"},{"location":"Timeouts_RetriesPolicy/#control-knobs","title":"Control knobs","text":"Knob Scope Default Where <code>--timeout-ms</code> Per RPC (single gRPC call) <code>30000</code> CLI option on most commands <code>UseOpTimeout(ms)</code> Whole command (outer scope) inherits <code>Program.cs</code> wrapper <code>StartOpCts()</code> Sub\u2011step time budget derived from outer scope used before each awaited call <p>Rule of thumb: outer scope \u2265 inner per\u2011RPC timeouts. Avoid nested timeouts with conflicting budgets.</p>"},{"location":"Timeouts_RetriesPolicy/#execution-model-typical-command","title":"Execution model (typical command)","text":"<ol> <li>Parse CLI \u2192 read <code>--timeout-ms</code>.</li> <li><code>using (UseOpTimeout(timeoutMs))</code> \u2014 creates an outer CancellationTokenSource for the command.</li> <li><code>await ConnectAsync()</code> \u2014 connection itself is bounded by the outer CTS.</li> <li>Before each RPC: <code>using var opCts = StartOpCts();</code></li> <li>Call via <code>await CallWithRetry(fn, opCts.Token)</code> \u2014 transient errors are retried.</li> <li>Single print point (either JSON or text) \u2192 exit.</li> </ol>"},{"location":"Timeouts_RetriesPolicy/#what-is-retried","title":"What is retried","text":"<p><code>CallWithRetry</code> targets transient conditions, for example:</p> <ul> <li><code>StatusCode.Unavailable</code> (server temporarily down, reconnect in progress)</li> <li><code>TERMINAL_INSTANCE_NOT_FOUND</code> (terminal restarted; wrapper reconnects)</li> <li>Network hiccups (channel reset)</li> </ul> <p>Backoff policy (conceptually):</p> <pre><code>base = 200\u2013500 ms\nnext = base * 2^attempt + small jitter (\u00b130%)\nmax attempts = small fixed number (e.g., 3\u20135)\ncap single sleep \u2248 2\u20133 s\n</code></pre> <p>Not retried:</p> <ul> <li>Validation / argument errors (e.g., invalid SL/TP constraints)</li> <li>Server\u2011rejected business rules (e.g., market closed, no money)</li> <li>Deterministic protobuf/serialization errors</li> </ul>"},{"location":"Timeouts_RetriesPolicy/#choosing-a-timeout","title":"Choosing a timeout","text":"Scenario Suggested <code>--timeout-ms</code> Why Local development <code>30000\u201360000</code> Human\u2011paced, network can wobble CI fast checks (quote/info) <code>3000\u201310000</code> Fail fast to keep pipeline crisp Heavy accounts / history <code>60000\u2013120000</code> Larger payloads, slower terminals Streaming (<code>stream</code>) <code>30000</code> (handshake) Then long\u2011lived read loop <p>Tip: If you see frequent <code>DeadlineExceeded</code>, first verify connectivity and server load; throwing more timeout sometimes only hides real issues.</p>"},{"location":"Timeouts_RetriesPolicy/#patterns-antipatterns","title":"Patterns &amp; anti\u2011patterns","text":"<p>\u2705 Do</p> <ul> <li>Use a single print point to avoid duplicated output on retries.</li> <li>Keep idempotency in mind: a retried read is safe; a retried write should be guarded (we rely on server\u2011side ticketing semantics).</li> <li>Log scopes: <code>BeginScope(\"Cmd:... Symbol:{Symbol}\", ...)</code> for traceability.</li> </ul> <p>\ud83d\udeab Don\u2019t</p> <ul> <li>Don\u2019t do nested unrelated CTS with smaller deadlines than the outer one.</li> <li>Don\u2019t swallow <code>OperationCanceledException</code> silently\u2014print a clear timeout line.</li> </ul>"},{"location":"Timeouts_RetriesPolicy/#sample-skeleton","title":"Sample skeleton","text":"<pre><code>using (UseOpTimeout(timeoutMs))\nusing (_logger.BeginScope(\"Cmd:BUY Profile:{Profile}\", profile))\n{\n    await ConnectAsync();\n\n    using var opCts = StartOpCts();\n    var ticket = await CallWithRetry(\n        ct =&gt; _mt5Account.SendMarketOrderAsync(\n            symbol: s, isBuy: true, volume: v, deviation: dev,\n            stopLoss: sl, takeProfit: tp, deadline: null, cancellationToken: ct),\n        opCts.Token);\n\n    _logger.LogInformation(\"BUY done: ticket={Ticket}\", ticket);\n}\n</code></pre>"},{"location":"Timeouts_RetriesPolicy/#debugging-timeouts","title":"Debugging timeouts","text":"<ol> <li>Re\u2011run with <code>--trace</code> to see where it stops (connect vs RPC).</li> <li>Test basic connectivity:</li> </ol> <p><pre><code>dotnet run -- health -p &lt;profile&gt;\ndotnet run -- quote -p &lt;profile&gt; -s EURUSD\n</code></pre> 3. Try a larger <code>--timeout-ms</code> and watch logs for <code>Unavailable</code>. 4. If only writes fail (buy/sell/modify) \u2192 check symbol visibility (<code>symbol ensure</code>) and trading session status.</p>"},{"location":"Timeouts_RetriesPolicy/#faq","title":"FAQ","text":"<p>Q: Why does my <code>info</code> print twice sometimes? A: Ensure printing happens outside <code>CallWithRetry</code>; log/return values inside the retry, but write to console once.</p> <p>Q: Should I retry on <code>DeadlineExceeded</code>? A: Usually no\u2014first increase <code>--timeout-ms</code> or reduce payload. Retrying a strictly time\u2011bounded call rarely helps.</p> <p>Q: How many retries are used? A: A small, fixed number to avoid long stalls (keep user experience snappy). Check code for exact constant if you need to tweak.</p>"},{"location":"Timeouts_RetriesPolicy/#ci-recommendations","title":"CI recommendations","text":"<ul> <li>Use <code>--output json</code> for machine parsing.</li> <li>Keep <code>--timeout-ms</code> small (<code>5\u201310 s</code>) for smoke tests.</li> <li>Separate connectivity step (<code>health</code>) from functional steps.</li> <li>Alert on repeated <code>Unavailable</code> spikes\u2014indicates terminal or network instability.</li> </ul>"},{"location":"Timeouts_RetriesPolicy/#related","title":"Related","text":"<ul> <li>Getting Started</li> <li>Shortcasts &amp; Live Examples</li> </ul>"},{"location":"Troubleshooting%28FAQ%29/","title":"Diagnostics &amp; Troubleshooting (FAQ) \ud83d\udee0\ufe0f","text":"<p>This section lists common errors, warnings, and edge cases you may encounter when running <code>CSharpMT5</code>, with explanations tied to our code and retry/validation logic.</p>"},{"location":"Troubleshooting%28FAQ%29/#1-profiles-connection","title":"1. Profiles &amp; Connection","text":"<p>\u274c Error: <code>Set Host or MtClusterName before connect</code></p> <p>Cause: Your profile is missing either <code>Host/Port</code> or <code>ServerName</code>. Our code (<code>Validators.EnsureProfile</code>) enforces that at least one connect method is defined.</p> <p>\u2705 Fix: Check <code>profiles.json</code>. Example:</p> <pre><code>\"default\": {\n  \"AccountId\": 111111,\n  \"Password\": \"YOUR_PASSWORD\",\n  \"Host\": \"95.217.147.61\",\n  \"Port\": 443\n}\n</code></pre> <p>or</p> <pre><code>\"demo\": {\n  \"AccountId\": 95591860,\n  \"Password\": \"YOUR_PASSWORD\",\n  \"ServerName\": \"MetaQuotes-Demo\"\n}\n</code></pre>"},{"location":"Troubleshooting%28FAQ%29/#2-stale-quotes-invalid-stops","title":"2. Stale Quotes / Invalid Stops","text":"<p>\u274c Error: <code>Invalid TP for BUY: must be &gt; Ask</code> or <code>[STALE &gt;5s]</code> on quotes.</p> <p>Cause: Our preflight (<code>PreflightStops</code>) validates SL/TP against latest Bid/Ask. If your SL/TP is on the wrong side of market, or quotes are stale, validation fails.</p> <p>\u2705 Fix:</p> <ul> <li>Adjust SL/TP relative to Bid/Ask.</li> <li>If using <code>--dry-run</code>, values are not checked.</li> <li>For stale feed: ensure terminal is connected, or switch to another broker server.</li> </ul>"},{"location":"Troubleshooting%28FAQ%29/#3-timeouts-retries","title":"3. Timeouts &amp; Retries","text":"<p>\u274c Error: <code>OperationCanceledException</code></p> <p>Cause:</p> <ul> <li>The gRPC call exceeded <code>--timeout-ms</code>.</li> <li>Network hiccup.</li> <li>MetaTrader terminal busy.</li> </ul> <p>\u2705 Fix:</p> <ul> <li>Increase <code>--timeout-ms</code> (default 30000).</li> <li>Use <code>--trace</code> for detailed logs.</li> <li>Our code retries most calls (<code>CallWithRetry</code>), but some failures propagate if persistent.</li> </ul>"},{"location":"Troubleshooting%28FAQ%29/#4-symbol-visibility","title":"4. Symbol Visibility","text":"<p>\u26a0\ufe0f Warning: <code>EnsureSymbolVisibleAsync failed: Symbol hidden</code></p> <p>Cause: MT5 sometimes hides symbols until manually added to Market Watch. Our code attempts best-effort auto-ensure, but not all servers allow it.</p> <p>\u2705 Fix: Run:</p> <pre><code>dotnet run -- symbol ensure -p demo -s EURUSD\n</code></pre>"},{"location":"Troubleshooting%28FAQ%29/#5-partial-close-reverse","title":"5. Partial Close / Reverse","text":"<p>\u274c Error: <code>Position with ticket #123456 not found</code></p> <p>Cause:</p> <ul> <li>Ticket not in <code>OpenedOrdersAsync</code> response.</li> <li>Wrong account/profile.</li> <li>Already closed by another action.</li> </ul> <p>\u2705 Fix:</p> <ul> <li>Double-check ticket with <code>positions</code> or <code>orders</code>.</li> <li>Ensure correct profile with <code>-p demo</code>.</li> <li>For <code>reverse</code>, ensure symbol exposure exists.</li> </ul>"},{"location":"Troubleshooting%28FAQ%29/#6-history-export","title":"6. History Export","text":"<p>\u274c Error: <code>file path invalid or not writable</code></p> <p>Cause: <code>history.export</code> uses <code>--file</code> to save CSV/JSON. If path invalid, exception thrown.</p> <p>\u2705 Fix:</p> <ul> <li>Use full path (e.g., <code>C:\\temp\\hist.csv</code>).</li> <li>Ensure write permissions.</li> <li>Example:</li> </ul> <pre><code>dotnet run -- history.export -p demo -d 30 --to csv --file C:\\temp\\hist.csv\n</code></pre>"},{"location":"Troubleshooting%28FAQ%29/#7-dry-run-mode","title":"7. Dry-Run Mode","text":"<p>\u2139\ufe0f Behavior: With <code>--dry-run</code>, nothing is sent to broker. Our code prints JSON or text simulation.</p> <p>Use it to test commands safely before risking real money.</p>"},{"location":"Troubleshooting%28FAQ%29/#8-panic-mode","title":"8. Panic Mode","text":"<p>\u26a0\ufe0f Note: <code>panic</code> closes all positions and cancels pendings. This calls <code>CloseOrderByTicketAsync(volume=0)</code> convention for deletions.</p> <p>\u2705 Best practice: Use only in controlled scripts (CI/CD, emergency exit).</p>"},{"location":"API_Reference/Enums/","title":"\ud83c\udf9b\ufe0f API Reference \u2014 Enums (MT5)","text":"<p>This page lists key enumerations used by the MT5 C# SDK (<code>mt5_term_api</code>). Names match the <code>.proto</code> files; C# members are in PascalCase.</p>"},{"location":"API_Reference/Enums/#orders","title":"\ud83d\udcca Orders","text":""},{"location":"API_Reference/Enums/#tmt5_enum_order_type-ordertype","title":"TMT5_ENUM_ORDER_TYPE (OrderType)","text":"Name Meaning <code>Tmt5OrderTypeBuy</code> Market Buy <code>Tmt5OrderTypeSell</code> Market Sell <code>Tmt5OrderTypeBuyLimit</code> Pending Buy Limit <code>Tmt5OrderTypeSellLimit</code> Pending Sell Limit <code>Tmt5OrderTypeBuyStop</code> Pending Buy Stop <code>Tmt5OrderTypeSellStop</code> Pending Sell Stop <code>Tmt5OrderTypeBuyStopLimit</code> Pending Buy Stop Limit <code>Tmt5OrderTypeSellStopLimit</code> Pending Sell Stop Limit <p>Alias / Usage: Used in <code>OrderSendRequest.Operation</code>, <code>OpenedOrderInfo.Type</code>, and related messages.</p>"},{"location":"API_Reference/Enums/#tmt5_enum_order_type_time-ordertypetime-tif","title":"TMT5_ENUM_ORDER_TYPE_TIME (OrderTypeTime / TIF)","text":"Name Meaning <code>Tmt5OrderTimeGtc</code> Good Till Cancel <code>Tmt5OrderTimeDay</code> Day (valid for the trading day) <code>Tmt5OrderTimeSpecified</code> Good Till Date/Specified time <code>Tmt5OrderTimeSpecifiedDay</code> Until end of specified day <p>Alias / Usage: Used in <code>OrderSendRequest.ExpirationTimeType</code> and <code>OrderModifyRequest.ExpirationTimeType</code>.</p>"},{"location":"API_Reference/Enums/#symbol-market-info","title":"\ud83d\udcc8 Symbol &amp; Market Info","text":""},{"location":"API_Reference/Enums/#symbolinfodoubleproperty-symbolinfodouble","title":"SymbolInfoDoubleProperty (SymbolInfoDouble)","text":"Name Meaning <code>SymbolVolumeMin</code> Minimum allowed volume (lots) <code>SymbolVolumeMax</code> Maximum allowed volume (lots) <code>SymbolVolumeStep</code> Volume step (lots) <p>Alias / Usage: Queried via <code>SymbolInfoDoubleAsync(symbol, property, ...)</code> to validate order volume.</p>"},{"location":"API_Reference/Enums/#order-modification","title":"\ud83d\udd27 Order Modification","text":"<p>These enums are used when creating or modifying orders.</p> <ul> <li><code>TMT5_ENUM_ORDER_TYPE</code> \u2014 order kind (market / pending / stop\u2011limit).</li> <li><code>TMT5_ENUM_ORDER_TYPE_TIME</code> \u2014 Time\u2011in\u2011Force.</li> </ul> <p>Common rules:</p> <ul> <li>Buy Stop Limit requires <code>Limit \u2264 Stop</code>.</li> <li>Sell Stop Limit requires <code>Limit \u2265 Stop</code>.</li> <li>TIF Specified/GTD requires <code>ExpirationTime</code>.</li> </ul>"},{"location":"API_Reference/Enums/#where-they-appear-by-message","title":"\ud83e\udded Where They Appear (by message)","text":"<ul> <li>OrderSendRequest: <code>Operation</code>, <code>ExpirationTimeType</code>, <code>ExpirationTime</code>.</li> <li>OrderModifyRequest: <code>Ticket</code>, <code>Price</code>, <code>StopLimit</code>, <code>StopLoss</code>, <code>TakeProfit</code>, <code>ExpirationTimeType</code>, <code>ExpirationTime</code>.</li> <li>OpenedOrderInfo: <code>Type</code>, <code>Ticket</code>, <code>Symbol</code>, prices.</li> <li>Market/Symbol: <code>SymbolInfoDoubleProperty</code> used by <code>SymbolInfoDoubleAsync</code>.</li> </ul>"},{"location":"API_Reference/Enums/#tips","title":"\u2705 Tips","text":"<ul> <li>Use enum names from generated C# (<code>mt5_term_api</code>) exactly as defined.</li> <li>Validate volume using <code>SymbolVolumeMin/Max/Step</code> before sending orders.</li> <li>When mapping user input, normalize to your canonical names (e.g., \"buylimit\" \u2192 <code>Tmt5OrderTypeBuyLimit</code>).</li> <li>For TIF = <code>Specified</code>/<code>SpecifiedDay</code>, always set <code>ExpirationTime</code>.</li> </ul>"},{"location":"API_Reference/Messages/","title":"\ud83d\udcd8 API Reference \u2014 Messages (MT5)","text":"<p>This page documents message types used by the MT5 gRPC API (<code>mt5_term_api</code>). Numbers, names and field order match the source <code>.proto</code> files. Enums are listed in the Enums (MT5) page.</p>"},{"location":"API_Reference/Messages/#conventions","title":"\ud83d\udd16 Conventions","text":"<ul> <li><code>google.protobuf.Timestamp</code> \u2192 \u23f0 UTC time.</li> <li><code>optional</code> fields \u2192 present only when explicitly set (proto3 <code>optional</code>).</li> <li>Wrappers \u2192 the API mostly uses plain primitives; when wrappers appear, they provide presence.</li> <li>Prices &amp; volumes \u2192 \ud83d\udcb9 validate with <code>SymbolInfoDoubleProperty</code> (e.g., <code>SymbolVolumeMin/Max/Step</code>).</li> <li>Currency \u2192 \ud83d\udcb5 monetary values are in account currency (see <code>AccountSummaryData.account_currency</code>).</li> </ul>"},{"location":"API_Reference/Messages/#account-orders","title":"\ud83e\uddfe Account &amp; Orders","text":""},{"location":"API_Reference/Messages/#accountsummary-accountsummarydata","title":"\ud83d\udcca AccountSummary (AccountSummaryData)","text":"# Field Type 1 <code>account_login</code> int64 2 <code>account_balance</code> double 3 <code>account_equity</code> double 4 <code>account_user_name</code> string 5 <code>account_leverage</code> int64 6 <code>account_trade_mode</code> <code>MrpcEnumAccountTradeMode</code> 7 <code>account_company_name</code> string 8 <code>account_currency</code> string 9 <code>server_time</code> Timestamp 10 <code>utc_timezone_server_time_shift_minutes</code> int64 11 <code>account_credit</code> double <p>Notes: snapshot for health/risk checks; leverage as integer; <code>server_time</code> is UTC.</p>"},{"location":"API_Reference/Messages/#openedorderinfo-live-orderspending","title":"\ud83d\udccc OpenedOrderInfo (live orders/pending)","text":"# Field Type 1 <code>index</code> uint32 2 <code>ticket</code> uint64 3 <code>price_current</code> double 4 <code>price_open</code> double 5 <code>stop_limit</code> double 6 <code>stop_loss</code> double 7 <code>take_profit</code> double 8 <code>volume_current</code> double 9 <code>volume_initial</code> double 10 <code>magic_number</code> int64 11 <code>reason</code> int32 12 <code>type</code> <code>BMT5_ENUM_ORDER_TYPE</code> 13 <code>state</code> <code>BMT5_ENUM_ORDER_STATE</code> 14 <code>time_expiration</code> Timestamp 15 <code>time_setup</code> Timestamp 16 <code>time_done</code> Timestamp 17 <code>type_filling</code> <code>BMT5_ENUM_ORDER_TYPE_FILLING</code> 18 <code>type_time</code> <code>BMT5_ENUM_ORDER_TYPE_TIME</code> 19 <code>position_id</code> int64 20 <code>position_by_id</code> int64 21 <code>symbol</code> string 22 <code>external_id</code> string 23 <code>comment</code> string 24 <code>account_login</code> int64 <p>Notes: used in <code>OpenedOrders{Request,Reply,Data}</code>.</p>"},{"location":"API_Reference/Messages/#positioninfo-open-positions","title":"\ud83d\udccc PositionInfo (open positions)","text":"# Field Type 1 <code>index</code> uint32 2 <code>ticket</code> uint64 3 <code>open_time</code> Timestamp 4 <code>volume</code> double 5 <code>price_open</code> double 6 <code>stop_loss</code> double 7 <code>take_profit</code> double 8 <code>price_current</code> double 9 <code>swap</code> double 10 <code>profit</code> double 11 <code>last_update_time</code> Timestamp 12 <code>type</code> <code>BMT5_ENUM_POSITION_TYPE</code> 13 <code>magic_number</code> int64 14 <code>identifier</code> int64 15 <code>reason</code> <code>BMT5_ENUM_POSITION_REASON</code> 16 <code>symbol</code> string 17 <code>comment</code> string 18 <code>external_id</code> string 19 <code>position_commission</code> double 20 <code>account_login</code> int64"},{"location":"API_Reference/Messages/#ordersendrequest-ordersendreply-ordersenddata","title":"\ud83d\udce8 OrderSendRequest / OrderSendReply / OrderSendData","text":"<p>OrderSendRequest</p> # Field Type Optional 1 <code>symbol</code> string 2 <code>operation</code> <code>TMT5_ENUM_ORDER_TYPE</code> 3 <code>volume</code> double 4 <code>price</code> double \u2713 5 <code>slippage</code> uint64 \u2713 6 <code>stop_loss</code> double \u2713 7 <code>take_profit</code> double \u2713 8 <code>comment</code> string \u2713 9 <code>expert_id</code> uint64 \u2713 10 <code>stop_limit_price</code> double \u2713 11 <code>expiration_time_type</code> <code>TMT5_ENUM_ORDER_TYPE_TIME</code> \u2713 12 <code>expiration_time</code> Timestamp \u2713 <p>OrderSendReply</p> # Field Type 1 <code>data</code> <code>OrderSendData</code> 2 <code>error</code> <code>Error</code> <p>OrderSendData</p> # Field Type 1 <code>returned_code</code> uint32 2 <code>deal</code> uint64 3 <code>order</code> uint64 4 <code>volume</code> double 5 <code>price</code> double 6 <code>bid</code> double 7 <code>ask</code> double 8 <code>comment</code> string 9 <code>request_id</code> uint32 10 <code>ret_code_external</code> int32 11 <code>returned_string_code</code> string 12 <code>returned_code_description</code> string"},{"location":"API_Reference/Messages/#ordermodifyrequest-ordermodifyreply-ordermodifydata","title":"\u270f\ufe0f OrderModifyRequest / OrderModifyReply / OrderModifyData","text":"<p>OrderModifyRequest</p> # Field Type Optional 1 <code>ticket</code> uint64 2 <code>stop_loss</code> double \u2713 3 <code>take_profit</code> double \u2713 4 <code>price</code> double \u2713 5 <code>expiration_time_type</code> <code>TMT5_ENUM_ORDER_TYPE_TIME</code> \u2713 6 <code>expiration_time</code> Timestamp \u2713 8 <code>stop_limit</code> double \u2713 <p>OrderModifyReply</p> # Field Type 1 <code>data</code> <code>OrderModifyData</code> 2 <code>error</code> <code>Error</code> <p>OrderModifyData \u2014 same shape as <code>OrderSendData</code> (fields <code>1..12</code>).</p>"},{"location":"API_Reference/Messages/#ordercloserequest-orderclosereply-orderclosedata","title":"\u274c OrderCloseRequest / OrderCloseReply / OrderCloseData","text":"<p>OrderCloseRequest</p> # Field Type 1 <code>ticket</code> uint64 2 <code>volume</code> double 5 <code>slippage</code> int32 <p>OrderCloseReply</p> # Field Type 1 <code>data</code> <code>OrderCloseData</code> 2 <code>error</code> <code>Error</code> <p>OrderCloseData</p> # Field Type 1 <code>returned_code</code> uint32 2 <code>returned_string_code</code> string 3 <code>returned_code_description</code> string 4 <code>close_mode</code> <code>MRPC_ORDER_CLOSE_MODE</code>"},{"location":"API_Reference/Messages/#quotes-market-info","title":"\ud83d\udcb9 Quotes &amp; Market Info","text":""},{"location":"API_Reference/Messages/#mrpcmqltick-tick","title":"\ud83d\udcb1 MrpcMqlTick (tick)","text":"# Field Type 1 <code>time</code> int64 2 <code>bid</code> double 3 <code>ask</code> double 4 <code>last</code> double 5 <code>volume</code> uint64 6 <code>time_msc</code> int64 7 <code>flags</code> uint32 8 <code>volume_real</code> double <p>Notes: spread in points = <code>(ask - bid) / Symbol.Point</code>.</p>"},{"location":"API_Reference/Messages/#symbolinfodoublerequestreplydata","title":"\ud83d\udd0e SymbolInfoDouble{Request,Reply,Data}","text":"<p>SymbolInfoDoubleRequest</p> # Field Type 1 <code>symbol</code> string 2 <code>type</code> <code>SymbolInfoDoubleProperty</code> <p>SymbolInfoDoubleReply \u2014 oneof { <code>data</code> (SymbolInfoDoubleData = 1), <code>error</code> (Error = 2) }</p> <p>SymbolInfoDoubleData</p> # Field Type 1 <code>value</code> double"},{"location":"API_Reference/Messages/#symbolselectrequestreplydata","title":"\ud83d\udccc SymbolSelect{Request,Reply,Data}","text":"<p>SymbolSelectRequest</p> # Field Type 1 <code>symbol</code> string 2 <code>select</code> bool <p>SymbolSelectReply \u2014 oneof { <code>data</code> (SymbolSelectData = 1), <code>error</code> (Error = 2) }</p> <p>SymbolSelectData</p> # Field Type 1 <code>success</code> bool"},{"location":"API_Reference/Messages/#symbolissynchronizedrequestreplydata","title":"\ud83d\udd04 SymbolIsSynchronized{Request,Reply,Data}","text":"<p>SymbolIsSynchronizedRequest</p> # Field Type 1 <code>symbol</code> string <p>SymbolIsSynchronizedReply \u2014 oneof { <code>data</code> (SymbolIsSynchronizedData = 1), <code>error</code> (Error = 2) }</p> <p>SymbolIsSynchronizedData</p> # Field Type 1 <code>synchronized</code> bool"},{"location":"API_Reference/Messages/#symbolstotalrequestreplydata","title":"#\ufe0f\u20e3 SymbolsTotal{Request,Reply,Data}","text":"<p>SymbolsTotalRequest</p> # Field Type 1 <code>mode</code> bool <p>SymbolsTotalReply \u2014 oneof { <code>data</code> (SymbolsTotalData = 1), <code>error</code> (Error = 2) }</p> <p>SymbolsTotalData</p> # Field Type 1 <code>total</code> int32"},{"location":"API_Reference/Messages/#connection-health","title":"\ud83d\udd0c Connection &amp; Health","text":""},{"location":"API_Reference/Messages/#connectionconnectex-connect","title":"\ud83d\udd10 Connection.ConnectEx / Connect","text":"<p>ConnectExRequest</p> # Field Type 1 <code>user</code> uint64 2 <code>password</code> string 3 <code>mt_cluster_name</code> string 4 <code>base_chart_symbol</code> string 5 <code>terminal_readiness_waiting_timeout_seconds</code> int32 6 <code>experts_to_add</code> <code>ExpertAdviser</code> (repeated) <p>ConnectExReply \u2014 oneof { <code>data</code> (ConnectData = 1), <code>error</code> (Error = 2) }</p> <p>ConnectRequest</p> # Field Type 1 <code>user</code> uint64 2 <code>password</code> string 3 <code>host</code> string 4 <code>port</code> int32 5 <code>base_chart_symbol</code> string 6 <code>wait_for_terminal_is_alive</code> bool 7 <code>terminal_readiness_waiting_timeout_seconds</code> int32 8 <code>experts_to_add</code> <code>ExpertAdviser</code> (repeated) <p>ConnectReply \u2014 oneof { <code>data</code> (ConnectData = 1), <code>error</code> (Error = 2) }</p> <p>ConnectData</p> # Field Type 1 <code>terminal_instance_guid</code> string 3 <code>terminal_type</code> <code>TerminalType</code> <p>DisconnectRequest \u2014 (empty)</p> <p>DisconnectReply \u2014 oneof { <code>data</code> (DisconnectData = 1), <code>error</code> (Error = 2) }</p> <p>DisconnectData</p> # Field Type 1 <code>unique_identifier</code> string 2 <code>full_life_time_seconds</code> int64 <p>Health.Check</p> <p>HealthCheckRequest \u2014 (empty)</p> <p>HealthCheckReply</p> # Field Type 1 <code>is_connected_to_server</code> bool 2 <code>server_time_seconds</code> int64"},{"location":"API_Reference/Messages/#streaming-payload-helpers-overview","title":"\ud83d\udce1 Streaming payload helpers (overview)","text":"<p>Detailed stream methods &amp; chunk types are in the Streaming (MT5) page.</p> <ul> <li>Quotes: <code>OnSymbolTick{Request,Reply,Data}</code> with <code>MrpcSubscriptionMqlTick</code>.</li> <li>Trades: <code>OnTrade{Request,Reply,Data}</code> with <code>OnTadeEventData</code> (new/disappeared/updated orders, deals, positions).</li> <li>Position PnL snapshots: <code>OnPositionProfit{Request,Reply,Data}</code>.</li> <li>Tickets stream: <code>OnPositionsAndPendingOrdersTickets{Request,Reply}</code>.</li> </ul> <p>\ud83d\udccc Tip: When building requests, use the correct enums for fields (e.g., <code>TMT5_ENUM_ORDER_TYPE</code>, <code>TMT5_ENUM_ORDER_TYPE_TIME</code>). Validate volumes (<code>SymbolVolumeMin/Max/Step</code>) and prices (broker <code>Stops</code>/<code>Freeze</code> levels) to avoid rejections.</p>"},{"location":"API_Reference/Overview/","title":"\ud83d\udcda API Reference \u2014 Overview (MT5)","text":"<p>Short, navigable entry point to the MT5 API reference. Use this page to jump to the right place and understand naming rules &amp; conventions.</p>"},{"location":"API_Reference/Overview/#whats-inside","title":"\ud83d\uddfa\ufe0f What\u2019s inside","text":"<ul> <li>Messages \u2014 payload structures (requests, replies, snapshots) with field notes.</li> <li>Enums \u2014 all enumerations with human meanings.</li> <li>Streaming \u2014 long\u2011lived gRPC streams and their chunk types.</li> </ul> <p>Looking for usage? See Cookbook recipes next to this section (e.g. Orders/PlaceMarketOrder, MarketInfo/GetQuote, Streaming/SubscribeQuotes).</p>"},{"location":"API_Reference/Overview/#naming-readability","title":"\ud83c\udff7\ufe0f Naming &amp; readability","text":"<ul> <li>Original proto names are scoped for MT5 (e.g., enums prefixed with <code>TMT5_</code> / <code>BMT5_</code>, messages in <code>mt5_term_api</code>).</li> <li>In headings we show both: full name and a short alias in parentheses \u2014 e.g. OpenedOrderInfo (OpenedOrder).</li> <li>Inside tables and notes we use short names for easier reading.</li> </ul> <p>Why the MT5 prefixes? They disambiguate MT5 from MT4 artifacts and avoid collisions across modules/languages.</p>"},{"location":"API_Reference/Overview/#common-type-legend","title":"\ud83e\udde9 Common type legend","text":"<ul> <li><code>Timestamp</code> \u23f0 \u2014 UTC time. Log in RFC3339.</li> <li>Optional fields \ud83c\udf9b \u2014 proto3 <code>optional</code> (or wrappers) indicate presence; omit when not set.</li> <li>Money &amp; PnL \ud83d\udcb5 \u2014 in account currency (see <code>AccountSummaryData.account_currency</code>).</li> <li>Prices &amp; volumes \ud83d\udcb9 \u2014 validate with <code>SymbolInfoDoubleProperty</code> (<code>SymbolVolumeMin/Max/Step</code>, <code>Point</code>, <code>Digits</code>).</li> </ul>"},{"location":"API_Reference/Overview/#api-families-where-to-read","title":"\ud83d\udd0c API families \u2192 where to read","text":"Area Start here Connection &amp; Health <code>Connect/ConnectEx/Disconnect</code>, Health.Check \u2192 see Messages \u2192 Connection &amp; Health Orders (sync) <code>OrderSend{Request,Reply,Data}</code>, <code>OrderModify/Close</code>, and opened/pending order payloads \u2192 Messages \u2192 Account &amp; Orders Positions <code>PositionInfo</code>, tickets stream, profits snapshots \u2192 Streaming Market info &amp; quotes <code>MrpcMqlTick</code>, <code>OnSymbolTick</code>, <code>SymbolInfoDouble{Request,Data}</code> \u2192 Messages \u2192 Quotes &amp; Market Info Streaming Quotes, trade updates, tickets, position PnL, charts/history \u2192 Streaming"},{"location":"API_Reference/Overview/#stability-notes","title":"\ud83d\udea6 Stability notes","text":"<ul> <li>Optional fields may be omitted by the server when not applicable.</li> <li>Enums can gain new values \u2014 handle unknown values defensively on the client side.</li> <li>Streaming replies typically use <code>oneof { data = 1, error = 2 }</code>; surface <code>error</code> and transport exceptions to your retry logic.</li> </ul>"},{"location":"API_Reference/Streaming/","title":"\ud83d\udce1 API Reference \u2014 Streaming (MT5)","text":"<p>This page documents server\u2011streaming APIs in the MT5 gRPC interface (<code>mt5_term_api</code>). Streams are long\u2011lived calls that push updates until the client cancels or the server closes the stream.</p> <p>Most streaming replies follow the pattern <code>oneof { data = 1, error = 2 }</code>. Handle <code>error</code> and transport <code>RpcException</code> in client code.</p>"},{"location":"API_Reference/Streaming/#quotes-streaming","title":"\ud83d\udd14 Quotes Streaming","text":""},{"location":"API_Reference/Streaming/#mrpcsubscriptionmqltick-tick-with-symbol","title":"MrpcSubscriptionMqlTick (Tick with Symbol)","text":"Field Type <code>symbol</code> string <code>tick</code> <code>MrpcMqlTick</code> <p>MrpcMqlTick fields: <code>time:int64</code>, <code>bid:double</code>, <code>ask:double</code>, <code>last:double</code>, <code>volume:uint64</code>, <code>time_msc:int64</code>, <code>flags:uint32</code>, <code>volume_real:double</code>.</p> <p>Notes: spread (points) = <code>(ask \u2212 bid) / Symbol.Point</code>.</p>"},{"location":"API_Reference/Streaming/#onsymboltickrequest","title":"OnSymbolTickRequest","text":"<ul> <li>Fields: <code>symbols[]: string</code> \u2014 list of symbols to subscribe.</li> </ul>"},{"location":"API_Reference/Streaming/#onsymboltickreply","title":"OnSymbolTickReply","text":"<ul> <li><code>data: MrpcSubscriptionMqlTick</code> or <code>error: Error</code>.</li> <li>Stream stays open until canceled/closed.</li> </ul>"},{"location":"API_Reference/Streaming/#trade-updates","title":"\ud83d\udd04 Trade Updates","text":""},{"location":"API_Reference/Streaming/#ontraderequest","title":"OnTradeRequest","text":"<ul> <li>Fields: <code>symbols[]: string</code> (optional) \u2014 limit updates to specific symbols.</li> </ul>"},{"location":"API_Reference/Streaming/#ontradeeventdata","title":"OnTradeEventData","text":"Field Type <code>new_orders[]</code> <code>OpenedOrderInfo</code> <code>updated_orders[]</code> <code>OpenedOrderInfo</code> <code>disappeared_order_tickets[]</code> <code>uint64</code> <code>new_positions[]</code> <code>PositionInfo</code> <code>updated_positions[]</code> <code>PositionInfo</code> <code>closed_position_tickets[]</code> <code>uint64</code> <code>deals[]</code> (if provided) <code>DealInfo</code>"},{"location":"API_Reference/Streaming/#ontradereply","title":"OnTradeReply","text":"<ul> <li><code>data: OnTradeEventData</code> or <code>error: Error</code>.</li> </ul> <p>Notes: Use this stream to drive UI state for orders/positions in real time.</p>"},{"location":"API_Reference/Streaming/#positions-pending-tickets","title":"\ud83c\udf9f\ufe0f Positions &amp; Pending Tickets","text":""},{"location":"API_Reference/Streaming/#onpositionsandpendingordersticketsrequest","title":"OnPositionsAndPendingOrdersTicketsRequest","text":"<ul> <li>Fields: <code>symbols[]: string</code> (optional) \u2014 limit to symbols, otherwise all.</li> </ul>"},{"location":"API_Reference/Streaming/#onpositionsandpendingordersticketsreply","title":"OnPositionsAndPendingOrdersTicketsReply","text":"Field Type <code>tickets[]</code> <code>uint64</code> <p>Notes: useful for quick diffing of currently active tickets without full payloads.</p>"},{"location":"API_Reference/Streaming/#position-profit-stream","title":"\ud83d\udcb0 Position Profit Stream","text":""},{"location":"API_Reference/Streaming/#onpositionprofitrequest","title":"OnPositionProfitRequest","text":"<ul> <li>Fields: (none or symbol filters, depending on server settings)</li> </ul>"},{"location":"API_Reference/Streaming/#positionprofititem","title":"PositionProfitItem","text":"Field Type <code>ticket</code> uint64 <code>profit</code> double <code>swap</code> double <code>commission</code> double"},{"location":"API_Reference/Streaming/#onpositionprofitdata","title":"OnPositionProfitData","text":"Field Type <code>items[]</code> <code>PositionProfitItem</code> <code>time</code> <code>Timestamp</code>"},{"location":"API_Reference/Streaming/#onpositionprofitreply","title":"OnPositionProfitReply","text":"<ul> <li><code>data: OnPositionProfitData</code> or <code>error: Error</code>.</li> </ul> <p>Notes: emits snapshots; use to update PnL widgets efficiently.</p>"},{"location":"API_Reference/Streaming/#charthistory-streams-overview","title":"\ud83d\udcc8 Chart/History Streams (overview)","text":"<p>Concrete chart/history messages may vary by build; common pattern is a request with symbol/period and a reply streaming bars or points.</p> <ul> <li>Chart stream \u2014 request: <code>{ symbol, period }</code>; reply: <code>{ bar: ChartBar }</code>.</li> <li>Chart history stream \u2014 request: <code>{ symbol, period, chunks: TimeRanges[] }</code>; reply: <code>{ bar: ChartBar }</code>.</li> </ul>"},{"location":"Account/Info/","title":"Getting an Account Summary (<code>info</code>) \ud83d\udcdf","text":""},{"location":"Account/Info/#what-it-does","title":"What it Does","text":"<p>Fetches real-time account snapshot from MT5 and prints it either in text (console) or JSON (machine-readable). Used for checking account state, verifying connectivity, and quick diagnostics.</p>"},{"location":"Account/Info/#method-signature","title":"Method Signature","text":""},{"location":"Account/Info/#public-taskaccountsummarydata-accountsummaryasync-datetime-deadline-null-cancellationtoken-cancellationtoken-default","title":"<pre><code>public Task&lt;AccountSummaryData&gt; AccountSummaryAsync(\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default\n)\n</code></pre>","text":""},{"location":"Account/Info/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// --- Quick use (service wrapper) ---\n// Prints account summary info in a single call.\nvar summary = await _mt5Account.AccountSummaryAsync();\n\n_logger.LogInformation(\"=== Account Info ===\");\n_logger.LogInformation(\"Login: {0}\", summary.AccountLogin);\n_logger.LogInformation(\"Balance: {0}\", summary.AccountBalance);\n_logger.LogInformation(\"Equity: {0}\", summary.AccountEquity);\n// ... prints leverage, trade mode, margin, free margin, etc.\n\n// --- Low-level (direct call with retry and cancellation) ---\n// Preconditions: connection is already established.\n\nusing var opCts = new CancellationTokenSource(TimeSpan.FromSeconds(3));\n    ct =&gt; _mt5Account.AccountSummaryAsync(deadline: null, cancellationToken: ct),\n    opCts.Token\n);\n\nConsole.WriteLine($\"Login: {summary.AccountLogin}, Balance: {summary.AccountBalance}\");\n</code></pre>"},{"location":"Account/Info/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code> string yes Which profile to use (from <code>profiles.json</code> \u2014 holds login, server, password). <code>--output</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: 30000)."},{"location":"Account/Info/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"<p>Printed from <code>AccountSummaryData</code> + extra info via <code>AccountInformation</code>:</p> Field Type Description <code>Login</code> int64 Account ID (login). <code>UserName</code> string Account holder\u2019s name. <code>Currency</code> string Deposit currency (e.g. USD, EUR). <code>Balance</code> double Current balance excluding open P/L. <code>Equity</code> double Balance including floating P/L. <code>Leverage</code> int Account leverage (e.g. 500). <code>TradeMode</code> enum Account trade mode (e.g. Demo/Real). <code>Company</code> string Broker name. <code>Margin</code> double Currently used margin. <code>FreeMargin</code> double Margin still available for trading. <code>ServerTime</code> DateTime Server time in UTC. <code>UTC Shift</code> int Timezone offset in minutes."},{"location":"Account/Info/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Account/Info/#full-cli","title":"Full CLI","text":"<pre><code>dotnet run -- info -p demo --output json --timeout-ms 90000\n</code></pre>"},{"location":"Account/Info/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell Shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nuse-to 90000\ninfo\n</code></pre> <ul> <li><code>use-pf demo</code> \u2192 choose profile <code>demo</code> once.</li> <li><code>use-to 90000</code> \u2192 set default timeout (ms).</li> <li><code>info</code> \u2192 expands to <code>mt5 info -p demo --timeout-ms 90000</code>.</li> </ul>"},{"location":"Account/Info/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>Before sending orders \u2014 check equity, free margin, leverage.</li> <li>Monitoring \u2014 feed JSON into dashboards, CI/CD or alerts.</li> <li>Diagnostics \u2014 confirm MT5 terminal is connected and profile credentials work.</li> <li>Risk control \u2014 margin usage visible before high-risk trades.</li> </ul>"},{"location":"Account/Overview/","title":"Account \u2014 Overview \ud83e\udded","text":"<p>This section groups all commands related to account identity, connectivity, and basic status.</p>"},{"location":"Account/Overview/#files-in-this-section","title":"Files in this section","text":"<ul> <li>Info \u2014 one\u2011shot account snapshot (balance, equity, margin info via summary + extras).</li> <li>Profiles \u2014 how profiles work (<code>profiles.json</code>), switching, defaults, and tips.</li> <li>Show \u2014 detailed account info dump (raw fields, troubleshooting, and JSON mode).</li> </ul>"},{"location":"Account/Overview/#when-to-use-which","title":"When to use which?","text":"Task Use Quick health check before trading Info Manage / switch connection targets (demo/live) Profiles Deep inspection (IDs, server clock, leverage, etc.) Show"},{"location":"Account/Overview/#quickstarts","title":"Quickstarts \u26a1","text":"<pre><code># Account snapshot (text)\ndotnet run -- info -p demo\n\n# Detailed view (JSON)\ndotnet run -- show -p demo -o json\n\n# Switch default profile (PowerShell shortcast)\n. .\\ps\\shortcasts.ps1\nuse-pf demo\ninfo   # expands to: mt5 info -p demo --timeout-ms 90000\n</code></pre>"},{"location":"Account/Overview/#notes","title":"Notes \ud83d\udcdd","text":"<ul> <li>All commands honor <code>--timeout-ms</code> and use a single connect \u2192 call \u2192 disconnect flow.</li> <li>JSON outputs are intended for scripting/CI; text is friendly for terminals.</li> <li>If a command reports not connected, verify your profile credentials and network access first.</li> </ul>"},{"location":"Account/Profiles/","title":"Profiles (<code>profiles.json</code>)","text":""},{"location":"Account/Profiles/#what-it-does","title":"What it Does","text":"<p>Profiles act as connection presets for MT5 accounts. Each entry in <code>profiles.json</code> stores credentials and server details, so you don\u2019t have to type them every time.</p>"},{"location":"Account/Profiles/#structure","title":"Structure \ud83d\udcc2","text":"<p>Typical <code>profiles.json</code>:</p> <pre><code>{\n  \"default\": {\n    \"ServerName\": \"MetaQuotes-Demo\",\n    \"Host\": \"mt5.mrpc.pro\",\n    \"Port\": 443,\n    \"Login\": 21455,\n    \"Password\": \"demo-pass\"\n  },\n  \"live\": {\n    \"ServerName\": \"MyBroker-Live\",\n    \"Host\": \"live.broker.com\",\n    \"Port\": 443,\n    \"Login\": 123456,\n    \"Password\": \"super-secret\"\n  }\n}\n</code></pre> <ul> <li><code>default</code> \u2014 fallback profile (used if you don\u2019t specify <code>--profile</code>).</li> <li><code>live</code> \u2014 second profile for a real account.</li> </ul>"},{"location":"Account/Profiles/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"<p>When you run commands (<code>info</code>, <code>quote</code>, <code>buy</code>, <code>sell</code>, etc.):</p> Parameter Description Example <code>--profile</code> Name of the profile from <code>profiles.json</code>. <code>--profile default</code> <code>use-pf</code> PowerShell shortcut for switching profiles. <code>use-pf live</code>"},{"location":"Account/Profiles/#why-profiles","title":"Why Profiles \u2753","text":"<ul> <li>Convenience: No need to retype login/password/server each time.</li> <li>Safety: Store creds in one file (never hardcode them in scripts).</li> <li>Flexibility: Switch instantly between demo/live environments.</li> <li>Automation: CI/CD pipelines can swap profiles without touching code.</li> </ul>"},{"location":"Account/Profiles/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Account/Profiles/#cli","title":"CLI","text":"<pre><code>dotnet run -- info --profile default\ndotnet run -- quote --profile live --symbol EURUSD\n</code></pre>"},{"location":"Account/Profiles/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf default   # selects default profile\ninfo             # runs with that profile\nuse-pf live      # instantly switch\ninfo             # now runs on live account\n</code></pre>"},{"location":"Account/Profiles/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Validate and select profile\nValidators.EnsureProfile(profile);\n_selectedProfile = profile;\n\n// later used in ConnectAsync()\nawait ConnectAsync();\n</code></pre> <p>\ud83d\udccc In short: \u2014 <code>profiles.json</code> = your connection catalog. \u2014 <code>--profile</code> or <code>use-pf</code> = the switch. \u2014 In code always via <code>Validators.EnsureProfile</code> \u2192 <code>_selectedProfile</code>.</p>"},{"location":"Account/Show/","title":"Show (<code>sym show</code>) \ud83d\udd0d","text":""},{"location":"Account/Show/#what-it-does","title":"What it Does","text":"<p>Shows a short card for a symbol: last quote (Bid/Ask/Time) and volume limits (min/step/max). Best-effort makes the symbol visible in the terminal before requests.</p>"},{"location":"Account/Show/#method-signatures","title":"Method Signatures","text":"<pre><code>// Ensures that a symbol is visible in terminal UI (best-effort).\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    CancellationToken cancellationToken = default);\n\n// Returns last tick (Bid/Ask/Time) for a symbol.\npublic Task&lt;TickData&gt; SymbolInfoTickAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Returns (min, step, max) volume constraints for a symbol.\npublic Task&lt;(double min, double step, double max)&gt; GetVolumeConstraintsAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Account/Show/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// --- Quick use ---\n// Get quote + volume limits for a symbol.\nvar sym = symbol ?? GetOptions().DefaultSymbol;\n\n// Ensure symbol is visible (best-effort)\nawait _mt5Account.EnsureSymbolVisibleAsync(sym);\n\n// Quote\nvar tick = await _mt5Account.SymbolInfoTickAsync(sym);\n\n// Volume limits\nvar (min, step, max) = await _mt5Account.GetVolumeConstraintsAsync(sym);\n\n// Print\nConsole.WriteLine($\"{sym}: Bid={tick.Bid} Ask={tick.Ask} Time={tick.Time}\");\nConsole.WriteLine($\"Volume: min={min} step={step} max={max}\");\n\n// --- JSON output example ---\n// Console.WriteLine(ToJson(new {\n//     symbol = sym,\n//     quote = tick,\n//     volume = new { min, step, max }\n// }));\n</code></pre>"},{"location":"Account/Show/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--symbol, -s</code> string no Symbol name (defaults to profile\u2019s <code>DefaultSymbol</code>). <code>--output</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: <code>30000</code>)."},{"location":"Account/Show/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"Field Type Description <code>Quote.Bid</code> double Best bid price <code>Quote.Ask</code> double Best ask price <code>Quote.Time</code> string Server time of the quote <code>Volume.min</code> double Minimal allowed volume <code>Volume.step</code> double Volume step <code>Volume.max</code> double Maximum allowed volume"},{"location":"Account/Show/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Account/Show/#cli","title":"CLI","text":"<pre><code>dotnet run -- sym show -p demo\ndotnet run -- sym show -p demo -s EURUSD\ndotnet run -- sym show -p demo -s XAUUSD --output json\n</code></pre>"},{"location":"Account/Show/#powershell-shortcuts","title":"PowerShell Shortcuts","text":""},{"location":"Account/Show/#psshortcastsps1-use-pf-demo-sym-show-uses-defaultsymbol-from-the-profile-sym-show-s-eurusd-explicit-symbol","title":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nsym show            # uses DefaultSymbol from the profile\nsym show -s EURUSD  # explicit symbol\n</code></pre>","text":""},{"location":"Account/Show/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>Quick diagnostics \u2014 quickly check the quotation and volume limits.</li> <li>Before placing orders \u2014 verify the available volumes and that the symbol is visible.</li> <li>Environment check \u2014 to make sure that the server returns the correct data on the tool.</li> </ul>"},{"location":"Diagnostics/Health/","title":"Health (<code>health</code>) \ud83e\ude7a","text":""},{"location":"Diagnostics/Health/#what-it-does","title":"What it Does","text":"<p>Performs a quick health check of the MT5 connection: validates profile, checks TCP reachability to the server, opens a session, and queries basic RPCs.</p>"},{"location":"Diagnostics/Health/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;AccountSummaryData&gt; AccountSummaryAsync(\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Diagnostics/Health/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Quick connectivity probe via AccountSummary\ntry\n{\n    // Profile must be selected and connection established by your app\u2019s flow\n    var summary = await _mt5Account.AccountSummaryAsync();\n    Console.WriteLine($\"Health: ok. Balance={summary.AccountBalance}\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Health: fail: {ex.Message}\");\n}\n</code></pre>"},{"location":"Diagnostics/Health/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--output</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: <code>30000</code>). <p>Aliases: <code>ping</code>.</p>"},{"location":"Diagnostics/Health/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"<p>Actual report keys:</p> Field Type Description <code>profile</code> string Selected profile name. <code>accountId</code> int64 Account login from the profile. <code>serverName</code> string MT5 server name from the profile. <code>host</code> string Host used for TCP check and gRPC endpoint. <code>port</code> int Port used for TCP check. <code>tcp</code> string TCP reachability status: <code>ok</code> or <code>fail: &lt;message&gt;</code>. <code>terminal</code> string Terminal/gRPC status: <code>ok</code> or <code>fail: &lt;message&gt;</code>. <code>balance</code> double Account balance (present if terminal check succeeded)."},{"location":"Diagnostics/Health/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Diagnostics/Health/#cli","title":"CLI","text":"<pre><code>dotnet run -- health -p demo\ndotnet run -- health -p demo --output json --timeout-ms 10000\n</code></pre>"},{"location":"Diagnostics/Health/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nhealth  # alias: ping\n</code></pre>"},{"location":"Diagnostics/Health/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>Connection test \u2014 before running other commands (info, buy/sell).</li> <li>Monitoring \u2014 periodic checks for automation/dashboards.</li> <li>Diagnostics \u2014 distinguish between network problems and terminal failures.</li> </ul>"},{"location":"History/History/","title":"History (<code>history</code>) \ud83d\udd70\ufe0f","text":""},{"location":"History/History/#what-it-does","title":"What it Does","text":"<p>Fetches account trading history for the last N days and prints it in text or JSON. Under the hood calls <code>_mt5Account.OrderHistoryAsync(from, to)</code> with <code>from = UtcNow - days</code>, <code>to = UtcNow</code>.</p> <p>Default RPC args used by the wrapper:</p> <ul> <li><code>sortMode = BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.Bmt5SortByCloseTimeAsc</code></li> <li><code>pageNumber = 0</code>, <code>itemsPerPage = 0</code> (no paging)</li> </ul>"},{"location":"History/History/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;OrdersHistoryData&gt; OrderHistoryAsync(\n    DateTime from,\n    DateTime to,\n    BMT5_ENUM_ORDER_HISTORY_SORT_TYPE sortMode = BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.Bmt5SortByCloseTimeAsc,\n    int pageNumber = 0,\n    int itemsPerPage = 0,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"History/History/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile to use (from <code>profiles.json</code>). <code>--output</code> string no <code>text</code> (default) or <code>json</code>. <code>--days, -d</code> int yes Number of days to look back. Must be &gt; 0. <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: <code>30000</code>)."},{"location":"History/History/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"<p>Each history item is either an Order (has <code>HistoryOrder</code>) or a Deal (has <code>HistoryDeal</code>).</p>"},{"location":"History/History/#text-mode-preview","title":"Text mode (preview)","text":"<ul> <li>Prints the first 10 items and a total count.</li> <li><code>ORDER</code> line: <code>Ticket</code>, <code>Symbol</code>, <code>State</code>, <code>VolumeInitial</code>, <code>VolumeCurrent</code>, <code>PriceOpen</code>, <code>SetupTime</code>, <code>DoneTime</code>.</li> <li><code>DEAL</code>  line: <code>Ticket</code>, <code>Symbol</code>, <code>Type</code>, <code>Volume</code>, <code>Price</code>, <code>Profit</code>, <code>Time</code>.</li> </ul>"},{"location":"History/History/#json-mode-full","title":"JSON mode (full)","text":"<ul> <li>Raw server payload (<code>OrdersHistoryData</code>) with a collection of items, each containing <code>HistoryOrder</code> or <code>HistoryDeal</code> objects from <code>mt5_term_api</code>.</li> <li>In addition to the above, the actual protocol models may contain additional fields (for example, comments, reasons, SL/TP, etc.) \u2014 they will be returned to JSON \"as is\" according to <code>mt5_term_api</code>.</li> </ul>"},{"location":"History/History/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"History/History/#cli","title":"CLI","text":"<pre><code># Last 7 days (text)\ndotnet run -- history -p demo --days 7\n\n# Last 30 days (JSON)\ndotnet run -- history -p demo --days 30 --output json --timeout-ms 60000\n</code></pre>"},{"location":"History/History/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\\\ps\\\\shortcasts.ps1\nuse-pf demo\nh --days 14          # alias for `history`\n</code></pre>"},{"location":"History/History/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Compute time window\nvar from = DateTime.UtcNow.AddDays(-Math.Abs(days));\nvar to   = DateTime.UtcNow;\n\n// Fetch history snapshot\nvar res = await _mt5Account.OrderHistoryAsync(from, to);\n\nif (IsJson(output))\n{\n    Console.WriteLine(ToJson(res)); // full server payload\n}\nelse\n{\n    var items = res.HistoryData;\n    Console.WriteLine($\"History items: {items.Count}\");\n    foreach (var h in items.Take(10))\n    {\n        if (h.HistoryOrder is not null)\n        {\n            var o = h.HistoryOrder;\n            var setup = o.SetupTime?.ToDateTime();\n            var done  = o.DoneTime?.ToDateTime();\n            Console.WriteLine($\"ORDER  #{o.Ticket}  {o.Symbol}  state={o.State}  \" +\n                              $\"vol={o.VolumeInitial}-&gt;{o.VolumeCurrent}  open={o.PriceOpen}  \" +\n                              $\"setup={setup:O} done={done:O}\");\n        }\n        else if (h.HistoryDeal is not null)\n        {\n            var d = h.HistoryDeal;\n            var t = d.Time?.ToDateTime();\n            Console.WriteLine($\"DEAL   #{d.Ticket}  {d.Symbol}  type={d.Type}  \" +\n                              $\"vol={d.Volume}  price={d.Price}  pnl={d.Profit}  time={t:O}\");\n        }\n    }\n}\n</code></pre>"},{"location":"History/History_Overview/","title":"History \u2014 Overview \ud83d\udcdc","text":"<p>The History section provides access to closed deals and account history over a given period. It is primarily used for reporting, analytics, and exporting trade data for further processing (spreadsheets, dashboards, or audits).</p>"},{"location":"History/History_Overview/#commands-included","title":"Commands Included","text":"Command Alias Description <code>History.md</code> <code>hist</code> Show account history for the last N days (text or JSON). <code>History_export.md</code> <code>hexport</code> Export account history into a file (CSV, JSON, etc.)."},{"location":"History/History_Overview/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>History \u2192 quick look at recent trades (CLI or script output).</li> <li>History Export \u2192 structured data for Excel/BI tools.</li> </ul>"},{"location":"History/History_Overview/#typical-workflows","title":"Typical Workflows \ud83d\udd04","text":"<ol> <li>Diagnostics: Check trades over the last 7 days:</li> </ol> <pre><code>hist -d 7 -o text\n</code></pre> <ol> <li>Export to CSV for analysis:</li> </ol> <pre><code>hexport -d 30 --to csv --file my_trades.csv\n</code></pre> <ol> <li>Automation: Schedule daily exports in JSON for dashboards:</li> </ol> <pre><code>hexport -d 1 --to json --file daily.json\n</code></pre>"},{"location":"History/History_Overview/#notes","title":"Notes \ud83d\udcdd","text":"<ul> <li>All commands require a profile (<code>-p demo</code> or <code>-p live</code>) to select the account.</li> <li>Default symbol filter is all symbols, unless explicitly set.</li> <li>Timeouts (<code>--timeout-ms</code>) protect against long server responses.</li> </ul>"},{"location":"History/History_export/","title":"History Export (<code>history.export</code>) \ud83d\udce4","text":"<p>Exports trading history for the last N days to a file in either CSV or JSON format. Under the hood calls <code>_mt5Account.ExportHistoryAsync(days, symbol, format, ct)</code> and writes the returned payload to disk.</p> <p>Alias: <code>hexport</code></p>"},{"location":"History/History_export/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;string&gt; ExportHistoryAsync(\n    int days,\n    string? symbol,\n    string format,\n    CancellationToken ct);\n</code></pre>"},{"location":"History/History_export/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile to use (from <code>profiles.json</code>). <code>--days, -d</code> int yes How many days back to fetch. Must be &gt; 0. <code>--symbol, -s</code> string no Filter by symbol (e.g. <code>EURUSD</code>). If omitted, exports all symbols. <code>--to</code> string no Output format: <code>csv</code> (default) or <code>json</code>. <code>--file, -f</code> string yes Output path to write to (e.g. <code>C:\\\\temp\\\\hist.csv</code>). <code>--timeout-ms</code> int no Per\u2011RPC timeout in milliseconds (default: <code>30000</code>). <p>The command validates <code>--to</code> and accepts only <code>csv</code> or <code>json</code>.</p>"},{"location":"History/History_export/#output","title":"Output \u2b06\ufe0f","text":"<ul> <li>Writes the exported content to the path given by <code>--file</code>.</li> <li>Prints a one\u2011line success message: <code>\u2714 history.export written to: &lt;file&gt;</code></li> <li> <p>Exit codes:</p> </li> <li> <p><code>0</code> \u2014 success;</p> </li> <li><code>2</code> \u2014 unsupported format/operation (e.g., server replied <code>NotSupportedException</code>);</li> <li><code>1</code> \u2014 other errors (printed via <code>ErrorPrinter</code>).</li> </ul>"},{"location":"History/History_export/#how-to-use","title":"How to Use","text":"<pre><code># Last 7 days, all symbols, CSV to file\ndotnet run -- history.export -p demo -d 7 --to csv -f C:\\\\temp\\\\hist.csv --timeout-ms 60000\n\n# Last 30 days, only EURUSD, JSON\ndotnet run -- history.export -p demo -d 30 -s EURUSD --to json -f C:\\\\temp\\\\eurusd-history.json\n</code></pre> <p>Shortcast (optional):</p> <pre><code>hexport -d 7 -s EURUSD -to json -f C:\\\\temp\\\\eurusd.json\n# \u2192 mt5 history.export -p demo -d 7 -s EURUSD --to json -f C:\\\\temp\\\\eurusd.json --timeout-ms 90000\n</code></pre>"},{"location":"History/History_export/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li><code>--days</code> must be strictly &gt; 0; the tool rejects <code>0</code> or negatives.</li> <li>Ensure the target folder for <code>--file</code> exists and is writable.</li> <li>CSV/JSON schema is defined by your server\u2019s implementation (the tool writes raw payload as\u2011is).</li> <li>If you pass <code>--symbol</code>, only trades/orders for that instrument are exported.</li> <li>Network hiccups/timeouts are reported via <code>ErrorPrinter</code> and set a non\u2011zero exit code.</li> </ul>"},{"location":"History/History_export/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Parameters already validated &amp; connection established by caller flow\nvar data = await _mt5Account.ExportHistoryAsync(days, symbol, to, CancellationToken.None);\nSystem.IO.File.WriteAllText(file, data);\nConsole.WriteLine($\"\\u2714 history.export written to: {file}\");\n</code></pre>"},{"location":"History/History_export/#see-also","title":"See also","text":"<ul> <li>History.md \u2014 interactive history preview</li> <li>History_Overview.md \u2014 concepts &amp; fields</li> <li>Profiles \u2014 selecting connection settings</li> <li>Timeouts &amp; Retries \u2014 guidance on <code>--timeout-ms</code></li> </ul>"},{"location":"Market_Data/Close-all/","title":"Close All (<code>close-all</code>) \ud83e\uddf9","text":""},{"location":"Market_Data/Close-all/#what-it-does","title":"What it Does","text":"<p>Closes all open positions on the current MT5 account in one go. Optional filter by symbol. Safety confirmation required unless <code>--dry-run</code>.</p>"},{"location":"Market_Data/Close-all/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;Dictionary&lt;ulong, double&gt;&gt; ListPositionVolumesAsync(\n    string? symbol,\n    CancellationToken ct);\n\npublic Task ClosePositionFullAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken ct);\n</code></pre>"},{"location":"Market_Data/Close-all/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--filter-symbol, -s</code> string no Close only positions for this symbol (e.g., <code>EURUSD</code>). <code>--deviation</code> int no Max slippage in points (default: <code>10</code>). <code>--yes, -y</code> flag no Execute without interactive confirmation (otherwise preview &amp; exit=2). <code>--dry-run</code> flag no Print planned actions without sending requests. <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: <code>30000</code>)."},{"location":"Market_Data/Close-all/#output","title":"Output \u2b06\ufe0f","text":"<p>Text only.</p> <ul> <li>If there are no positions: <code>No positions to close.</code></li> <li> <p>Without <code>--yes</code> or with <code>--dry-run</code>: prints the plan (up to 10 lines like <code>#&lt;ticket&gt; vol=&lt;lots&gt;</code>) and</p> </li> <li> <p>either <code>Pass --yes to execute.</code> (exit code = <code>2</code>),</p> </li> <li>or simply terminates (in <code>--dry-run</code> mode).</li> <li>When executed: the final line is <code>\u2714 Closed: &lt;ok&gt;, \u2716 Failed: &lt;fail&gt;</code>.</li> </ul> <p>Exit codes:</p> <ul> <li><code>0</code> \u2014 everything is closed successfully;</li> <li><code>1</code> \u2014 part of the closures failed (warning log);</li> <li><code>2</code> \u2014 the preview plan is shown without confirmation of `--yes'.</li> </ul>"},{"location":"Market_Data/Close-all/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Close everything\ndotnet run -- close-all -p demo --yes\n\n# Preview only (no requests)\ndotnet run -- close-all -p demo --dry-run\n\n# Only for EURUSD (with 15 points deviation)\ndotnet run -- close-all -p demo -s EURUSD --deviation 15 --yes\n</code></pre>"},{"location":"Market_Data/Close-all/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Preconditions: connection already established; profile selected\nvar map = await _mt5Account.ListPositionVolumesAsync(symbol: symbol, ct: CancellationToken.None);\n\nif (map.Count == 0)\n{\n    Console.WriteLine(\"No positions to close.\");\n}\nelse if (!yes || dryRun)\n{\n    Console.WriteLine($\"Will close {map.Count}{(string.IsNullOrEmpty(symbol) ? \"\" : $\" for {symbol}\")} Deviation={deviation}\");\n    foreach (var (ticket, vol) in map.Take(10))\n        Console.WriteLine($\"  #{ticket} vol={vol}\");\n    if (map.Count &gt; 10) Console.WriteLine($\"  ... and {map.Count - 10} more\");\n    // In dry-run: stop here; otherwise require --yes\n}\nelse\n{\n    int ok = 0, fail = 0;\n    foreach (var (ticket, vol) in map)\n    {\n        try\n        {\n            await _mt5Account.ClosePositionFullAsync(ticket, vol, deviation, CancellationToken.None);\n            ok++;\n        }\n        catch (Exception ex)\n        {\n            // Log warning; continue with next\n            Console.WriteLine($\"WARN: Close #{ticket} vol={vol} failed: {ex.Message}\");\n            fail++;\n        }\n    }\n    Console.WriteLine($\"\\u2714 Closed: {ok}, \\u2716 Failed: {fail}\");\n}\n</code></pre>"},{"location":"Market_Data/Close-symbol/","title":"Close by Symbol (<code>close-symbol</code>) \ud83c\udfaf","text":""},{"location":"Market_Data/Close-symbol/#what-it-does","title":"What it Does","text":"<p>Closes all open positions for one symbol on the current MT5 account. Shows a preview unless confirmed with <code>--yes</code>. <code>--dry-run</code> prints the plan and exits without sending requests.</p>"},{"location":"Market_Data/Close-symbol/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task CloseOrderByTicketAsync(\n    ulong ticket,\n    string symbol,\n    double volume,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Market_Data/Close-symbol/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--symbol, -s</code> string no Target symbol (defaults to profile\u2019s <code>DefaultSymbol</code>). <code>--yes, -y</code> flag no Execute without interactive confirmation. <code>--dry-run</code> flag no Print intended actions and exit (no network calls). <code>--timeout-ms</code> int no Per-RPC timeout in milliseconds (default: <code>30000</code>). <p>Aliases: <code>cs</code>, <code>flatten-symbol</code>.</p>"},{"location":"Market_Data/Close-symbol/#output","title":"Output \u2b06\ufe0f","text":"<p>Text only.</p> <ul> <li>No offers \u2192 \"No positions to close by \". <li>Without \"-yes\" \u2192 Previous (first 10 seconds) + \"Pass\" - yes for execution.` (exit=2).</li> <li><code>--intermediate run\" \u2192 \"[INTERMEDIATE RUN] Will close all positions by &lt;CHARACTER&gt;.</code></li> <li>Execution \u2192 \"Closed normally: X; Error: Y\" (output=0/1).</li>"},{"location":"Market_Data/Close-symbol/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Preview\ndotnet run -- close-symbol -p demo -s EURUSD\n\n# Execute\ndotnet run -- close-symbol -p demo -s EURUSD --yes\n\n# Dry-run\ndotnet run -- close-symbol -p demo -s EURUSD --dry-run\n</code></pre>"},{"location":"Market_Data/Close-symbol/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Preview / dry-run\nConsole.WriteLine($\"[DRY-RUN] Would close all positions for {symbol}.\");\n\n// Fetch open positions\nvar opened = await _mt5Account.OpenedOrdersAsync();\n\n// Close by ticket\nawait _mt5Account.CloseOrderByTicketAsync(ticket, symbol, volume);\n</code></pre>"},{"location":"Market_Data/Close/","title":"Close (<code>close</code>) \ud83d\udd12","text":""},{"location":"Market_Data/Close/#what-it-does","title":"What it Does","text":"<p>Closes an open position or order in MT5 by ticket ID. Supports full or partial volume and <code>--dry-run</code> preview.</p>"},{"location":"Market_Data/Close/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task CloseOrderByTicketAsync(\n    ulong ticket,\n    string symbol,\n    double volume,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Market_Data/Close/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--ticket, -t</code> ulong yes Ticket ID of the order/position to close. <code>--symbol, -s</code> string no Symbol (defaults to profile\u2019s <code>DefaultSymbol</code>). <code>--volume, -v</code> double yes Volume to close (lots). <code>--timeout-ms</code> int no Per-RPC timeout in ms (default: 30000). <code>--dry-run</code> flag no Print what would happen, but don\u2019t send request. <p>Alias: <code>c</code>.</p>"},{"location":"Market_Data/Close/#output","title":"Output \u2b06\ufe0f","text":"<p>Text only.</p> <ul> <li><code>--dry-run</code>: <code>[DRY-RUN] CLOSE #&lt;ticket&gt; &lt;symbol&gt; vol=&lt;volume&gt;</code></li> <li>Successful closing: <code>CLOSE done: ticket=&lt;ticket&gt;</code></li> <li>Errors are printed via the <code>ErrorPrinter</code>, exit code = 1.</li> </ul>"},{"location":"Market_Data/Close/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Close position completely\ndotnet run -- close -p demo -t 123456 -s EURUSD -v 0.10 --yes\n\n# Dry-run preview\ndotnet run -- close -p demo -t 123456 -s EURUSD -v 0.10 --dry-run\n</code></pre>"},{"location":"Market_Data/Close/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// Dry-run\nConsole.WriteLine($\"[DRY-RUN] CLOSE #{ticket} {symbol} vol={volume}\");\n\n// Ensure symbol visible\nawait _mt5Account.EnsureSymbolVisibleAsync(symbol, TimeSpan.FromSeconds(3), ct);\n\n// Close by ticket\nawait _mt5Account.CloseOrderByTicketAsync(ticket, symbol, volume, deadline: null, cancellationToken: ct);\n</code></pre>"},{"location":"Market_Data/Ensure_Symbol_Visible/","title":"Ensure Symbol Visible (helper) \ud83d\udc41\ufe0f","text":""},{"location":"Market_Data/Ensure_Symbol_Visible/#what-it-does","title":"What it Does \ud83c\udfaf","text":"<p>Best\u2011effort makes sure a symbol is visible in MT5 (Market Watch) before quotes/orders. If the symbol is hidden, enables it and waits up to a short timeout.</p> <p>This is not a CLI command. It\u2019s a helper used inside commands like <code>quote</code>, <code>buy</code>, <code>sell</code>.</p>"},{"location":"Market_Data/Ensure_Symbol_Visible/#where-its-used","title":"Where It\u2019s Used \ud83d\udd17","text":"<p>Called right before market operations:</p> <pre><code>try\n{\n    using var visCts = StartOpCts();\n    await _mt5Account.EnsureSymbolVisibleAsync(\n        s, maxWait: TimeSpan.FromSeconds(3), cancellationToken: visCts.Token);\n}\ncatch (Exception ex) when (ex is not OperationCanceledException)\n{\n    _logger.LogWarning(\"EnsureSymbolVisibleAsync failed: {Msg}\", ex.Message);\n}\n</code></pre> <p>Typical callers:</p> <ul> <li><code>quote</code> \u2014 to ensure first snapshot tick arrives;</li> <li><code>buy</code> / <code>sell</code> \u2014 to avoid \u201csymbol not selected/unknown\u201d.</li> </ul>"},{"location":"Market_Data/Ensure_Symbol_Visible/#method-signature","title":"Method Signature \ud83e\udde9","text":"<pre><code>public Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre> <p>Params</p> <ul> <li><code>symbol</code> \u2014 e.g., <code>EURUSD</code>.</li> <li><code>maxWait</code> \u2014 total wait time (default: <code>null</code> \u2192 internal default).</li> <li><code>pollInterval</code> \u2014 how often to re-check visibility (optional).</li> <li><code>deadline</code> \u2014 optional absolute RPC deadline.</li> <li><code>cancellationToken</code> \u2014 cooperative cancel.</li> </ul> <p>If already visible, resolves immediately. On errors: throws; typical handlers log warning and proceed when possible.</p>"},{"location":"Market_Data/Ensure_Symbol_Visible/#why-it-matters","title":"Why It Matters \u2757","text":"<p>In MT5 a symbol must be visible to:</p> <ul> <li>receive quotes (snapshot/stream),</li> <li>place/modify orders without \u201csymbol not selected\u201d.</li> </ul>"},{"location":"Market_Data/Ensure_Symbol_Visible/#good-practices","title":"Good Practices \u2705","text":"<ul> <li>Keep <code>maxWait</code> short (2\u20135s): it\u2019s a pre\u2011flight check.</li> <li>Wrap in <code>try/catch</code> that excludes <code>OperationCanceledException</code>.</li> <li>Call it before <code>SymbolInfoTickAsync</code> / order placement.</li> </ul>"},{"location":"Market_Data/Ensure_Symbol_Visible/#minimal-usage","title":"Minimal Usage \ud83e\uddf7","text":"<pre><code>await _mt5Account.EnsureSymbolVisibleAsync(symbol, maxWait: TimeSpan.FromSeconds(3));\n</code></pre> <p>\ud83d\udccc In short: a small guard that makes quotes/orders more reliable by ensuring the symbol is present in Market Watch first.</p>"},{"location":"Market_Data/Limits/","title":"Limits (<code>sym limits</code>) \ud83d\udccf","text":""},{"location":"Market_Data/Limits/#what-it-does","title":"What it Does","text":"<p>Shows volume trading limits for a symbol and the latest quote:</p> <ul> <li>Minimum lot (<code>min</code>)</li> <li>Lot step (<code>step</code>)</li> <li>Maximum lot (<code>max</code>)</li> <li>Quote: Bid / Ask / Time</li> </ul> <p>Best\u2011effort ensures the symbol is visible before requests.</p>"},{"location":"Market_Data/Limits/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;MrpcMqlTick&gt; SymbolInfoTickAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;(double Min, double Step, double Max)&gt; GetVolumeConstraintsAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Market_Data/Limits/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--symbol, -s</code> string no Target symbol (defaults to profile\u2019s <code>DefaultSymbol</code>). <code>--output, -o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout in milliseconds (default: <code>30000</code>). <p>Aliases: <code>lim</code> (subcommand of <code>symbol</code>/<code>sym</code>).</p>"},{"location":"Market_Data/Limits/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"<p>Text mode</p> <pre><code>&lt;SYMBOL&gt;:\n  Quote: Bid=&lt;bid&gt; Ask=&lt;ask&gt; Time=&lt;iso&gt;\n  Volume: min=&lt;min&gt; step=&lt;step&gt; max=&lt;max&gt;\n</code></pre> <p>JSON mode</p> <pre><code>{\n  \"symbol\": \"EURUSD\",\n  \"quote\": { \"Bid\": 1.23456, \"Ask\": 1.23470, \"Time\": \"2025-09-02T14:22:33Z\" },\n  \"volume\": { \"min\": 0.01, \"step\": 0.01, \"max\": 100 }\n}\n</code></pre>"},{"location":"Market_Data/Limits/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Text\ndotnet run -- sym limits -p demo -s EURUSD\n\n# JSON\ndotnet run -- sym limits -p demo -s EURUSD -o json\n</code></pre>"},{"location":"Market_Data/Limits/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var sym = symbol ?? GetOptions().DefaultSymbol;\n\n// Best\u2011effort visibility\ntry { await _mt5Account.EnsureSymbolVisibleAsync(sym, TimeSpan.FromSeconds(3)); } catch (Exception ex) when (ex is not OperationCanceledException) { }\n\n// Quote + limits\nvar tick = await _mt5Account.SymbolInfoTickAsync(sym);\nvar (min, step, max) = await _mt5Account.GetVolumeConstraintsAsync(sym);\n\nConsole.WriteLine($\"{sym}:\\n  Quote: Bid={tick.Bid} Ask={tick.Ask} Time={tick.Time}\\n  Volume: min={min} step={step} max={max}\");\n</code></pre>"},{"location":"Market_Data/Market_Data_Overview/","title":"Market Data Overview \ud83d\udcca","text":"<p>This section contains commands related to symbols, quotes, and trading utilities. These commands allow you to:</p> <ul> <li>Fetch quotes and reverse trades.</li> <li>Manage open and pending orders.</li> <li>Ensure symbols are available for trading.</li> <li>Inspect trading limits and panic-close positions.</li> </ul> Command Alias(es) Description close <code>c</code> Close a specific position or order by ticket. close-all <code>flatten</code>, <code>close.all</code> Close all positions (optionally filtered by symbol). close-symbol <code>cs</code>, <code>flatten-symbol</code> Close all positions for a given symbol. sym ensure-visible \u2013 Ensure the given symbol is visible in Market Watch. sym limits <code>lim</code> Show min/step/max volume for a symbol. panic \u2013 Emergency: close all positions and cancel all pendings. pending.modify <code>pm</code> Modify parameters of an existing pending order. pending.move <code>pmove</code> Move a pending order by a given number of points. quote <code>q</code> Get a snapshot price (Bid/Ask/Time). reverse <code>rv</code> Reverse position(s) for a given symbol. sym show \u2013 Show a compact symbol card: quote + volume limits."},{"location":"Market_Data/Market_Data_Overview/#typical-use-cases","title":"Typical Use Cases \ud83d\udee0\ufe0f","text":"<ul> <li>Pre-trade checks: ensure symbol visibility (ensure-visible), inspect trading limits (limits).</li> <li>Market monitoring: fetch a quick snapshot price (quote).</li> <li>Order management: close (close), close all (close-all), reverse (reverse), panic (panic).</li> <li>Pending orders: edit (pending.modify) or move (pending.move) pending orders dynamically.</li> </ul>"},{"location":"Market_Data/Panic/","title":"Panic (<code>panic</code>) \ud83d\udea8","text":""},{"location":"Market_Data/Panic/#what-it-does","title":"What it Does","text":"<p>Runs an emergency flatten: closes all open positions and cancels all pending orders (optionally filtered by symbol). Designed for \"oh\u2011no\" moments.</p>"},{"location":"Market_Data/Panic/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;Dictionary&lt;ulong, double&gt;&gt; ListPositionVolumesAsync(\n    string? symbol,\n    CancellationToken ct);\n\npublic Task&lt;(int ok, int fail)&gt; ClosePositionsAsync(\n    IEnumerable&lt;(ulong Ticket, string Symbol, double Volume)&gt; batch,\n    CancellationToken ct); // helper in Program (not part of MT5Account)\n\npublic Task ClosePositionFullAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken ct);\n\npublic Task&lt;IReadOnlyList&lt;ulong&gt;&gt; ListPendingTicketsAsync(\n    string? symbol,\n    CancellationToken ct);\n\npublic Task CancelPendingOrderAsync(\n    ulong ticket,\n    CancellationToken ct);\n</code></pre>"},{"location":"Market_Data/Panic/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--symbol, -s</code> string no Limit scope to one symbol (e.g., <code>EURUSD</code>). <code>--deviation</code> int no Max slippage (points) for closes (default: <code>10</code>). <code>--timeout-ms</code> int no Per\u2011RPC timeout in milliseconds (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended actions but do not send requests. <p>Note: \u041d\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>--output</code> \u2014 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442.</p>"},{"location":"Market_Data/Panic/#output","title":"Output \u2b06\ufe0f","text":"<p>Text only.</p> <ul> <li>Target summary: <code>PANIC targets: positions=&lt;N&gt;, pendings=&lt;M&gt;</code></li> <li> <p><code>--dry-run</code> preview:</p> </li> <li> <p><code>[DRY-RUN] CLOSE ticket=&lt;id&gt; vol=&lt;lots&gt;</code></p> </li> <li><code>[DRY-RUN] CANCEL ticket=&lt;id&gt;</code></li> <li>Execution result: <code>\u2714 panic done</code></li> </ul> <p>Exit codes:</p> <ul> <li><code>0</code> \u2014 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e (\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438);</li> <li><code>1</code> \u2014 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 (\u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 ErrorPrinter).</li> </ul>"},{"location":"Market_Data/Panic/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Emergency flatten\ndotnet run -- panic -p demo\n\n# Limit to EURUSD with tighter slippage\ndotnet run -- panic -p demo -s EURUSD --deviation 5\n\n# Dry-run preview\ndotnet run -- panic -p demo --dry-run\n</code></pre>"},{"location":"Market_Data/Panic/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>await ConnectAsync();\n\n// Gather scope\nvar pos  = await _mt5Account.ListPositionVolumesAsync(symbol: symbol, CancellationToken.None);\nvar pend = await _mt5Account.ListPendingTicketsAsync(symbol: symbol, CancellationToken.None);\nConsole.WriteLine($\"PANIC targets: positions={pos.Count}, pendings={pend.Count}\");\n\nif (dryRun)\n{\n    foreach (var kv in pos)  Console.WriteLine($\"[DRY-RUN] CLOSE ticket={kv.Key} vol={kv.Value}\");\n    foreach (var t in pend)  Console.WriteLine($\"[DRY-RUN] CANCEL ticket={t}\");\n    return;\n}\n\n// Close positions first (free margin), then cancel pendings\nforeach (var (ticket, vol) in pos)\n    await _mt5Account.ClosePositionFullAsync(ticket, vol, deviation: deviation, CancellationToken.None);\n\nforeach (var t in pend)\n    await _mt5Account.CancelPendingOrderAsync(t, CancellationToken.None);\n\nConsole.WriteLine(\"\u2714 panic done\");\n</code></pre>"},{"location":"Market_Data/Pending.modify/","title":"Pending Modify (<code>pending.modify</code>) \u270f\ufe0f","text":""},{"location":"Market_Data/Pending.modify/#what-it-does","title":"What it Does","text":"<p>Modifies an existing pending order (Limit / Stop / Stop\u2011Limit): entry/trigger/limit price, SL/TP, and TIF/expiration.</p> <p>A similar command: <code>pending.move</code> (`pmove') \u2014 shifts prices by \u00b1N points. The exact setting of the values is shown here.</p>"},{"location":"Market_Data/Pending.modify/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;bool&gt; ModifyPendingOrderAsync(\n    ulong ticket,\n    string? type,               // \"buylimit\"|\"selllimit\"|\"buystop\"|\"sellstop\"|\"buystoplimit\"|\"sellstoplimit\"|null\n    double? price,              // for limit/stop\n    double? stop,               // for stop/stop-limit (trigger)\n    double? limit,              // for stop-limit (limit price)\n    double? sl,\n    double? tp,\n    string? tif,                // \"GTC\"|\"DAY\"|\"GTD\"|null\n    DateTimeOffset? expire,\n    CancellationToken ct);\n</code></pre>"},{"location":"Market_Data/Pending.modify/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--ticket, -t</code> ulong yes Pending order ticket. <code>--type</code> string no `buylimit selllimit buystop sellstop buystoplimit sellstoplimit` (for validating invariants). <code>--price</code> double no New entry price (for Limit/Stop). <code>--stop</code> double no New trigger price (for Stop/Stop\u2011Limit). <code>--limit</code> double no New limit price (for Stop\u2011Limit). <code>--sl</code> double no New Stop Loss (absolute). <code>--tp</code> double no New Take Profit (absolute). <code>--tif</code> string no `GTC DAY GTD`. <code>--expire</code> DateTimeOffset no ISO\u20118601, is used only for <code>--tif=GTD</code> (Specified/SpecifiedDay). <code>--symbol, -s</code> string no For best\u2011effort <code>ensure-visible</code> (optional). <code>--timeout-ms</code> int no Per\u2011RPC timeout (default <code>30000</code>). <code>--dry-run</code> flag no Show changes, without sending a request. <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>--output</code> \u043d\u0435\u0442 \u2014 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442.</p>"},{"location":"Market_Data/Pending.modify/#rules-validation","title":"Rules &amp; Validation \u2705","text":"<ul> <li> <p>Stop\u2011Limit: requires both <code>--stop</code> and <code>--limit'. '--price</code> is not allowed for this type of **.</p> </li> <li> <p><code>buystoplimit</code>: <code>limit \u2264 stop</code></p> </li> <li><code>sellstoplimit</code>: <code>limit \u2265 stop</code></li> <li>Limit/Stop: Requires `--price'.</li> <li>TIF: <code>GTC</code> / <code>DAY' /</code>GTD' (=<code>Specified</code>/<code>SpecifiedDay'); for</code>GTD<code>, you can/should set</code>--expire` (UTC/ISO\u20118601).</li> </ul>"},{"location":"Market_Data/Pending.modify/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Change SL/TP only\ndotnet run -- pending.modify -p demo -t 123456 --sl 1.0950 --tp 1.1050\n\n# Change entry price (Buy Limit)\ndotnet run -- pending.modify -p demo -t 123456 --type buylimit --price 1.1000\n\n# Stop\u2011Limit: set trigger &amp; limit (no --price)\ndotnet run -- pending.modify -p demo -t 123456 --type buystoplimit --stop 1.1010 --limit 1.1005\n\n# TIF=GTD with expiry\ndotnet run -- pending.modify -p demo -t 123456 --tif GTD --expire \"2025-09-01T12:00:00Z\"\n\n# Dry\u2011run preview\ndotnet run -- pending.modify -p demo -t 123456 --price 1.1000 --dry-run\n</code></pre>"},{"location":"Market_Data/Pending.modify/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>// (optional) ensure visibility\nif (!string.IsNullOrWhiteSpace(symbol))\n{\n    using var visCts = new CancellationTokenSource(TimeSpan.FromSeconds(3));\n    try\n    {\n        await _mt5Account.EnsureSymbolVisibleAsync(\n            symbol,\n            maxWait: TimeSpan.FromSeconds(3),\n            cancellationToken: visCts.Token);\n    }\n    catch (Exception ex) when (ex is not OperationCanceledException)\n    {\n        Console.WriteLine($\"WARN: ensure-visible failed: {ex.Message}\");\n    }\n}\n\n// Build cancellation with command timeout\nusing var cts = new CancellationTokenSource(TimeSpan.FromMilliseconds(timeoutMs ?? 30000));\nvar ct = cts.Token;\n\n// Guard: at least one change must be provided\nif (price is null &amp;&amp; stop is null &amp;&amp; limit is null &amp;&amp; sl is null &amp;&amp; tp is null &amp;&amp; tif is null &amp;&amp; expire is null)\n    throw new ArgumentException(\"No changes specified. Provide at least one flag.\");\n\n// Apply changes\nvar ok = await _mt5Account.ModifyPendingOrderAsync(\n    ticket: ticket,\n    type: typeStr,   // optional; used only to validate invariants client-side\n    price: price,\n    stop: stop,\n    limit: limit,\n    sl: sl,\n    tp: tp,\n    tif: tifStr,     // \"GTC\"|\"DAY\"|\"GTD\" (SPECIFIED/SPECIFIED_DAY also accepted)\n    expire: expire,\n    ct: ct);\n\nConsole.WriteLine(ok ? \"\u2713 pending.modify done\" : \"\u26a0 pending.modify returned false\");\n</code></pre>"},{"location":"Market_Data/Pending.move/","title":"Pending Move (<code>pending.move</code>) \u2194\ufe0f","text":""},{"location":"Market_Data/Pending.move/#what-it-does","title":"What it Does","text":"<p>Moves a pending order price by \u00b1N points (relative shift). Works for pending orders (Limit/Stop/Stop\u2011Limit). Not applicable to already filled positions.</p> <p>Alias: <code>pmove</code>.</p>"},{"location":"Market_Data/Pending.move/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task MovePendingByPointsAsync(\n    ulong ticket,\n    string symbol,\n    int byPoints,\n    CancellationToken ct);\n</code></pre>"},{"location":"Market_Data/Pending.move/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--ticket, -t</code> ulong yes Pending order ticket to move. <code>--by-points, -P</code> int yes Signed shift in points (e.g., <code>+15</code>, <code>-20</code>). <code>--timeout-ms</code> int no Per\u2011RPC timeout in milliseconds (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended change without sending a request. <p>There are no parameters <code>--price</code>, <code>--sl</code>, <code>--tp</code>, <code>--expiration</code>, <code>--output</code> \u2014 ***. To accurately edit prices/SL/TP, use `pending.modify'.</p>"},{"location":"Market_Data/Pending.move/#output","title":"Output \u2b06\ufe0f","text":"<ul> <li>If the ticket is not found: <code>Pending order #&lt;ticket&gt; not found.</code> (exit code <code>2</code>).</li> <li>Dry\u2011run: Pre-calculation of old/new prices (Price/PriceTriggerStopLimit, if available).</li> <li>Execution: <code>\u2714 pending.move done' (exit code</code>0<code>; errors are printed as warnings, critical errors are</code>1`).</li> </ul>"},{"location":"Market_Data/Pending.move/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Move by +15 points\ndotnet run -- pending.move -p demo -t 123456 -P +15\n\n# Dry\u2011run (no RPC)\ndotnet run -- pending.move -p demo -t 123456 -P -25 --dry-run\n</code></pre>"},{"location":"Market_Data/Pending.move/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>await ConnectAsync();\n\n// Build cancellation with timeout (default 30s)\nusing var cts = new CancellationTokenSource(TimeSpan.FromMilliseconds(timeoutMs ?? 30000));\nvar ct = cts.Token;\n\n// 1) Find the pending order by ticket\nvar opened = await _mt5Account.OpenedOrdersAsync(cancellationToken: ct);\n\n// Your helper should ensure it's a PENDING order and return its symbol.\n// Example signature: TryFindPending(opened, ticket, out var pending)\nvar pending = TryFindPending(opened, ticket, out var sym);\nif (pending is null)\n{\n    Console.WriteLine($\"Pending order #{ticket} not found.\");\n    // return 2;\n}\n\n// 2) Compute point &amp; delta for preview\n// Prefer reliable point from SymbolInfo rather than a local guess\nvar symInfo = await _mt5Account.SymbolInfoAsync(sym, cancellationToken: ct);\nvar point = symInfo.Point;\nvar delta = byPoints * point;\n\nif (dryRun)\n{\n    // If your model exposes current prices, print old\u2192new\n    // For Limit/Stop orders:\n    //   var oldPrice = pending.Price;\n    //   var newPrice = MT5Account.NormalizePrice(oldPrice + delta, symInfo.Digits);\n    // For Stop-Limit orders (if fields exist):\n    //   var oldStop  = pending.StopLimit;     // or Trigger\n    //   var oldLimit = pending.Price;         // typical layout\n    //   var newStop  = MT5Account.NormalizePrice(oldStop  + delta, symInfo.Digits);\n    //   var newLimit = MT5Account.NormalizePrice(oldLimit + delta, symInfo.Digits);\n\n    Console.WriteLine($\"[DRY-RUN] MOVE #{ticket} {sym} by {byPoints} pt (\u0394={delta})\");\n    // Console.WriteLine($\"    price: {oldPrice} -&gt; {newPrice}\");\n    // Console.WriteLine($\"    stop/limit: {oldStop}-&gt;{newStop} / {oldLimit}-&gt;{newLimit}\");\n    // return 0;\n}\nelse\n{\n    // 3) Execute\n    await _mt5Account.MovePendingByPointsAsync(ticket, sym, byPoints, ct);\n    Console.WriteLine(\"\u2714 pending.move done\");\n    // return 0;\n}\n</code></pre>"},{"location":"Market_Data/Quote/","title":"Quote (<code>quote</code>) \ud83d\udcac","text":""},{"location":"Market_Data/Quote/#what-it-does","title":"What it Does","text":"<p>Gets a snapshot price for one symbol: Bid / Ask / Time, plus derived metrics (Mid, Spread, AgeMs) in text mode. Best\u2011effort ensures the symbol is visible before requesting.</p> <p>Alias: <code>q</code>.</p>"},{"location":"Market_Data/Quote/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\nprivate Task&lt;QuoteDto&gt; FirstTickAsync(string symbol, CancellationToken ct);\n</code></pre>"},{"location":"Market_Data/Quote/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Which profile to use (from <code>profiles.json</code>). <code>--symbol</code>, <code>-s</code> string no Symbol to query (defaults to profile\u2019s). <code>--output</code>, <code>-o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: 30000)."},{"location":"Market_Data/Quote/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"<p>Text mode:</p> Field Type Description <code>Symbol</code> string Symbol name. <code>Bid</code> double Best bid price. <code>Ask</code> double Best ask price. <code>TimeUtc</code> DateTime? Server time of the tick. <code>Mid</code> double <code>(Bid + Ask) / 2</code>. <code>Spread</code> double <code>Ask - Bid</code>. <code>AgeMs</code> double Age in ms since <code>TimeUtc</code> (NaN if time is absent). <p>JSON mode:</p> <pre><code>{\n  \"Symbol\": \"EURUSD\",\n  \"Bid\": 1.23456,\n  \"Ask\": 1.23470,\n  \"TimeUtc\": \"2025-09-02T14:22:33Z\"\n}\n</code></pre>"},{"location":"Market_Data/Quote/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Text\ndotnet run -- quote -p demo -s EURUSD\n\n# JSON\ndotnet run -- quote -p demo -s EURUSD -o json\n</code></pre>"},{"location":"Market_Data/Quote/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nuse-sym EURUSD\nq\n</code></pre>"},{"location":"Market_Data/Quote/#notes","title":"Notes \ud83e\uddf7","text":"<ul> <li>Always tries <code>EnsureSymbolVisibleAsync(symbol, 3s, ct)</code> before requesting a tick.</li> <li>JSON output = raw server payload (no Mid/Spread/AgeMs).</li> <li>Text output enriches with derived metrics.</li> </ul>"},{"location":"Market_Data/Quote/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var s = symbol ?? GetOptions().DefaultSymbol;\nawait _mt5Account.EnsureSymbolVisibleAsync(s, TimeSpan.FromSeconds(3));\n\nusing var cts = StartOpCts();\nvar snap = await FirstTickAsync(s, cts.Token);\n\nvar mid    = (snap.Bid + snap.Ask) / 2.0;\nvar spread = snap.Ask - snap.Bid;\nvar ageMs  = snap.TimeUtc.HasValue ? Math.Abs((DateTime.UtcNow - snap.TimeUtc.Value).TotalMilliseconds) : double.NaN;\n</code></pre>"},{"location":"Market_Data/Reverse/","title":"Reverse (<code>reverse</code>) &amp; Reverse by Ticket (<code>reverse.ticket</code>) \ud83d\udd04","text":""},{"location":"Market_Data/Reverse/#what-they-do","title":"What they do","text":"<ul> <li><code>reverse</code> \u2014 reverses positions by symbol: calculates current net exposure, then either sends one opposite order (net) or closes all &amp; reopens one (flat).</li> <li><code>reverse.ticket</code> \u2014 reverses a single position by its ticket.</li> </ul> <p>Aliases: <code>reverse</code> \u2192 <code>rv</code>, <code>reverse.ticket</code> \u2192 <code>rvt</code>.</p>"},{"location":"Market_Data/Reverse/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":""},{"location":"Market_Data/Reverse/#reverse","title":"<code>reverse</code>","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile from <code>profiles.json</code>. <code>--symbol, -s</code> string no Target symbol (defaults to app <code>DefaultSymbol</code>). <code>--mode</code> string no <code>net</code> (default) or <code>flat</code>. <code>--sl</code> double no Stop Loss for the new position. <code>--tp</code> double no Take Profit for the new position. <code>--deviation</code> int no Slippage tolerance (points), default <code>10</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout (default <code>30000</code>). <code>--dry-run</code> flag no Print action plan without sending any orders. <p>There is no <code>--output</code> option \u2014 the command prints text.</p>"},{"location":"Market_Data/Reverse/#reverseticket","title":"<code>reverse.ticket</code>","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile. <code>--ticket, -t</code> ulong yes Position ticket to reverse. <code>--sl</code> double no Stop Loss for the new position. <code>--tp</code> double no Take Profit for the new position. <code>--deviation</code> int no Slippage tolerance (points), default <code>10</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout (default <code>30000</code>). <code>--dry-run</code> flag no Print action plan without sending any orders."},{"location":"Market_Data/Reverse/#output-text","title":"Output \u2b06\ufe0f (text)","text":"<p><code>reverse</code></p> <ul> <li>No positions for symbol \u2192 <code>No positions for &lt;SYM&gt; to reverse.</code> (exit code <code>2</code>).</li> <li>Net = 0 \u2192 <code>Net position for &lt;SYM&gt; is zero; nothing to reverse.</code> (exit code <code>2</code>).</li> <li> <p><code>--dry-run</code>:</p> </li> <li> <p><code>net</code>: <code>[DRY-RUN] REVERSE(net) &lt;SYM&gt;: send &lt;BUY/SELL&gt; vol=&lt;2\u00d7|net|&gt; (deviation=...) SL=... TP=...</code></p> </li> <li><code>flat</code>: <code>[DRY-RUN] REVERSE(flat) &lt;SYM&gt;: close ALL positions; then &lt;BUY/SELL&gt; vol=&lt;|net|&gt; SL=... TP=...</code></li> <li> <p>Execution:</p> </li> <li> <p><code>net</code>: log <code>REVERSE(net) done: ticket=... newSide=... volSent=...</code></p> </li> <li><code>flat</code>: warns if some positions failed to close, then logs <code>REVERSE(flat) done: ticket=... side=... vol=...</code></li> </ul> <p><code>reverse.ticket</code></p> <ul> <li>Ticket not found \u2192 <code>Position #&lt;ticket&gt; not found.</code> (exit code <code>2</code>).</li> <li><code>--dry-run</code>: <code>[DRY-RUN] REVERSE.TICKET #&lt;ticket&gt; &lt;SYM&gt;: close &lt;vol&gt;, then &lt;BUY/SELL&gt; &lt;vol&gt; (dev=...) SL=... TP=...</code></li> <li>Execution: <code>\u2714 reverse.ticket done</code></li> </ul> <p>Errors are printed via <code>ErrorPrinter</code>; fatal errors set exit code <code>1</code>.</p>"},{"location":"Market_Data/Reverse/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Reverse by symbol (net exposure)\ndotnet run -- reverse -p demo -s EURUSD --mode net\n\n# Reverse by symbol (flat: close all, then reopen 1\u00d7|net|)\ndotnet run -- reverse -p demo -s EURUSD --mode flat --sl 1.0950 --tp 1.1050\n\n# Reverse by ticket\ndotnet run -- reverse.ticket -p demo -t 123456 --deviation 15\n</code></pre>"},{"location":"Market_Data/Reverse/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Margin: ensure free margin is sufficient for the opposite leg.</li> <li>Non\u2011atomic: close\u2192open are two separate steps; slippage gaps may occur.</li> <li><code>flat</code> may partially fail to close some tickets \u2014 result prints <code>OK/FAIL</code>.</li> <li>Best\u2011effort <code>EnsureSymbolVisibleAsync</code> is always called before trading.</li> </ul>"},{"location":"Market_Data/Reverse/#code-reference","title":"Code Reference \ud83e\udde9","text":""},{"location":"Market_Data/Reverse/#reverse-net-vs-flat","title":"<code>reverse</code> (<code>net</code> vs <code>flat</code>)","text":"<pre><code>// 1) calculate net exposure by symbol\nvar opened = await _mt5Account.OpenedOrdersAsync();\nvar posList = opened.PositionInfos.Where(p =&gt; p.Symbol == s).ToList();\nvar net = posList.Sum(p =&gt; (IsLongPosition(p) ? 1.0 : -1.0) * p.Volume);\n\nif (mode == \"net\")\n{\n    var volToSend = Math.Abs(net) * 2.0;\n    await _mt5Account.SendMarketOrderAsync(\n        symbol: s,\n        isBuy: net &lt; 0,\n        volume: volToSend,\n        deviation: deviation,\n        stopLoss: sl,\n        takeProfit: tp);\n}\nelse // flat\n{\n    // close all, then open 1\u00d7|net|\n    var batch = posList.Select(p =&gt; (p.Ticket, p.Symbol, p.Volume));\n    var (ok, fail) = await ClosePositionsAsync(batch, CancellationToken.None);\n    await _mt5Account.SendMarketOrderAsync(\n        symbol: s,\n        isBuy: net &lt; 0,\n        volume: Math.Abs(net),\n        deviation: deviation,\n        stopLoss: sl,\n        takeProfit: tp);\n}\n</code></pre>"},{"location":"Market_Data/Reverse/#reverseticket_1","title":"<code>reverse.ticket</code>","text":"<pre><code>var opened = await _mt5Account.OpenedOrdersAsync();\nvar pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket);\nvar symbol = pos.Symbol; var vol = pos.Volume; var isLong = IsLongPosition(pos);\n\n// steps: close full \u2192 open opposite\nawait _mt5Account.ClosePositionPartialAsync(ticket, vol, deviation, CancellationToken.None);\nawait _mt5Account.SendMarketOrderAsync(symbol, isBuy: !isLong, volume: vol, deviation: deviation, stopLoss: sl, takeProfit: tp);\n</code></pre> <p>\ud83d\udccc In short: <code>reverse net</code> sends one opposite market order with 2\u00d7|net|; <code>reverse flat</code> closes all then opens 1\u00d7|net|; <code>reverse.ticket</code> does the same for a single ticket.</p>"},{"location":"Misc/List/","title":"List Profiles (<code>profiles list</code>) \ud83d\udcc2","text":""},{"location":"Misc/List/#what-it-does","title":"What it Does","text":"<p>Displays all available profile names from <code>profiles.json</code> (login/server/password settings for connecting to MT5).</p> <p>Subcommand of the profiles group. Invoke as <code>profiles list</code> (alias: <code>ls</code>).</p>"},{"location":"Misc/List/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--output, -o</code> string no <code>text</code> (default) or <code>json</code>. <p><code>--timeout-ms</code> is not supported for this subcommand.</p>"},{"location":"Misc/List/#output","title":"Output \u2b06\ufe0f","text":"<p>Text mode</p> <pre><code>Profiles:\n- default\n- demo\n- live\n</code></pre> <p>JSON mode</p> <pre><code>[\"default\",\"demo\",\"live\"]\n</code></pre>"},{"location":"Misc/List/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Text\ndotnet run -- profiles list\n\n# JSON\ndotnet run -- profiles list -o json\n</code></pre>"},{"location":"Misc/List/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo   # set current profile to demo\npf list       # same as: profiles list\n</code></pre>"},{"location":"Misc/List/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>File path: <code>profiles.json</code> is read from AppContext.BaseDirectory.</li> <li>If the file is missing or empty \u2192 text: profiles.json not found or empty., json: [].</li> <li>If parsing fails (invalid JSON) \u2192 error is printed via ErrorPrinter and the command exits with code 1.</li> <li>Iteration order of profile names is not guaranteed. Sort if you need stable output.</li> </ul>"},{"location":"Misc/List/#code-reference","title":"Code Reference \ud83e\uddf7","text":"<pre><code>// Read &amp; print\nvar dict = ReadProfiles();\nif (IsJson(output))\n    Console.WriteLine(ToJson(dict.Keys.ToArray()));\nelse\n{\n    if (dict.Count == 0) { Console.WriteLine(\"profiles.json not found or empty.\"); return; }\n    Console.WriteLine(\"Profiles:\");\n    foreach (var name in dict.Keys) Console.WriteLine($\"- {name}\");\n}\n</code></pre>"},{"location":"Misc/List/#helper","title":"Helper","text":"<pre><code>private Dictionary&lt;string, MT5Options&gt; ReadProfiles()\n{\n    var path = Path.Combine(AppContext.BaseDirectory, \"profiles.json\");\n    if (!File.Exists(path)) return new();\n    var json = File.ReadAllText(path);\n    return JsonSerializer.Deserialize&lt;Dictionary&lt;string, MT5Options&gt;&gt;(json,\n        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();\n}\n</code></pre>"},{"location":"Misc/Misc_Overview/","title":"Misc Overview \ud83d\udee0\ufe0f","text":"<p>This section collects utility commands that don\u2019t fall strictly into Account, History, or Market Data categories. They are mostly focused on ticket-level operations and quick lists.</p>"},{"location":"Misc/Misc_Overview/#included-commands","title":"Included Commands \ud83d\udcd1","text":"Command Alias Description List \u2014 Show profile names or other generic lists. Pending List <code>pdls</code> List pending orders in the account. Reverse Ticket <code>rvt</code> Reverse a specific position by its ticket. Specific Ticket \u2014 Utility to work with a specific ticket (lookups, validation). Ticket Show <code>tsh</code> Show detailed info for a ticket (open or from recent history)."},{"location":"Misc/Misc_Overview/#purpose","title":"Purpose \ud83c\udfaf","text":"<ul> <li>Provide ticket-level control for positions and orders.</li> <li>Help with diagnostics when checking individual orders.</li> <li>Supply lists of pending orders or profiles to quickly orient in the environment.</li> </ul>"},{"location":"Misc/Misc_Overview/#typical-use-cases","title":"Typical Use Cases \u2699\ufe0f","text":"<ul> <li>Quickly check what pending orders exist: <code>pdls</code>.</li> <li>Reverse an open position without guessing the symbol: <code>rvt -t 123456</code>.</li> <li>Show a ticket's history context for audit or debugging: <code>tsh -t 123456 -d 30</code>.</li> <li>Validate ticket presence or extract info programmatically with <code>Specific_Ticket</code>.</li> </ul>"},{"location":"Misc/Misc_Overview/#shortcuts-from-psshortcastsps1","title":"Shortcuts \ud83d\udd11 (from <code>ps/shortcasts.ps1</code>)","text":"<ul> <li><code>pdls</code> \u2192 <code>mt5 pending list</code></li> <li><code>rvt</code> \u2192 <code>mt5 reverse.ticket</code></li> <li><code>tsh</code> \u2192 <code>mt5 ticket show</code></li> </ul>"},{"location":"Misc/Misc_Overview/#notes","title":"Notes \ud83d\udcdd","text":"<p>These commands are auxiliary but very handy when building scripts or diagnosing issues. They complement the main trading and account-management commands by focusing on individual orders/tickets.</p>"},{"location":"Misc/Pending_List/","title":"Pending List (<code>pending list</code>) \ud83d\udcdd","text":""},{"location":"Misc/Pending_List/#what-it-does","title":"What it Does","text":"<p>Shows all pending orders for the selected account/profile. Handy to review stop/limit orders before modifying or cancelling.</p> <p>Subcommand of <code>pending</code>. Invoke as <code>pending list</code> (alias: <code>ls</code>).</p>"},{"location":"Misc/Pending_List/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Misc/Pending_List/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile to use (from <code>profiles.json</code>). <code>--output, -o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per-RPC timeout (default: <code>30000</code>)."},{"location":"Misc/Pending_List/#output","title":"Output \u2b06\ufe0f","text":"<p>Text mode</p> <pre><code>Pending orders (&lt;N&gt;):\n#&lt;ticket&gt;  &lt;type&gt;  &lt;symbol&gt;  vol=&lt;lots&gt;  price=&lt;p&gt;  SL=&lt;sl&gt;  TP=&lt;tp&gt;  exp=&lt;iso-or-\u2013&gt;\n...\n</code></pre> <p>JSON mode</p> <ul> <li>Raw payload: array of pending entries from <code>OpenedOrdersData.PendingInfos</code> (exact fields depend on your proto).</li> </ul> <p>Typical fields per item (may vary by broker/proto):</p> <ul> <li><code>Ticket</code> (ulong), <code>Symbol</code> (string), <code>Type</code> (enum), <code>Volume</code> (double),</li> <li><code>Price</code> / <code>Stop</code> / <code>Limit</code> (depending on order kind), <code>StopLoss</code>, <code>TakeProfit</code>, <code>Expiration</code>.</li> </ul>"},{"location":"Misc/Pending_List/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Text\ndotnet run -- pending list -p demo\n\n# JSON\ndotnet run -- pending list -p demo -o json\n</code></pre>"},{"location":"Misc/Pending_List/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\\\ps\\\\shortcasts.ps1\nuse-pf demo\npdls  # expands to: mt5 pending list -p demo --timeout-ms 90000\n</code></pre>"},{"location":"Misc/Pending_List/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>List may be empty if all orders were filled or expired.</li> <li>For editing/moving: use <code>pending.modify</code> / <code>pending.move</code>.</li> <li>For cancellation: see <code>pending cancel</code> / <code>cancel</code> (ticket-based).</li> </ul>"},{"location":"Misc/Pending_List/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>await ConnectAsync();\n\nvar opened = await _mt5Account.OpenedOrdersAsync();\nvar pendings = opened.PendingInfos;\n\nif (IsJson(output))\n{\n    Console.WriteLine(ToJson(pendings));\n}\nelse\n{\n    if (pendings.Count == 0) { Console.WriteLine(\"No pending orders.\"); return; }\n    Console.WriteLine($\"Pending orders ({pendings.Count}):\");\n    foreach (var p in pendings.Take(50))\n        Console.WriteLine($\"#{p.Ticket}  {p.Type}  {p.Symbol}  vol={p.Volume}  price={p.Price}  SL={p.StopLoss}  TP={p.TakeProfit}  exp={p.Expiration}\");\n}\n</code></pre> <ul> <li><code>OpenedOrdersData</code> contains both <code>PositionInfos</code> and <code>PendingInfos</code>.</li> <li><code>pending list</code> uses the <code>PendingInfos</code> collection.</li> <li><code>sortMode</code> is always left at the default (<code>ByOpenTimeAsc</code>) in CLI.</li> </ul>"},{"location":"Misc/Specific_Ticket/","title":"Ticket Show (<code>ticket show</code>) \u2014 Internal Flow (Specific_Ticket.md) \ud83c\udfab","text":""},{"location":"Misc/Specific_Ticket/#what-it-does","title":"What it Does","text":"<p>Technical walkthrough of how <code>ticket show</code> resolves and prints a specific ticket:</p> <ol> <li>checks open sets (positions/pendings) and, if present, prints a compact card;</li> <li>if not found, falls back to history for the last N days.</li> </ol> <p>This page is for engineers (under\u2011the\u2011hood). For a user\u2011facing overview, see Ticket_Show.md.</p>"},{"location":"Misc/Specific_Ticket/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;OpenedOrdersTicketsData&gt; OpenedOrdersTicketsAsync(\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;OrdersHistoryData&gt; OrderHistoryAsync(\n    DateTime from,\n    DateTime to,\n    BMT5_ENUM_ORDER_HISTORY_SORT_TYPE sortMode = BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.Bmt5SortByCloseTimeAsc,\n    int pageNumber = 0,\n    int itemsPerPage = 0,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Misc/Specific_Ticket/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket, -t</code> ulong yes Ticket ID to inspect. <code>--days, -d</code> int no Look back N days in history if not found open (default: <code>30</code>). <code>--output, -o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout in milliseconds (default: <code>30000</code>)."},{"location":"Misc/Specific_Ticket/#output","title":"Output \u2b06\ufe0f","text":"<p>Open (position/pending) \u2014 prints: Symbol, Volume, Price (open), optional SL/TP, optional Profit, bucket tag (<code>POSITION</code>/<code>PENDING</code>).</p> <p>History \u2014 one of:</p> <ul> <li>ORDER history: <code>Symbol</code>, <code>State</code>, <code>VolumeInitial\u2192VolumeCurrent</code>, <code>PriceOpen</code>, <code>setup/done</code> timestamps.</li> <li>DEAL history: <code>Symbol</code>, <code>Type</code>, <code>Volume</code>, <code>Price</code>, <code>Profit</code>, <code>time</code>.</li> </ul> <p>If not found anywhere \u2192 <code>Ticket #&lt;id&gt; not found in open sets or last &lt;days&gt; days.</code> (exit code <code>2</code>). Fatal errors set exit code <code>1</code>.</p> <p>Fields like <code>Side</code>, <code>ClosePrice</code>, <code>Commission</code>, <code>Swap</code> may exist in proto but are not printed by the current handler. Extend printing if you need them.</p>"},{"location":"Misc/Specific_Ticket/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Inspect ticket in open sets or recent history\ndotnet run -- ticket show -p demo -t 123456\n\n# JSON + 7\u2011day history fallback\ndotnet run -- ticket show -p demo -t 123456 -o json -d 7\n</code></pre>"},{"location":"Misc/Specific_Ticket/#powershell-shortcut","title":"PowerShell Shortcut","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\ntsh -t 123456\n</code></pre>"},{"location":"Misc/Specific_Ticket/#underthehood-flow","title":"Under\u2011the\u2011hood Flow","text":"<ol> <li>Quick membership: <code>_mt5Account.OpenedOrdersTicketsAsync()</code> \u2192 detect if the ticket is currently open (orders/positions).</li> <li>Fetch object: <code>_mt5Account.OpenedOrdersAsync()</code> \u2192 find the element inside the aggregate via <code>TryFindByTicketInAggregate(...)</code> and print.</li> <li>History fallback: <code>_mt5Account.OrderHistoryAsync(from, to)</code> \u2192 scan <code>HistoryOrder</code>/<code>HistoryDeal</code> by ticket.</li> </ol> <p>Note: The project deliberately does not have <code>GetOpenedAggregateAsync</code>. Use the two calls above.</p>"},{"location":"Misc/Specific_Ticket/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>await ConnectAsync();\n\n// 1) open sets: quick membership\nvar tickets = await _mt5Account.OpenedOrdersTicketsAsync();\nbool isOpenOrder    = tickets.OpenedOrdersTickets.Contains((long)ticket);\nbool isOpenPosition = tickets.OpenedPositionTickets.Contains((long)ticket);\n\n// 2) open aggregate: fetch object &amp; print\nvar opened = await _mt5Account.OpenedOrdersAsync();\nvar obj = TryFindByTicketInAggregate(opened, ticket, out var bucket);\nif (obj != null)\n{\n    // print JSON/text depending on `output`\n}\nelse\n{\n    // 3) history fallback\n    var from = DateTime.UtcNow.AddDays(-Math.Abs(days));\n    var to   = DateTime.UtcNow;\n    var hist = await _mt5Account.OrderHistoryAsync(from, to);\n    // locate in HistoryOrder/HistoryDeal and print\n}\n</code></pre>"},{"location":"Misc/Specific_Ticket/#proto-reference-excerpts","title":"Proto Reference (excerpts) \ud83d\udcdc","text":"<pre><code>message OpenedOrdersTicketsData {\n  repeated int64 opened_orders_tickets = 1;\n  repeated int64 opened_position_tickets = 2;\n}\n</code></pre> <pre><code>message OpenedOrdersData {\n  repeated OpenedOrderInfo opened_orders = 1;\n  repeated PositionInfo   position_infos = 2;\n}\n\nmessage OpenedOrderInfo {\n  uint32 index = 1;\n  uint64 ticket = 2;\n  double price_current = 3;\n  double price_open = 4;\n  double stop_limit = 5;\n  double stop_loss = 6;\n  double take_profit = 7;\n  double volume_current = 8;\n  double volume_initial = 9;\n  int64  magic_number = 10;\n  int32  reason = 11;\n  BMT5_ENUM_ORDER_TYPE  type = 12;\n  BMT5_ENUM_ORDER_STATE state = 13;\n  google.protobuf.Timestamp time_expiration = 14;\n  // NOTE: Some builds include `string symbol` here. If absent, derive symbol using other endpoints or mapping.\n}\n\nmessage PositionInfo {\n  uint32 index = 1;\n  uint64 ticket = 2;\n  google.protobuf.Timestamp open_time = 3;\n  double volume = 4;\n  double price_open = 5;\n  double stop_loss = 6;\n  double take_profit = 7;\n  double price_current = 8;\n  double swap = 9;\n  double profit = 10;\n  google.protobuf.Timestamp last_update_time = 11;\n  BMT5_ENUM_POSITION_TYPE type = 12;\n  int64  magic_number = 13;\n  int64  identifier = 14;\n  BMT5_ENUM_POSITION_REASON reason = 15;\n  string symbol = 16;\n  string comment = 17;\n  string external_id = 18;\n  double position_commission = 19;\n  int64  account_login = 20;\n}\n</code></pre> <pre><code>message OrdersHistoryData {\n  int32 arrayTotal   = 1;\n  int32 pageNumber   = 2;\n  int32 itemsPerPage = 3;\n  repeated HistoryData history_data = 4;\n}\n\nmessage HistoryData {\n  uint32 index = 1;\n  OrderHistoryData history_order = 2;\n  DealHistoryData  history_deal  = 3;\n}\n\nmessage OrderHistoryData {\n  uint64 ticket = 1;\n  google.protobuf.Timestamp setup_time = 2;\n  google.protobuf.Timestamp done_time  = 3;\n  BMT5_ENUM_ORDER_STATE state = 4;\n  double price_current = 5;\n  double price_open    = 6;\n  double stop_limit    = 7;\n  double stop_loss     = 8;\n  double take_profit   = 9;\n  double volume_current = 10;\n  double volume_initial = 11;\n  int64  magic_number   = 12;\n  BMT5_ENUM_ORDER_TYPE type = 13;\n  google.protobuf.Timestamp time_expiration = 14;\n}\n</code></pre> <pre><code>enum BMT5_ENUM_OPENED_ORDER_SORT_TYPE {\n  BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_ASC  = 0;\n  BMT5_OPENED_ORDER_SORT_BY_OPEN_TIME_DESC = 1;\n  BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_ASC  = 2;\n  BMT5_OPENED_ORDER_SORT_BY_ORDER_TICKET_ID_DESC = 3;\n}\n\nenum BMT5_ENUM_ORDER_HISTORY_SORT_TYPE {\n  BMT5_SORT_BY_OPEN_TIME_ASC   = 0;\n  BMT5_SORT_BY_OPEN_TIME_DESC  = 1;\n  BMT5_SORT_BY_CLOSE_TIME_ASC  = 2;\n  BMT5_SORT_BY_CLOSE_TIME_DESC = 3;\n  BMT5_SORT_BY_ORDER_TICKET_ID_ASC = 4; // ...\n}\n\nenum BMT5_ENUM_POSITION_TYPE {\n  BMT5_POSITION_TYPE_BUY  = 0;\n  BMT5_POSITION_TYPE_SELL = 1;\n}\n</code></pre>"},{"location":"Misc/Ticket_Show/","title":"Ticket Show (<code>ticket show</code>) \ud83c\udfab","text":""},{"location":"Misc/Ticket_Show/#what-it-does","title":"What it Does","text":"<p>Displays full info for a specific ticket \u2014 first tries open sets (positions/pendings); if not found, searches recent history (last N days).</p> <p>Group: <code>ticket</code> (alias <code>t</code>). Subcommand: <code>show</code> (alias <code>sh</code>).</p> <p>Need the internal flow and proto details? See Specific_Ticket.md.</p>"},{"location":"Misc/Ticket_Show/#method-signatures-quick-ref","title":"Method Signatures (quick ref) \ud83e\udde9","text":"<p>Full details live in Specific_Ticket.md. This page is a user-facing overview.</p> <pre><code>public Task&lt;OpenedOrdersTicketsData&gt; OpenedOrdersTicketsAsync(\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;OrdersHistoryData&gt; OrderHistoryAsync(\n    DateTime from,\n    DateTime to,\n    BMT5_ENUM_ORDER_HISTORY_SORT_TYPE sortMode = BMT5_ENUM_ORDER_HISTORY_SORT_TYPE.Bmt5SortByCloseTimeAsc,\n    int pageNumber = 0,\n    int itemsPerPage = 0,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Misc/Ticket_Show/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile, -p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket, -t</code> ulong yes Ticket ID to inspect. <code>--days, -d</code> int no History lookback if not found open (default: <code>30</code>). <code>--output, -o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout (default: <code>30000</code>)."},{"location":"Misc/Ticket_Show/#output-what-the-current-handler-prints","title":"Output \u2b06\ufe0f (what the current handler prints)","text":"<p>Open (position/pending)</p> <ul> <li><code>Symbol</code>, <code>Volume</code>, <code>Price</code> (open), optional <code>SL</code> / <code>TP</code>, optional <code>Profit</code>, and bucket tag: <code>POSITION</code> or <code>PENDING</code>.</li> </ul> <p>History (order)</p> <ul> <li><code>Symbol</code>, <code>State</code>, <code>VolumeInitial\u2192VolumeCurrent</code>, <code>PriceOpen</code>, timestamps <code>setup</code> / <code>done</code>.</li> </ul> <p>History (deal)</p> <ul> <li><code>Symbol</code>, <code>Type</code>, <code>Volume</code>, <code>Price</code>, <code>Profit</code>, <code>time</code>.</li> </ul> <p>Fields like <code>Side</code>, <code>ClosePrice</code>, <code>Commission</code>, <code>Swap</code> exist in proto but are not printed by the current handler. Extend printing if needed.</p>"},{"location":"Misc/Ticket_Show/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Misc/Ticket_Show/#cli","title":"CLI","text":"<pre><code># Inspect an open or recent ticket\ndotnet run -- ticket show -p demo -t 123456\n\n# With 7\u2011day history fallback\ndotnet run -- ticket show -p demo -t 123456 -d 7\n\n# JSON output\ndotnet run -- ticket show -p demo -t 123456 -o json\n</code></pre>"},{"location":"Misc/Ticket_Show/#powershell-shortcuts","title":"PowerShell Shortcuts","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\ntsh -t 123456 -d 7\n# expands to: mt5 ticket show -p demo -t 123456 -d 7 --timeout-ms 90000\n</code></pre>"},{"location":"Misc/Ticket_Show/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li><code>--days</code> matters: closed long ago \u2192 may not show up.</li> <li>Ticket IDs are per account \u2014 ensure the correct profile.</li> <li>Full proto mapping and internal flow are documented in Specific_Ticket.md.</li> </ul>"},{"location":"Misc/Ticket_Show/#proto-field-mapping-summary","title":"Proto Field Mapping (summary) \ud83e\uddec","text":"<p>Open \u2014 Position (<code>PositionInfo</code>)</p> <ul> <li><code>Symbol</code> \u2190 <code>PositionInfo.symbol</code></li> <li><code>Volume</code> \u2190 <code>PositionInfo.volume</code></li> <li><code>Price</code> (open) \u2190 <code>PositionInfo.price_open</code></li> <li><code>SL</code> \u2190 <code>PositionInfo.stop_loss</code></li> <li><code>TP</code> \u2190 <code>PositionInfo.take_profit</code></li> <li><code>Profit</code> \u2190 <code>PositionInfo.profit</code></li> </ul> <p>Open \u2014 Pending (<code>OpenedOrderInfo</code>)</p> <ul> <li><code>Symbol</code> \u2190 <code>OpenedOrderInfo.symbol</code> (if present in your build)</li> <li><code>Volume</code> \u2190 <code>OpenedOrderInfo.volume_current</code> (or <code>volume_initial</code>)</li> <li><code>Price</code> (entry) \u2190 <code>OpenedOrderInfo.price_open</code></li> <li><code>SL</code> \u2190 <code>OpenedOrderInfo.stop_loss</code></li> <li><code>TP</code> \u2190 <code>OpenedOrderInfo.take_profit</code></li> <li><code>Expiration</code> \u2190 <code>OpenedOrderInfo.time_expiration</code></li> </ul> <p>History \u2014 Order (<code>OrderHistoryData</code>)</p> <ul> <li><code>Symbol</code> \u2190 <code>OrderHistoryData.symbol</code></li> <li><code>State</code> \u2190 <code>OrderHistoryData.state</code></li> <li><code>VolumeInitial\u2192VolumeCurrent</code> \u2190 <code>volume_initial</code> \u2192 <code>volume_current</code></li> <li><code>PriceOpen</code> \u2190 <code>OrderHistoryData.price_open</code></li> <li><code>setup/done</code> \u2190 <code>setup_time</code> / <code>done_time</code></li> </ul> <p>History \u2014 Deal (<code>DealHistoryData</code>)</p> <ul> <li><code>Symbol</code> \u2190 <code>DealHistoryData.symbol</code></li> <li><code>Type</code> \u2190 <code>DealHistoryData.type</code></li> <li><code>Volume</code> \u2190 <code>DealHistoryData.volume</code></li> <li><code>Price</code> \u2190 <code>DealHistoryData.price</code></li> <li><code>Profit</code> \u2190 <code>DealHistoryData.profit</code></li> <li><code>time</code> \u2190 <code>DealHistoryData.time</code></li> </ul> <p>See Specific_Ticket.md \u2192 Proto Reference for full message/enums.</p>"},{"location":"Misc/Ticket_Show/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var ticketCmd = new Command(\"ticket\", \"Work with a specific ticket\");\nticketCmd.AddAlias(\"t\");\n\nvar tShow = new Command(\"show\", \"Show info for the ticket (open or from recent history)\");\ntShow.AddAlias(\"sh\");\n\nvar tOpt    = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Ticket id\") { IsRequired = true };\nvar tDaysOpt= new Option&lt;int&gt;(new[] { \"--days\", \"-d\" }, () =&gt; 30, \"If not open, search in last N days history\");\n\ntShow.AddOption(profileOpt);\ntShow.AddOption(outputOpt);\ntShow.AddOption(tOpt);\ntShow.AddOption(tDaysOpt);\n\ntShow.SetHandler(async (string profile, string output, ulong ticket, int days, int timeoutMs) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    if (days &lt;= 0) throw new ArgumentOutOfRangeException(nameof(days), \"Days must be &gt; 0.\");\n    _selectedProfile = profile;\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:TICKET-SHOW Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket}\", ticket))\n    {\n        await ConnectAsync();\n        // Lookup flow is described in Specific_Ticket.md (tickets \u2192 aggregate \u2192 history)\n    }\n}, profileOpt, outputOpt, tOpt, tDaysOpt, timeoutOpt);\n\nticketCmd.AddCommand(tShow);\nroot.AddCommand(ticketCmd);\n</code></pre>"},{"location":"Orders_Positions/Breakeven/","title":"Breakeven (<code>breakeven</code>) \u2696\ufe0f","text":""},{"location":"Orders_Positions/Breakeven/#what-it-does","title":"What it does","text":"<p>Moves a position\u2019s Stop Loss to breakeven (near the entry price) with an optional offset. Default safety behavior: only improves SL (moves it toward profit). You can override with <code>--force</code>.</p>"},{"location":"Orders_Positions/Breakeven/#method-signatures","title":"Method signatures","text":"<pre><code>// Fetch open positions (and pending orders)\npublic async Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Guess point size for a symbol\npublic double PointGuess(string symbol);\n\n// Ensure a symbol is visible (best-effort prep)\npublic async Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Modify SL/TP for an existing position\npublic async Task&lt;bool&gt; ModifyPositionSlTpAsync(\n    ulong ticket,\n    double? sl,\n    double? tp,\n    CancellationToken ct);\n</code></pre>"},{"location":"Orders_Positions/Breakeven/#input-parameters","title":"Input parameters \u2b07\ufe0f","text":"Parameter Type Description <code>--profile</code>, <code>-p</code> string Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong Required. Position ticket to adjust. <code>--offset</code> double? Offset from entry in price units (e.g., <code>0.0002</code>). <code>--offset-points</code>, <code>-P</code> int? Offset from entry in points (e.g., <code>20</code>). Converted via symbol point size. <code>--force</code> flag Allow move even if it does not improve the current SL. <code>--dry-run</code> flag Calculate and log the target SL without sending a modify request. <code>--timeout-ms</code> int Per-RPC timeout in milliseconds. Default: <code>30000</code>."},{"location":"Orders_Positions/Breakeven/#what-gets-printed","title":"What gets printed \u2b06\ufe0f","text":"<p>Text logs only (no JSON mode). Examples:</p> <pre><code>info: Cmd:BREAKEVEN Profile:demo\ninfo: BREAKEVEN done: ticket=123456 symbol=EURUSD SL=1.09320\n</code></pre> <p>Dry run:</p> <pre><code>[DRY-RUN] BREAKEVEN #123456 EURUSD: SL -&gt; 1.09320\n</code></pre> <p>Failure samples:</p> <pre><code>Position with ticket #123456 not found.              (exit code 2)\nNo improvement: current=1.09320 target=1.09310 ...   (exit code 2)\n</code></pre>"},{"location":"Orders_Positions/Breakeven/#how-it-works","title":"How it works \ud83e\udde0","text":"<ul> <li>BUY: <code>NewSL = Entry + Offset</code></li> <li>SELL: <code>NewSL = Entry - Offset</code></li> <li>Offset source: <code>--offset</code> (price) or <code>--offset-points \u00d7 pointSize</code>.</li> <li>If <code>--force</code> is not set, SL must improve (move toward profit) vs current SL, otherwise the command exits with code <code>2</code>.</li> <li>Best-effort EnsureSymbolVisibleAsync(symbol, \\~3s) before modify.</li> <li>Modify is sent via <code>ModifyPositionSlTpAsync(ticket, SL, TP:null)</code>.</li> </ul>"},{"location":"Orders_Positions/Breakeven/#how-to-use","title":"How to use \ud83d\udee0\ufe0f","text":""},{"location":"Orders_Positions/Breakeven/#cli","title":"CLI","text":"<pre><code># Move SL to exact breakeven\ndotnet run -- breakeven -p demo -t 123456\n\n# Breakeven + 20 points buffer\ndotnet run -- breakeven -p demo -t 123456 --offset-points 20\n\n# Force a non-improving move (use with caution)\ndotnet run -- breakeven -p demo -t 123456 --offset 0.0002 --force\n\n# Preview without changing anything on the server\ndotnet run -- breakeven -p demo -t 123456 --offset 0.0002 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Breakeven/#powershell-shortcut-from-shortcastsps1","title":"PowerShell shortcut (from <code>shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nbe -t 123456 -offsetPts 20   # expands to: mt5 breakeven -p demo -t 123456 --offset-points 20 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Breakeven/#notes-safety","title":"Notes &amp; safety \ud83d\udee1\ufe0f","text":"<ul> <li>Broker stops level / freeze level can reject too-tight SL.</li> <li>For typical 5-digit FX, <code>20</code> points = <code>2</code> pips. Always confirm point size (<code>symbol show</code>).</li> <li>Point size fallback used when unknown: <code>JPY</code> \u2192 <code>0.01</code>, otherwise <code>0.0001</code>.</li> <li>On errors, the process sets a non-zero <code>Environment.ExitCode</code>.</li> </ul>"},{"location":"Orders_Positions/Breakeven/#code-example","title":"Code example \ud83e\udde9","text":"<pre><code>// Options\nvar beTicketOpt       = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket to move SL to breakeven\") { IsRequired = true };\nvar beOffsetPriceOpt  = new Option&lt;double?&gt;(new[] { \"--offset\" }, \"Offset from entry in PRICE units (e.g., 0.0002)\");\nvar beOffsetPointsOpt = new Option&lt;int?&gt;(new[] { \"--offset-points\", \"-P\" }, \"Offset from entry in POINTS\");\nvar beForceOpt        = new Option&lt;bool&gt;(new[] { \"--force\" }, \"Allow worsening SL (by default only improve)\");\n\nvar breakeven = new Command(\"breakeven\", \"Move SL to entry \u00b1 offset (breakeven) for a position\");\nbreakeven.AddAlias(\"be\");\n\nbreakeven.AddOption(profileOpt);\nbreakeven.AddOption(beTicketOpt);\nbreakeven.AddOption(beOffsetPriceOpt);\nbreakeven.AddOption(beOffsetPointsOpt);\nbreakeven.AddOption(beForceOpt);\n\n// Handler (actual signature)\nbreakeven.SetHandler(async (string profile, ulong ticket, double? offsetPrice, int? offsetPoints, bool force, int timeoutMs, bool dryRun) =&gt;\n{\n    if (offsetPrice is not null &amp;&amp; offsetPoints is not null)\n    {\n        Console.WriteLine(\"Use either --offset (price) OR --offset-points, not both.\");\n        Environment.ExitCode = 2;\n        return;\n    }\n    if (offsetPrice is not null &amp;&amp; offsetPrice &lt; 0)   throw new ArgumentOutOfRangeException(nameof(offsetPrice));\n    if (offsetPoints is not null &amp;&amp; offsetPoints &lt; 0) throw new ArgumentOutOfRangeException(nameof(offsetPoints));\n\n    _selectedProfile = profile;\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:BREAKEVEN Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} OffsetPrice:{OffsetPrice} OffsetPoints:{OffsetPoints} Force:{Force}\", ticket, offsetPrice, offsetPoints, force))\n    {\n        try\n        {\n            await ConnectAsync();\n\n            // 1) read positions\n            var opened = await _mt5Account.OpenedOrdersAsync();\n            var pos = opened.PositionInfos.FirstOrDefault(p =&gt;\n                p.Ticket == ticket || unchecked((ulong)p.Ticket) == ticket);\n            if (pos is null)\n            {\n                Console.WriteLine($\"Position with ticket #{ticket} not found.\");\n                Environment.ExitCode = 2;\n                return;\n            }\n\n            var symbol     = pos.Symbol;\n            var entryPrice = pos.PriceOpen;\n\n            // 2) resolve offset to PRICE units\n            double offPrice;\n            if (offsetPrice is not null)\n            {\n                offPrice = offsetPrice.Value;\n            }\n            else if (offsetPoints is not null)\n            {\n                var pointSize = _mt5Account.PointGuess(symbol);\n                if (pointSize &lt;= 0)\n                    pointSize = symbol.EndsWith(\"JPY\", StringComparison.OrdinalIgnoreCase) ? 0.01 : 0.0001;\n                offPrice = offsetPoints.Value * pointSize;\n            }\n            else\n            {\n                offPrice = 0.0; // exact BE\n            }\n\n            // 3) compute target SL\n            bool isLong = IsLongPosition(pos); // project helper\n            var targetSl = isLong ? (entryPrice + offPrice) : (entryPrice - offPrice);\n\n            // 4) improvement check unless --force\n            var currentSl = TryGetDoubleProperty(pos, \"StopLoss\", \"SL\", \"Sl\"); // project helper\n            if (!force &amp;&amp; currentSl is not null)\n            {\n                bool improves = isLong ? targetSl &gt; currentSl.Value\n                                       : targetSl &lt; currentSl.Value;\n                if (!improves)\n                {\n                    Console.WriteLine($\"No improvement: current={currentSl.Value} target={targetSl}. Use --force to override.\");\n                    Environment.ExitCode = 2;\n                    return;\n                }\n            }\n\n            // best-effort: make sure symbol is visible (non-fatal if fails)\n            try { await _mt5Account.EnsureSymbolVisibleAsync(symbol, maxWait: TimeSpan.FromSeconds(3)); } catch { }\n\n            if (dryRun)\n            {\n                Console.WriteLine($\"[DRY-RUN] BREAKEVEN #{ticket} {symbol}: SL -&gt; {targetSl}\");\n                return;\n            }\n\n            // 5) apply change\n            await _mt5Account.ModifyPositionSlTpAsync(ticket, targetSl, null, CancellationToken.None);\n\n            _logger.LogInformation(\"BREAKEVEN done: ticket={Ticket} symbol={Symbol} SL={SL}\", ticket, symbol, targetSl);\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n}, profileOpt, beTicketOpt, beOffsetPriceOpt, beOffsetPointsOpt, beForceOpt, timeoutOpt, dryRunOpt);\n</code></pre>"},{"location":"Orders_Positions/Breakeven/#command-handler-signature-as-wired","title":"Command handler signature (as wired)","text":"<pre><code>(string profile,\n ulong ticket,\n double? offsetPrice,\n int? offsetPoints,\n bool force,\n int timeoutMs,\n bool dryRun) =&gt; Task\n</code></pre>"},{"location":"Orders_Positions/Buy/","title":"Buy (<code>buy</code>) \ud83d\udfe2","text":""},{"location":"Orders_Positions/Buy/#what-it-does","title":"What it Does","text":"<p>Places a market BUY order on MT5 for the selected symbol and volume. Supports optional SL/TP, deviation, timeout, output mode, and dry\u2011run.</p> <pre><code>// Ensure symbol visible (best-effort)\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Market order (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f enum-\u0442\u0438\u043f BUY/SELL; price=null \u0434\u043b\u044f market)\npublic Task&lt;ulong&gt; SendMarketOrderAsync(\n    string symbol,\n    TMT5_ENUM_ORDER_TYPE type,   // e.g., Bmt5OrderTypeBuy\n    double? price,               // null = market\n    double volume,\n    int deviation,\n    double? stopLoss = null,\n    double? takeProfit = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Buy/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Description <code>--profile</code>, <code>-p</code> string Profile from <code>profiles.json</code> to connect with. <code>--symbol</code>, <code>-s</code> string Symbol to trade (e.g., <code>EURUSD</code>). Defaults to app setting. <code>--volume</code>, <code>-v</code> double Trade volume in lots (e.g., <code>0.10</code>). <code>--sl</code> double Stop Loss price (absolute). Optional. <code>--tp</code> double Take Profit price (absolute). Optional. <code>--deviation</code> int Max slippage in points (default: <code>10</code>). <code>--output</code>, <code>-o</code> string <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int Per\u2011RPC timeout in milliseconds (default: <code>30000</code>). <code>--dry-run</code> flag Print action plan without sending an order."},{"location":"Orders_Positions/Buy/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"Field Type Description <code>Ticket</code> ulong Ticket of the created position. <code>Symbol</code> string Traded instrument. <code>Volume</code> double Executed volume. <code>SL</code> double Stop Loss (if set). <code>TP</code> double Take Profit (if set). <code>Status</code> string <code>OK</code> or error text (in error cases)."},{"location":"Orders_Positions/Buy/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Orders_Positions/Buy/#cli","title":"CLI","text":"<pre><code># Minimal\ndotnet run -- buy -p demo -s EURUSD -v 0.10\n\n# With SL/TP and custom deviation\ndotnet run -- buy -p demo -s EURUSD -v 0.10 --sl 1.0950 --tp 1.1050 --deviation 20\n\n# JSON output\ndotnet run -- buy -p demo -s EURUSD -v 0.10 -o json --timeout-ms 60000\n\n# Dry\u2011run (no order will be sent)\ndotnet run -- buy -p demo -s EURUSD -v 0.10 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Buy/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell Shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nb -s EURUSD -v 0.10 --sl 1.0950 --tp 1.1050 -dev 10\n# expands to: mt5 buy -p demo -s EURUSD -v 0.10 --sl 1.0950 --tp 1.1050 --deviation 10 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Buy/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Before sending the order, the app makes a best\u2011effort call to ensure the symbol is visible in Market Watch (<code>EnsureSymbolVisibleAsync</code>).</li> <li><code>--sl</code>/<code>--tp</code> are prices, not distances. They must respect broker stops level and min distance.</li> <li>Use <code>symbol limits</code> to check min/step/max lot sizes before placing orders.</li> <li>If the market is closed or trading is disabled, the broker will reject the request.</li> </ul>"},{"location":"Orders_Positions/Buy/#code-reference","title":"Code Reference\ud83e\udde9","text":"<pre><code>var buy = new Command(\"buy\", \"Market buy\");\nbuy.AddAlias(\"b\");\n\n// options\nbuy.AddOption(profileOpt);\nbuy.AddOption(symbolOpt);\nbuy.AddOption(volumeOpt);\nbuy.AddOption(slOpt);\nbuy.AddOption(tpOpt);\nbuy.AddOption(devOpt);\nbuy.AddOption(outputOpt);\nbuy.AddOption(timeoutOpt);\nbuy.AddOption(dryRunOpt);\n\n// Context-based handler: read all options from ctx.ParseResult\nbuy.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    // Read options\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var symbolOptV= ctx.ParseResult.GetValueForOption(symbolOpt);\n    var volume    = ctx.ParseResult.GetValueForOption(volumeOpt);\n    var sl        = ctx.ParseResult.GetValueForOption(slOpt);\n    var tp        = ctx.ParseResult.GetValueForOption(tpOpt);\n    var deviation = ctx.ParseResult.GetValueForOption(devOpt);\n    var output    = ctx.ParseResult.GetValueForOption(outputOpt) ?? \"text\";\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    // Validate &amp; select profile/symbol/params\n    Validators.EnsureProfile(profile);\n    Validators.EnsureVolume(volume);\n    Validators.EnsureDeviation(deviation);\n\n    var s = Validators.EnsureSymbol(symbolOptV ?? GetOptions().DefaultSymbol);\n    _selectedProfile = profile;\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:BUY Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Symbol:{Symbol}\", s))\n    using (_logger.BeginScope(\"OrderParams Vol:{Vol} Dev:{Dev} SL:{SL} TP:{TP}\", volume, deviation, sl, tp))\n    {\n        if (dryRun)\n        {\n            if (string.Equals(output, \"json\", StringComparison.OrdinalIgnoreCase))\n            {\n                var payload = new {\n                    DryRun = true, Side = \"BUY\", Symbol = s, Volume = volume,\n                    Deviation = deviation, SL = sl, TP = tp\n                };\n                Console.WriteLine(JsonSerializer.Serialize(payload));\n            }\n            else\n            {\n                Console.WriteLine($\"[DRY-RUN] BUY {s} vol={volume} dev={deviation} SL={sl} TP={tp}\");\n            }\n            return;\n        }\n\n        try\n        {\n            await ConnectAsync();\n</code></pre> <p>\ud83d\udccc In short: <code>buy</code> = quick market entry with guardrails (visibility check, retries, single output), and plays nicely with profiles, timeouts, and shortcasts.</p>"},{"location":"Orders_Positions/Cancel/","title":"Cancel (<code>cancel</code>) \ud83d\uddd1\ufe0f","text":"<p>Cancels a pending order by ticket on the selected MT5 account/profile. Use when you want to remove a single Buy/Sell Limit/Stop (including Stop\u2011Limit variants) without touching other orders.</p> <p>This command targets pending orders only. For closing open positions, use close.</p>"},{"location":"Orders_Positions/Cancel/#method-signatures","title":"Method Signatures","text":"<p>Full details live in the MT5Account service. These are the calls the command uses.</p> <pre><code>// (optional) aggregate snapshot to validate the ticket &amp; symbol\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// cancel a pending order by its ticket\npublic Task CancelPendingOrderAsync(\n    ulong ticket,\n    CancellationToken cancellationToken);\n</code></pre>"},{"location":"Orders_Positions/Cancel/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Pending order ticket to cancel. <code>--symbol</code>, <code>-s</code> string yes Safety filter: symbol must match order. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action; no request sent. <p>Note: This command is text\u2011only; <code>--output</code> is not supported.</p>"},{"location":"Orders_Positions/Cancel/#output","title":"Output \u2b06\ufe0f","text":"<p>Text only.</p> <ul> <li>Success: <code>\u2714 cancel done: #&lt;ticket&gt; &lt;SYMBOL&gt;</code></li> <li>Dry\u2011run: <code>[DRY-RUN] CANCEL pending #&lt;ticket&gt; &lt;SYMBOL&gt;</code></li> <li>Not found / not pending / symbol mismatch:   <code>Pending order #&lt;ticket&gt; not found.</code> or <code>Ticket #&lt;ticket&gt; does not belong to &lt;SYMBOL&gt;.</code></li> </ul> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 not found / not pending / symbol mismatch / validation guard</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Cancel/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Orders_Positions/Cancel/#cli","title":"CLI","text":"<pre><code># Cancel a pending order by ticket (with symbol safety)\ndotnet run -- cancel -p demo -t 123456 -s EURUSD\n\n# Dry\u2011run (no request will be sent)\ndotnet run -- cancel -p demo -t 123456 -s EURUSD --dry-run\n</code></pre>"},{"location":"Orders_Positions/Cancel/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell Shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nx -t 123456 -s EURUSD\n# expands to: mt5 cancel -p demo -t 123456 -s EURUSD --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Cancel/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>To remove a single pending order quickly.</li> <li>As part of a cleanup routine without affecting other tickets.</li> <li>Before moving/re\u2011placing a pending at a new price (instead of <code>pending.move</code>).</li> </ul>"},{"location":"Orders_Positions/Cancel/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Verify the ticket really refers to a pending order; brokers reject cancel for already\u2011filled/expired tickets.</li> <li><code>--symbol</code> is an intentional safety guard: the command validates the ticket\u2019s symbol via the open aggregate before cancel.</li> <li>Combine with pending list to find tickets, or with ticket show to inspect details first.</li> </ul>"},{"location":"Orders_Positions/Cancel/#code-reference","title":"Code Reference \ud83e\udde9","text":"<p>This is illustrative. Your actual wiring uses System.CommandLine and common helpers.</p> <pre><code>var cancel = new Command(\"cancel\", \"Cancel (delete) pending order by ticket\");\ncancel.AddAlias(\"x\");\n\nvar cancelTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Pending order ticket\") { IsRequired = true };\nvar cancelSymbolOpt = new Option&lt;string&gt;(new[] { \"--symbol\", \"-s\" }, \"Symbol (e.g., EURUSD)\") { IsRequired = true };\n\ncancel.AddOption(profileOpt);\ncancel.AddOption(cancelTicketOpt);\ncancel.AddOption(cancelSymbolOpt);\ncancel.AddOption(timeoutOpt);\ncancel.AddOption(dryRunOpt);\n\ncancel.SetHandler(async (string profile, ulong ticket, string symbol, int timeoutMs, bool dryRun) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    Validators.EnsureTicket(ticket);\n    symbol = Validators.EnsureSymbol(symbol);\n    _selectedProfile = profile;\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:CANCEL Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} Symbol:{Symbol}\", ticket, symbol))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] CANCEL pending #{ticket} {symbol}\");\n            return;\n        }\n\n        await ConnectAsync();\n        // optional pre-check via aggregate (OpenedOrdersAsync) to assert ticket+symbol\n        await _mt5Account.CancelPendingOrderAsync(ticket, CancellationToken.None);\n        Console.WriteLine($\"\u2714 cancel done: #{ticket} {symbol}\");\n    }\n}, profileOpt, cancelTicketOpt, cancelSymbolOpt, timeoutOpt, dryRunOpt);\n</code></pre>"},{"location":"Orders_Positions/Cancel/#see-also","title":"See also \ud83d\udd17","text":"<ul> <li>pending list \u2014 enumerate current pendings</li> <li>pending.modify \u2014 edit pending parameters</li> <li>pending.move \u2014 shift pending by \u00b1points</li> <li>ticket show \u2014 inspect a ticket (open/history)</li> </ul>"},{"location":"Orders_Positions/Cancel_All/","title":"Cancel All (<code>cancel.all</code>) \ud83e\uddf9","text":"<p>Cancels multiple pending orders in one go. Optional filters by symbol and by pending type.</p> <p>Does not close open positions. For positions use close, close-all, or close-symbol.</p>"},{"location":"Orders_Positions/Cancel_All/#method-signatures","title":"Method Signatures","text":"<pre><code>// Snapshot with detailed items (needed for type filtering)\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Fast ticket list (when you don't need Type info)\npublic Task&lt;IReadOnlyList&lt;ulong&gt;&gt; ListPendingTicketsAsync(\n    string? symbol,\n    CancellationToken cancellationToken);\n\n// Cancel a single pending by ticket\npublic Task CancelPendingOrderAsync(\n    ulong ticket,\n    CancellationToken cancellationToken);\n\n// Best\u2011effort: ensure symbol visible (optional)\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Cancel_All/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--symbol</code>, <code>-s</code> string no Filter: cancel only pendings for this symbol (e.g., <code>EURUSD</code>). <code>--type</code> string no Filter by pending type: <code>any</code> (default), <code>limit</code>, <code>stop</code>, <code>stoplimit</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended actions without sending requests. <p>Note: This command is text\u2011only; <code>--output</code> is not supported.</p>"},{"location":"Orders_Positions/Cancel_All/#output-text","title":"Output \u2b06\ufe0f (text)","text":"<pre><code>CANCEL.ALL targets: &lt;N&gt;  (symbol=&lt;SYM|any&gt;, type=&lt;any|limit|stop|stoplimit&gt;)\n[DRY-RUN] CANCEL #&lt;ticket1&gt;\n[DRY-RUN] CANCEL #&lt;ticket2&gt;\n...\n\u2714 cancel.all done  |  canceled: &lt;ok&gt;/&lt;N&gt;, errors: &lt;fail&gt;\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success (some items may still fail; see counters)</li> <li><code>2</code> \u2014 nothing matched the filters (N=0)</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Cancel_All/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":"<pre><code># Cancel ALL pendings on the account\ndotnet run -- cancel.all -p demo\n\n# Only for EURUSD\ndotnet run -- cancel.all -p demo -s EURUSD\n\n# Only stop/stop\u2011limit types (if supported in your broker mapping)\ndotnet run -- cancel.all -p demo --type stop\n\n# Dry\u2011run (plan only)\ndotnet run -- cancel.all -p demo -s XAUUSD --type limit --dry-run\n</code></pre>"},{"location":"Orders_Positions/Cancel_All/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell Shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nca                    # \u2192 mt5 cancel.all -p demo --timeout-ms 90000\nca -s EURUSD          # \u2192 mt5 cancel.all -p demo --symbol EURUSD --timeout-ms 90000\nca -s XAUUSD -type stop   # \u2192 mt5 cancel.all -p demo --symbol XAUUSD --type stop --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Cancel_All/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Idempotent: re\u2011running after successful cancel should find nothing to cancel.</li> <li>If <code>--symbol</code> is set, it\u2019s safe to best\u2011effort ensure visibility first.</li> <li>Consider rate limits: bulk operations should handle retries gracefully.</li> <li><code>--type</code> relies on your pending type mapping. If unsure, prefer <code>type=any</code>.</li> </ul>"},{"location":"Orders_Positions/Cancel_All/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var pendSymbolOpt = new Option&lt;string?&gt;(new[] { \"--symbol\", \"-s\" }, \"Filter by symbol (optional)\");\nvar pendTypeOpt   = new Option&lt;string?&gt;(new[] { \"--type\" }, \"Filter by type: limit|stop|stoplimit|any (default any)\");\n\nvar cancelAll = new Command(\"cancel.all\", \"Cancel all pending orders (optionally filtered)\");\ncancelAll.AddAlias(\"ca\");\n\ncancelAll.AddOption(profileOpt);\ncancelAll.AddOption(pendSymbolOpt);\ncancelAll.AddOption(pendTypeOpt);\ncancelAll.AddOption(timeoutOpt);\ncancelAll.AddOption(dryRunOpt);\n\ncancelAll.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var symbol    = ctx.ParseResult.GetValueForOption(pendSymbolOpt);\n    var typeStr   = (ctx.ParseResult.GetValueForOption(pendTypeOpt) ?? \"any\").Trim().ToLowerInvariant();\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    if (!string.IsNullOrWhiteSpace(symbol)) _ = Validators.EnsureSymbol(symbol!);\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:CANCEL.ALL Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Filter Symbol:{Symbol} Type:{Type}\", symbol ?? \"&lt;any&gt;\", typeStr))\n    {\n        await ConnectAsync();\n\n        // 1) build candidate set\n        IReadOnlyList&lt;ulong&gt; tickets;\n        if (string.Equals(typeStr, \"any\", StringComparison.Ordinal))\n        {\n            // Fast path: only symbol filter \u2192 use ticket list\n            tickets = await _mt5Account.ListPendingTicketsAsync(symbol, CancellationToken.None);\n        }\n        else\n        {\n            // Need Type info \u2192 use aggregate, then filter by symbol+type\n            var opened = await _mt5Account.OpenedOrdersAsync(cancellationToken: CancellationToken.None);\n            var query = opened.PendingInfos.AsEnumerable();\n            if (!string.IsNullOrWhiteSpace(symbol))\n                query = query.Where(p =&gt; string.Equals(p.Symbol, symbol, StringComparison.OrdinalIgnoreCase));\n\n            query = typeStr switch\n            {\n                \"limit\"     =&gt; query.Where(p =&gt; IsLimit(p.Type)),\n                \"stop\"      =&gt; query.Where(p =&gt; IsStop(p.Type)),\n                \"stoplimit\" =&gt; query.Where(p =&gt; IsStopLimit(p.Type)),\n                _            =&gt; query\n            };\n            tickets = query.Select(p =&gt; p.Ticket).ToArray();\n        }\n\n        var total = tickets.Count;\n        Console.WriteLine($\"CANCEL.ALL targets: {total}  (symbol={symbol ?? \"any\"}, type={typeStr})\");\n        if (total == 0)\n        {\n            // Exit code 2 recommended by the docs policy\n            // Environment.ExitCode = 2; return;\n            return; // let the outer runner set codes if needed\n        }\n\n        if (dryRun)\n        {\n            foreach (var t in tickets.Take(100))\n                Console.WriteLine($\"[DRY-RUN] CANCEL #{t}\");\n            if (tickets.Count &gt; 100)\n                Console.WriteLine($\"... and {tickets.Count - 100} more\");\n            return;\n        }\n\n        // 2) execute\n        int ok = 0, fail = 0;\n        foreach (var t in tickets)\n        {\n            try { await _mt5Account.CancelPendingOrderAsync(t, CancellationToken.None); ok++; }\n            catch (Exception ex) { Console.WriteLine($\"WARN: cancel #{t} failed: {ex.Message}\"); fail++; }\n        }\n\n        Console.WriteLine($\"\\u2714 cancel.all done  |  canceled: {ok}/{total}, errors: {fail}\");\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Cancel_All/#see-also","title":"See also \ud83d\udd17","text":"<ul> <li>pending list \u2014 enumerate current pendings</li> <li>pending.modify \u2014 edit pending parameters</li> <li>pending.move \u2014 shift pending by \u00b1points</li> <li>panic \u2014 cancel pendings + flatten positions (emergency)</li> </ul>"},{"location":"Orders_Positions/Close.half/","title":"Close Half (<code>close.half</code>) \u2702\ufe0f","text":"<p>Closes half of a position\u2019s volume by ticket.</p> <p>This command is a thin alias for <code>close.percent</code> with <code>--pct 50</code>. All validation, printing, and exit codes are inherited from <code>close.percent</code>.</p>"},{"location":"Orders_Positions/Close.half/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket to partially close. <code>--deviation</code> int no Max slippage (points). Default: <code>10</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <p>Note: <code>close.half</code> does not accept <code>--output</code> or <code>--dry-run</code> directly. The handler delegates to <code>close.percent --pct 50</code> and only forwards the options listed above.</p>"},{"location":"Orders_Positions/Close.half/#output","title":"Output \u2b06\ufe0f","text":"<p>Output format and exit codes are the same as in <code>close.percent</code>.</p> <p>During execution you may see an info line:</p> <pre><code>(alias) close.half -&gt; close.percent --pct 50\n</code></pre>"},{"location":"Orders_Positions/Close.half/#how-to-use","title":"How to Use","text":"<pre><code># Close half of position 123456\ndotnet run -- close.half -p demo -t 123456\n\n# With custom slippage\ndotnet run -- close.half -p demo -t 123456 --deviation 20\n\n# With custom timeout\ndotnet run -- close.half -p demo -t 123456 --timeout-ms 60000\n</code></pre>"},{"location":"Orders_Positions/Close.half/#powershell-shortcut-from-psshortcastsps1","title":"PowerShell shortcut (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nch -t 123456\n# expands to: mt5 close.half -p demo -t 123456 --deviation 10 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Close.half/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>Real execution is performed by <code>close.percent</code>. If half-volume doesn\u2019t align with the lot step, rounding is handled by the base command.</li> <li>Brokers may reject too-small residual lots \u2014 check symbol limits.</li> <li><code>--deviation</code> matters in fast markets; widen if you see slippage rejections.</li> </ul>"},{"location":"Orders_Positions/Close.half/#method-signatures","title":"Method Signatures","text":"<p><code>close.half</code> delegates to <code>close.percent</code>, which in turn uses the underlying MT5Account RPCs below. Depending on build, either of the close helpers may be used.</p> <pre><code>// Read open positions to resolve symbol &amp; current volume\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Best\u2011effort: ensure the symbol is visible before trading\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Partial close (variant A \u2014 explicit deviation)\npublic Task ClosePositionPartialAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken cancellationToken);\n\n// Partial close (variant B \u2014 by symbol; deviation handled internally/defaults)\npublic Task CloseOrderByTicketAsync(\n    ulong ticket,\n    string symbol,\n    double volume,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Close.half/#alias-wiring","title":"Alias wiring \ud83e\udde9","text":"<pre><code>ctx.Console.WriteLine(\"(alias) close.half -&gt; close.percent --pct 50\");\n\nawait closePercent.InvokeAsync(new[]\n{\n    \"--profile\",    profile,\n    \"--ticket\",     ticket.ToString(CultureInfo.InvariantCulture),\n    \"--pct\",        \"50\",\n    \"--deviation\",  deviation.ToString(CultureInfo.InvariantCulture),\n    \"--timeout-ms\", timeoutMs.ToString(CultureInfo.InvariantCulture)\n    // Note: --dry-run and --output are NOT forwarded in this alias\n});\n</code></pre>"},{"location":"Orders_Positions/Close.half/#see-also","title":"See also","text":"<ul> <li><code>close.percent</code> \u2014 base command for partial closes</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/Close.partial/","title":"Close Partial (<code>close.partial</code>) \ud83e\ude93","text":"<p>Closes an exact volume (in lots) of a position by ticket.</p> <p>Unlike <code>close.half</code> or <code>close.percent</code>, this command lets you choose the precise number of lots to close.</p>"},{"location":"Orders_Positions/Close.partial/#method-signatures","title":"Method Signatures","text":"<pre><code>// Read open positions (to validate ticket, get symbol/current volume if needed)\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Partial close (variant A \u2014 explicit deviation)\npublic Task ClosePositionPartialAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken cancellationToken);\n\n// Alternative partial close (variant B \u2014 by symbol)\npublic Task CloseOrderByTicketAsync(\n    ulong ticket,\n    string symbol,\n    double volume,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Close.partial/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket to partially close. <code>--volume</code>, <code>-v</code> double yes Exact volume to close (lots). <code>--deviation</code> int no Max slippage (points). Default: <code>10</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending request. <p>Note: This command is text-only; JSON output is not supported by the current handler.</p>"},{"location":"Orders_Positions/Close.partial/#output","title":"Output \u2b06\ufe0f","text":"<p>Examples:</p> <pre><code>[DRY-RUN] CLOSE.PARTIAL ticket=123456 volume=0.03 deviation=10\n\u2714 close.partial done: ticket=123456 closed=0.03\n</code></pre> <p>Errors:</p> <pre><code>Position #123456 not found.          (exit code 2)\nInvalid volume: 0.00                 (exit code 2)\nRPC error: &lt;broker message&gt;          (exit code 1)\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 validation/not found/guard failures</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Close.partial/#how-to-use","title":"How to Use","text":"<pre><code># Close exactly 0.03 lots\ndotnet run -- close.partial -p demo -t 123456 -v 0.03\n\n# With custom slippage\ndotnet run -- close.partial -p demo -t 123456 -v 0.01 --deviation 20\n\n# Dry-run (no request sent)\ndotnet run -- close.partial -p demo -t 123456 -v 0.05 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Close.partial/#powershell-shortcut-from-psshortcastsps1","title":"PowerShell shortcut (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\ncp -t 123456 -v 0.03\n# \u2192 mt5 close.partial -p demo -t 123456 -v 0.03 --deviation 10 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Close.partial/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>The requested volume must comply with symbol min/step/max \u2014 check symbol limits. No auto-rounding is performed by this command.</li> <li>If <code>volume</code> &gt; current position size, the broker will reject the request.</li> <li>Residual volume must remain \u2265 MinLot.</li> <li>RPCs honor <code>--timeout-ms</code> via the operation cancellation token.</li> </ul>"},{"location":"Orders_Positions/Close.partial/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var cpVolumeOpt = new Option&lt;double&gt;(new[] { \"--volume\", \"-v\" }, \"Volume (lots) to close\")\n{\n    IsRequired = true\n};\n\nvar closePartial = new Command(\"close.partial\", \"Partially close a position by ticket\");\nclosePartial.AddAlias(\"cp\");\n\nclosePartial.AddOption(profileOpt);\nclosePartial.AddOption(cpTicketOpt);\nclosePartial.AddOption(cpVolumeOpt);\nclosePartial.AddOption(devOpt);      // deviation in points\nclosePartial.AddOption(timeoutOpt);\nclosePartial.AddOption(dryRunOpt);\n\nclosePartial.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var ticket    = ctx.ParseResult.GetValueForOption(cpTicketOpt);\n    var volume    = ctx.ParseResult.GetValueForOption(cpVolumeOpt);\n    var deviation = ctx.ParseResult.GetValueForOption(devOpt);\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    if (ticket == 0) throw new ArgumentOutOfRangeException(nameof(ticket), \"Ticket must be &gt; 0.\");\n    if (volume &lt;= 0) throw new ArgumentOutOfRangeException(nameof(volume), \"Volume must be &gt; 0.\");\n    // Optional: Validators.EnsureDeviation(deviation);\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:CLOSE.PARTIAL Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} Vol:{Vol} Dev:{Dev}\", ticket, volume, deviation))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] CLOSE.PARTIAL ticket={ticket} volume={volume} deviation={deviation}\");\n            return;\n        }\n\n        await ConnectAsync();\n\n        // (Optional) If you need the symbol for visibility checks or extra guards:\n        // var opened = await _mt5Account.OpenedOrdersAsync();\n        // var pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket);\n        // if (pos is null) { Console.WriteLine($\"Position #{ticket} not found.\"); Environment.ExitCode = 2; return; }\n        // try { await _mt5Account.EnsureSymbolVisibleAsync(pos.Symbol, TimeSpan.FromSeconds(3)); } catch { }\n\n        await _mt5Account.ClosePositionPartialAsync(ticket, volume, deviation, CancellationToken.None);\n        Console.WriteLine($\"\\u2714 close.partial done: ticket={ticket} closed={volume}\");\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Close.partial/#see-also","title":"See also","text":"<ul> <li><code>close.percent</code> \u2014 close by percentage of current volume</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/Close.percent/","title":"Close Percent (<code>close.percent</code>) \ud83c\udfaf%","text":"<p>Closes a percentage of a position\u2019s volume by ticket. Great for scaling\u2011out with rules like \u201ctake 50% at +1R, trail the rest\u201d.</p>"},{"location":"Orders_Positions/Close.percent/#method-signatures","title":"Method Signatures","text":"<pre><code>// Read open positions (resolve ticket \u2192 symbol &amp; current volume)\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Query lot constraints\npublic Task&lt;(double min, double step, double max)&gt; GetVolumeConstraintsAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Best\u2011effort: ensure the symbol is visible before trading\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Partial close (variant A \u2014 explicit deviation)\npublic Task ClosePositionPartialAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken cancellationToken);\n\n// Partial close (variant B \u2014 by symbol; deviation via defaults)\npublic Task CloseOrderByTicketAsync(\n    ulong ticket,\n    string symbol,\n    double volume,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Close.percent/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket to partially close. <code>--pct</code> double no Percentage to close (0 &lt; <code>pct</code> \u2264 100). Default: <code>50</code>. <code>--deviation</code> int no Max slippage (points). Default: <code>10</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending a request. <p>Note: This command is text-only; JSON output is not supported by the current handler.</p>"},{"location":"Orders_Positions/Close.percent/#output","title":"Output \u2b06\ufe0f","text":"<p>Examples:</p> <pre><code>[DRY-RUN] CLOSE.PERCENT ticket=123456 pct=50 volume=0.12 deviation=10\n\u2714 close.percent done: ticket=123456 closed=0.12 (pct=50)\n</code></pre> <p>Errors:</p> <pre><code>Position #123456 not found.                      (exit code 2)\nPercent must be in (0;100].                     (exit code 2)\nComputed close volume below MinLot after step.  (exit code 2)\nRPC error: &lt;broker message&gt;                      (exit code 1)\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 validation/not found/guard failures (including too\u2011small rounded volume)</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Close.percent/#how-to-use","title":"How to Use","text":"<pre><code># Close 50% (default)\ndotnet run -- close.percent -p demo -t 123456\n\n# Close 25% with wider slippage\ndotnet run -- close.percent -p demo -t 123456 --pct 25 --deviation 20\n\n# Dry\u2011run (no request sent)\ndotnet run -- close.percent -p demo -t 123456 --pct 33.3 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Close.percent/#powershell-shortcut-from-psshortcastsps1","title":"PowerShell shortcut (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\ncpp -t 123456 -pct 50\n# \u2192 mt5 close.percent -p demo -t 123456 --pct 50 --deviation 10 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Close.percent/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>The computed close volume is rounded to lot step and clamped to <code>[MinLot; CurrentVolume]</code>.</li> <li>If the rounded result is below MinLot, the broker may reject the request \u2014 consider <code>close.partial</code> to choose a valid lot explicitly.</li> <li><code>pct = 100</code> closes the entire position; behavior is equivalent to full close.</li> <li><code>--deviation</code> matters on fast markets; widen if you see rejections.</li> <li>Use symbol limits to verify <code>min/step/max</code> for your symbol.</li> </ul>"},{"location":"Orders_Positions/Close.percent/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var cpTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket\") { IsRequired = true };\nvar cpPctOpt    = new Option&lt;double&gt;(new[] { \"--pct\" }, () =&gt; 50.0, \"Percent to close (0 &lt; pct \u2264 100)\");\nvar cpDevOpt    = devOpt;\n\nvar closePercent = new Command(\"close.percent\", \"Close a percentage of a position by ticket\");\nclosePercent.AddAlias(\"cpp\");\n\nclosePercent.AddOption(profileOpt);\nclosePercent.AddOption(cpTicketOpt);\nclosePercent.AddOption(cpPctOpt);\nclosePercent.AddOption(cpDevOpt);\nclosePercent.AddOption(timeoutOpt);\nclosePercent.AddOption(dryRunOpt);\n\nclosePercent.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var ticket    = ctx.ParseResult.GetValueForOption(cpTicketOpt);\n    var pct       = ctx.ParseResult.GetValueForOption(cpPctOpt);\n    var deviation = ctx.ParseResult.GetValueForOption(cpDevOpt);\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    Validators.EnsureTicket(ticket);\n    if (pct &lt;= 0 || pct &gt; 100) throw new ArgumentOutOfRangeException(nameof(pct), \"Percent must be in (0;100].\");\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:CLOSE.PERCENT Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} Pct:{Pct} Dev:{Dev}\", ticket, pct, deviation))\n    {\n        await ConnectAsync();\n\n        // 1) Resolve symbol &amp; current volume\n        var opened = await _mt5Account.OpenedOrdersAsync();\n        var pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket || unchecked((ulong)p.Ticket) == ticket);\n        if (pos is null) { Console.WriteLine($\"Position #{ticket} not found.\"); Environment.ExitCode = 2; return; }\n        var symbol = pos.Symbol;\n        var currentVol = pos.Volume;\n\n        // 2) Compute requested close volume\n        var req = currentVol * (pct / 100.0);\n\n        // 3) Normalize to lot constraints\n        var (min, step, max) = await _mt5Account.GetVolumeConstraintsAsync(symbol);\n        double norm = Math.Max(min, Math.Min(currentVol, Math.Floor(req / step + 1e-9) * step));\n        if (norm &lt; min || norm &lt;= 0) { Console.WriteLine(\"Computed close volume below MinLot after step.\"); Environment.ExitCode = 2; return; }\n\n        // 4) Best\u2011effort ensure visibility\n        try { await _mt5Account.EnsureSymbolVisibleAsync(symbol, TimeSpan.FromSeconds(3)); } catch { }\n\n        // 5) Dry\u2011run or execute\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] CLOSE.PERCENT ticket={ticket} pct={pct} volume={norm} deviation={deviation}\");\n            return;\n        }\n\n        await _mt5Account.ClosePositionPartialAsync(ticket, norm, deviation, CancellationToken.None);\n        Console.WriteLine($\"\\u2714 close.percent done: ticket={ticket} closed={norm} (pct={pct})\");\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Close.percent/#see-also","title":"See also","text":"<ul> <li><code>close.half</code> \u2014 close 50% via alias</li> <li><code>close.partial</code> \u2014 close an exact lot amount</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/CloseBy/","title":"CloseBy (<code>closeby</code>) \ud83d\udd01","text":"<p>Closes two opposite positions on the same symbol by emulating MT5 Close By with two separate market closes.</p>"},{"location":"Orders_Positions/CloseBy/#preconditions","title":"Preconditions \u2705","text":"<ul> <li>Two open positions on the same symbol.</li> <li>Positions must be in opposite directions (one BUY, one SELL).</li> <li>Account must allow hedging / opposite positions.</li> </ul>"},{"location":"Orders_Positions/CloseBy/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--a</code>, <code>-a</code> ulong yes Ticket of the first position. <code>--b</code>, <code>-b</code> ulong yes Ticket of the opposite position. <code>--volume</code>, <code>-v</code> double yes Volume (lots) to close on each leg (see notes). <code>--deviation</code> int no Max slippage (points). Default: <code>10</code>. <code>--timeout-ms</code> int no RPC timeout in ms. Default: <code>30000</code>. <code>--dry-run</code> flag no Print the action plan without sending any request. <p>Note: This command is text\u2011only; JSON output is not supported by the current handler.</p>"},{"location":"Orders_Positions/CloseBy/#output","title":"Output \u2b06\ufe0f","text":"<p>Actual handler output (from your <code>Program.cs</code>):</p> <pre><code>[DRY-RUN] CLOSEBY a=&lt;A&gt; b=&lt;B&gt; volume=&lt;VOL&gt; deviation=&lt;DEV&gt;\n\u2714 closeby (emulated) done\n</code></pre> <p>The current implementation prints a single success line and does not include symbol/residual details.</p> <p>Errors (typical):</p> <pre><code>One or both positions not found.                (exit code 2)\nInvalid tickets/volume                          (exit code 2)\nRPC error: &lt;broker message&gt;                     (exit code 1)\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 validation/guard failures</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/CloseBy/#how-to-use","title":"How to Use","text":"<pre><code># Emulate CloseBy for two opposite tickets, 0.10 lots on each leg\ndotnet run -- closeby -p demo -a 123456 -b 654321 -v 0.10\n\n# Custom deviation\ndotnet run -- closeby -p demo -a 111111 -b 222222 -v 0.05 --deviation 20\n\n# Dry\u2011run plan\ndotnet run -- closeby -p demo -a 111111 -b 222222 -v 0.02 --dry-run\n</code></pre> <p>No built\u2011in PowerShell alias in <code>ps/shortcasts.ps1</code>. You can add:</p> <pre><code>function cb { param([ulong]$a,[ulong]$b,[double]$v,[string]$p=$PF,[int]$to=$TO)\n  mt5 closeby -p $p -a $a -b $b -v $v --timeout-ms $to }\n</code></pre>"},{"location":"Orders_Positions/CloseBy/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Non\u2011atomic: two independent closes \u2192 slippage/partial failures possible.</li> <li>Assumptions not enforced by code: the current handler does not validate same\u2011symbol or opposite sides; it simply attempts two partial closes via <code>CloseByEmulatedAsync</code>. Ensure tickets really are opposite legs on the same symbol.</li> <li>Volume clamping: the helper is called with the requested volume; if it exceeds available, the broker will reject. Ensure volume \u2264 min(position volumes).</li> <li>Lot limits: requested volume must comply with min/step/max. See symbol limits.</li> <li>Visibility: some brokers require the symbol to be visible \u2014 best\u2011effort ensure visibility before closing.</li> </ul>"},{"location":"Orders_Positions/CloseBy/#method-signatures","title":"Method Signatures","text":"<pre><code>// Emulated CloseBy (actual signature in your MT5Account.cs)\npublic Task CloseByEmulatedAsync(\n    ulong ticketA,\n    ulong ticketB,\n    double volume,\n    int deviation,\n    CancellationToken ct);\n\n// Also used around it in other commands (not strictly required here):\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;(double min, double step, double max)&gt; GetVolumeConstraintsAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/CloseBy/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>closeby.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var a         = ctx.ParseResult.GetValueForOption(cbATicketOpt);\n    var b         = ctx.ParseResult.GetValueForOption(cbBTicketOpt);\n    var volume    = ctx.ParseResult.GetValueForOption(cbVolOpt);\n    var deviation = ctx.ParseResult.GetValueForOption(cbDevOpt);\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    if (a == 0 || b == 0) throw new ArgumentOutOfRangeException(\"tickets\", \"Tickets must be &gt; 0.\");\n    if (volume &lt;= 0) throw new ArgumentOutOfRangeException(nameof(volume), \"Volume must be &gt; 0.\");\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:CLOSEBY Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"A:{A} B:{B} Vol:{Vol} Dev:{Dev}\", a, b, volume, deviation))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] CLOSEBY a={a} b={b} volume={volume} deviation={deviation}\");\n            return;\n        }\n\n        try\n        {\n            await ConnectAsync();\n            using var opCts = StartOpCts();\n\n            await CallWithRetry(ct =&gt; _mt5Account.CloseByEmulatedAsync(a, b, volume, deviation, ct), opCts.Token);\n\n            Console.WriteLine(\"\u2714 closeby (emulated) done\");\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { /* ignore */ }\n        }\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/CloseBy/#see-also","title":"See also","text":"<ul> <li><code>close.partial</code> \u2014 close an exact lot amount per position</li> <li><code>close.percent</code> \u2014 close a percentage of current volume</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/Modify/","title":"Modify (<code>modify</code>) \u270f\ufe0f","text":"<p>Updates Stop Loss and/or Take Profit for a position by ticket.</p> <p>This command is text-only (no JSON). At least one of <code>--sl</code> or <code>--tp</code> must be provided.</p>"},{"location":"Orders_Positions/Modify/#method-signatures","title":"Method Signatures","text":"<pre><code>// Ensure a symbol is visible (best\u2011effort prep)\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Modify SL/TP for an existing position\npublic Task&lt;bool&gt; ModifyPositionSlTpAsync(\n    ulong ticket,\n    double? sl,\n    double? tp,\n    CancellationToken ct);\n\n// (Optional) Read open positions if you want to log current SL/TP before changes\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Modify/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket to modify. <code>--sl</code> double? no New Stop Loss price (absolute). <code>--tp</code> double? no New Take Profit price (absolute). <code>--symbol</code>, <code>-s</code> string? no Optional symbol (used to ensure visibility on some servers). <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending the request. <p>Validation rule: <code>--sl</code> or <code>--tp</code> must be specified (one or both). If both are omitted, the command fails fast.</p>"},{"location":"Orders_Positions/Modify/#output","title":"Output \u2b06\ufe0f","text":"<p>Examples:</p> <pre><code>[DRY-RUN] MODIFY #123456 SL=1.0900 TP=1.1100\n\u2714 modify done: ticket=123456 SL=1.0900 TP=1.1100\n</code></pre> <p>Errors (examples):</p> <pre><code>At least one of --sl/--tp must be provided.  (exit code 2)\nPosition #123456 not found.                  (exit code 2)\nRPC error: &lt;broker message&gt;                  (exit code 1)\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 validation / guard failures</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Modify/#how-to-use","title":"How to Use","text":"<pre><code># Set both SL and TP\ndotnet run -- modify -p demo -t 123456 --sl 1.0950 --tp 1.1050\n\n# Only SL\ndotnet run -- modify -p demo -t 123456 --sl 1.0900\n\n# With symbol visibility (some servers require it)\ndotnet run -- modify -p demo -t 123456 --sl 1.0900 -s EURUSD\n\n# Dry-run\ndotnet run -- modify -p demo -t 123456 --tp 1.1100 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Modify/#powershell-shortcut-from-psshortcastsps1","title":"PowerShell Shortcut (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nposmod -t 123456 -sl 1.0900 -tp 1.1100\n# expands to: mt5 position.modify -p demo -t 123456 --sl 1.0900 --tp 1.1100 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Modify/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li><code>--sl</code> / <code>--tp</code> are prices (not distances). They must respect broker StopsLevel (min distance) and freeze levels.</li> <li>Some servers require the symbol to be visible in Market Watch; pass <code>-s EURUSD</code> to let the app perform a best\u2011effort ensure\u2011visible.</li> <li>The command does not auto\u2011normalize SL/TP to tick size \u2014 provide valid prices for your symbol.</li> <li>On errors, the process sets a non\u2011zero <code>Environment.ExitCode</code>.</li> </ul>"},{"location":"Orders_Positions/Modify/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var modify = new Command(\"modify\", \"Modify StopLoss / TakeProfit by ticket\");\nmodify.AddAlias(\"m\");\n\nvar modTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Ticket to modify\") { IsRequired = true };\nvar modSlOpt     = new Option&lt;double?&gt;(\"--sl\", \"New Stop Loss (price)\");\nvar modTpOpt     = new Option&lt;double?&gt;(\"--tp\", \"New Take Profit (price)\");\nvar modSymbolOpt = new Option&lt;string?&gt;(new[] { \"--symbol\", \"-s\" }, \"Symbol (optional; used to ensure visibility if needed)\");\n\nmodify.AddOption(profileOpt);\nmodify.AddOption(modTicketOpt);\nmodify.AddOption(modSlOpt);\nmodify.AddOption(modTpOpt);\nmodify.AddOption(modSymbolOpt);\nmodify.AddOption(timeoutOpt);\nmodify.AddOption(dryRunOpt);\n\nmodify.SetHandler(async (string profile, ulong ticket, double? sl, double? tp, string? symbol, int timeoutMs, bool dryRun) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    if (sl is null &amp;&amp; tp is null)\n    {\n        Console.WriteLine(\"At least one of --sl/--tp must be provided.\");\n        Environment.ExitCode = 2;\n        return;\n    }\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:MODIFY Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} SL:{SL} TP:{TP}\", ticket, sl, tp))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] MODIFY #{ticket} SL={sl} TP={tp}\");\n            return;\n        }\n\n        try\n        {\n            await ConnectAsync();\n\n            // Best\u2011effort ensure visibility\n            if (!string.IsNullOrWhiteSpace(symbol))\n            {\n                try { await _mt5Account.EnsureSymbolVisibleAsync(symbol!, TimeSpan.FromSeconds(3)); } catch { }\n            }\n\n            await _mt5Account.ModifyPositionSlTpAsync(ticket, sl, tp, CancellationToken.None);\n            Console.WriteLine($\"\\u2714 modify done: ticket={ticket} SL={sl} TP={tp}\");\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n}, profileOpt, modTicketOpt, modSlOpt, modTpOpt, modSymbolOpt, timeoutOpt, dryRunOpt);\n</code></pre>"},{"location":"Orders_Positions/Modify/#see-also","title":"See also","text":"<ul> <li><code>Position.modify.points</code> \u2014 move SL/TP by \u00b1N points</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/Orders/","title":"Orders (<code>orders</code>) \ud83d\udccb","text":"<p>Lists all currently opened pending order tickets and opened position tickets for the selected profile/account.</p>"},{"location":"Orders_Positions/Orders/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;OpenedOrdersTicketsData&gt; OpenedOrdersTicketsAsync(\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Orders/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--output</code>, <code>-o</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>)."},{"location":"Orders_Positions/Orders/#output","title":"Output \u2b06\ufe0f","text":""},{"location":"Orders_Positions/Orders/#text-mode","title":"Text mode","text":"<pre><code>Opened orders:   N\n1111111, 2222222, ...\nOpened positions: M\n3333333, 4444444, ...\n</code></pre> <ul> <li>Shows counts and lists tickets.</li> <li>For &gt;20 items per bucket, prints first 20 then appends <code>...</code>.</li> </ul>"},{"location":"Orders_Positions/Orders/#json-mode","title":"JSON mode","text":"<pre><code>{\n  \"OpenedOrdersTickets\": [1111111, 2222222],\n  \"OpenedPositionTickets\": [3333333, 4444444]\n}\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Orders/#how-to-use","title":"How to Use","text":"<pre><code># Default text mode\ndotnet run -- orders -p demo\n\n# JSON mode\ndotnet run -- orders -p demo -o json\n</code></pre>"},{"location":"Orders_Positions/Orders/#powershell-shortcut-from-psshortcastsps1","title":"PowerShell Shortcut (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nord   # \u2192 mt5 orders -p demo --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Orders/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>This command returns ticket IDs only. Use ticket show to inspect details for a specific ticket.</li> <li>If there are no open items, both lists are empty and counts are <code>0</code>.</li> <li>Handy for scripts to quickly enumerate active tickets and feed them to further operations (<code>close</code>, <code>modify</code>, etc.).</li> </ul>"},{"location":"Orders_Positions/Orders/#proto","title":"Proto","text":"<pre><code>message OpenedOrdersTicketsData {\n  repeated int64 opened_orders_tickets = 1;\n  repeated int64 opened_position_tickets = 2;\n}\n</code></pre>"},{"location":"Orders_Positions/Orders/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var orders = new Command(\"orders\", \"List open orders and positions tickets\");\norders.AddAlias(\"ord\");\n\norders.AddOption(profileOpt);\norders.AddOption(outputOpt);\norders.AddOption(timeoutOpt);\n\norders.SetHandler(async (string profile, string output, int timeoutMs) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    _selectedProfile = profile;\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:ORDERS Profile:{Profile}\", profile))\n    {\n        try\n        {\n            await ConnectAsync();\n\n            var res = await _mt5Account.OpenedOrdersTicketsAsync();\n            var orders = res.OpenedOrdersTickets?.Select(x =&gt; unchecked((ulong)x)).ToArray() ?? Array.Empty&lt;ulong&gt;();\n            var positions = res.OpenedPositionTickets?.Select(x =&gt; unchecked((ulong)x)).ToArray() ?? Array.Empty&lt;ulong&gt;();\n\n            if (IsJson(output))\n            {\n                Console.WriteLine(ToJson(new {\n                    OpenedOrdersTickets = orders,\n                    OpenedPositionTickets = positions\n                }));\n                return;\n            }\n\n            // text mode\n            Console.WriteLine($\"Opened orders:   {orders.Length}\");\n            if (orders.Length &gt; 0)\n            {\n                var head = string.Join(\", \", orders.Take(20));\n                Console.WriteLine(orders.Length &gt; 20 ? head + \", ...\" : head);\n            }\n\n            Console.WriteLine($\"Opened positions: {positions.Length}\");\n            if (positions.Length &gt; 0)\n            {\n                var head = string.Join(\", \", positions.Take(20));\n                Console.WriteLine(positions.Length &gt; 20 ? head + \", ...\" : head);\n            }\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n}, profileOpt, outputOpt, timeoutOpt);\n</code></pre>"},{"location":"Orders_Positions/Orders/#see-also","title":"See also","text":"<ul> <li><code>ticket show</code> \u2014 inspect a specific ticket (open or from recent history)</li> <li><code>pending list</code> \u2014 list pending orders with details</li> <li><code>positions</code> \u2014 list open positions with details</li> </ul>"},{"location":"Orders_Positions/Orders_Positions_Overview/","title":"Orders &amp; Positions Overview \u2696\ufe0f","text":"<p>This section documents all commands for trading operations \u2014 placing, modifying, closing, reversing, and managing orders/positions.</p> <p>\u26a0\ufe0f Related commands:</p> <ul> <li>Breakeven \u2192 move SL to breakeven.</li> <li>Buy \u2192 open market buy order.</li> <li>Cancel \u2192 cancel (delete) pending order by ticket.</li> <li>Cancel_All \u2192 cancel all pending orders (with filters).</li> <li>Close.half \u2192 close half of the position.</li> <li>Close.partial \u2192 close by exact volume.</li> <li>Close.percent \u2192 close by percent of position.</li> <li>CloseBy \u2192 close a position by another opposite one.</li> <li>Modify \u2192 modify SL/TP by ticket.</li> <li>Orders \u2192 list open orders and positions tickets.</li> <li>Partial-close \u2192 partially close a position.</li> <li>Pending \u2192 pending orders utilities.</li> <li>Place \u2192 place a pending order.</li> <li>Position.modify \u2192 modify SL/TP of a position.</li> <li>Position.modify.points \u2192 set SL/TP by distance in points.</li> <li>Positions \u2192 list active positions.</li> <li>Sell \u2192 open market sell order.</li> <li>Trail.start \u2192 start local trailing stop.</li> <li>Trail.stop \u2192 stop local trailing stop.</li> </ul>"},{"location":"Orders_Positions/Orders_Positions_Overview/#covered-commands","title":"\ud83d\udccc Covered Commands","text":"Command Alias Purpose <code>buy</code> <code>b</code> Place market buy order. <code>sell</code> <code>s</code> Place market sell order. <code>close</code> <code>c</code> Close a specific position/order by ticket. <code>close-all</code> <code>flatten</code> Close all positions/orders (with optional filters). <code>close-symbol</code> <code>cs</code> Close all positions/orders for a specific symbol. <code>close.partial</code> <code>cp</code> Close part of a position by exact volume. <code>close.percent</code> <code>cpp</code> Close part of a position by percentage. <code>close.half</code> <code>ch</code> Special shortcut: close half of a position. <code>closeby</code> \u2014 Close position A using opposite position B (emulated). <code>modify</code> <code>m</code> Modify SL/TP for a position by ticket. <code>position.modify</code> <code>posmod</code> Modify SL/TP by exact price. <code>position.modify.points</code> <code>pmp</code> Modify SL/TP using point distance (from entry/market). <code>orders</code> <code>ord</code> List open order &amp; position tickets. <code>positions</code> <code>pos</code> List active positions with details. <code>pending</code> <code>pd</code> Utilities for pending orders (list, manage). <code>place</code> <code>pl</code> Place pending order (limit/stop/stop-limit). <code>cancel</code> <code>x</code> Cancel (delete) a pending order by ticket. <code>cancel.all</code> <code>ca</code> Cancel all pending orders (with optional filters). <code>reverse</code> <code>rv</code> Reverse all positions for a symbol. <code>reverse.ticket</code> <code>rvt</code> Reverse a specific position by ticket. <code>breakeven</code> <code>be</code> Move SL to entry (with optional offset). <code>trail.start</code> \u2014 Start local trailing stop for a position. <code>trail.stop</code> \u2014 Stop local trailing stop for a position."},{"location":"Orders_Positions/Orders_Positions_Overview/#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>Scalping / day-trading \u2192 Fast market <code>buy</code> / <code>sell</code> with optional SL/TP.</li> <li>Risk management \u2192 <code>modify</code>, <code>position.modify</code>, <code>breakeven</code>, <code>trail.start</code>.</li> <li>Portfolio actions \u2192 <code>close-all</code>, <code>flatten</code>, <code>reverse</code>.</li> <li>Pending strategies \u2192 <code>place</code>, <code>pending</code>, <code>cancel.all</code>.</li> <li>Position tuning \u2192 <code>close.partial</code>, <code>close.percent</code>, <code>close.half</code>.</li> </ul>"},{"location":"Orders_Positions/Orders_Positions_Overview/#related-sections","title":"\ud83d\udd17 Related Sections","text":"<ul> <li>History \u2192 for historical orders/trades.</li> <li>Market Data \u2192 for quotes, symbol settings.</li> <li>Misc \u2192 for ticket utilities and extra tools.</li> </ul> <p>This overview serves as a map of all trading actions. Each command has its own dedicated doc with usage, parameters, and examples.</p>"},{"location":"Orders_Positions/Partial-close/","title":"Partial Close (<code>partial-close</code>) \u2702\ufe0f","text":"<p>Closes part of an open position by ticket. You can specify either:</p> <ul> <li>an exact volume in lots, or</li> <li>a percentage of the current position volume.</li> </ul> <p>Convenience command. For dedicated variants see <code>close.partial</code> (exact lots) and <code>close.percent</code> (by %).</p>"},{"location":"Orders_Positions/Partial-close/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket. <code>--percent</code>, <code>-P</code> int? no Percent of current volume to close (1\u2013100). <code>--volume</code>, <code>-v</code> double? no Exact volume (lots) to close. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending the request. <p>Rule: exactly one of <code>--percent</code> or <code>--volume</code> must be provided.</p>"},{"location":"Orders_Positions/Partial-close/#output-text-exit-codes","title":"Output (text) &amp; Exit Codes \u2b06\ufe0f","text":"<p>Examples:</p> <pre><code>[DRY-RUN] PARTIAL-CLOSE #123456 pct=50 \u2192 vol=0.12\n\u2714 partial-close done: ticket=123456 closed=0.12\n</code></pre> <p>Errors:</p> <pre><code>Provide exactly one of --percent or --volume.  (exit code 2)\nPosition #123456 not found.                    (exit code 2)\nComputed close volume below MinLot after step. (exit code 2)\nRPC error: &lt;broker message&gt;                    (exit code 1)\n</code></pre> <p>Exit codes</p> <ul> <li><code>0</code> \u2014 success</li> <li><code>2</code> \u2014 validation/guard failures</li> <li><code>1</code> \u2014 fatal error (printed via ErrorPrinter)</li> </ul>"},{"location":"Orders_Positions/Partial-close/#how-to-use","title":"How to Use","text":"<pre><code># Close 50% of position\ndotnet run -- partial-close -p demo -t 123456 -P 50\n\n# Close exactly 0.02 lots\ndotnet run -- partial-close -p demo -t 123456 -v 0.02\n\n# Dry-run\ndotnet run -- partial-close -p demo -t 123456 -P 25 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Partial-close/#powershell-shortcut-optional","title":"PowerShell shortcut (optional)","text":"<pre><code>function pc { param([ulong]$t,[int]$P,[double]$v,[string]$p=$PF,[int]$to=$TO)\n  if ($PSBoundParameters.ContainsKey('P')) { mt5 'partial-close' -p $p -t $t -P $P --timeout-ms $to }\n  elseif ($PSBoundParameters.ContainsKey('v')) { mt5 'partial-close' -p $p -t $t -v $v --timeout-ms $to }\n}\n</code></pre>"},{"location":"Orders_Positions/Partial-close/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>If <code>--volume</code> exceeds current position size, it is clamped to the maximum available.</li> <li>Percent path uses <code>currentVol * pct/100</code>. The result is rounded down to lot step and clamped to <code>[MinLot; currentVol]</code>.</li> <li>Some brokers require the symbol to be visible; the implementation best\u2011effort ensures visibility based on the ticket\u2019s symbol.</li> <li>Works on positions only. For pendings use <code>cancel</code>.</li> <li>Use symbol limits to check <code>min/step/max</code> for your symbol.</li> </ul>"},{"location":"Orders_Positions/Partial-close/#method-signatures","title":"Method Signatures","text":"<pre><code>// Resolve ticket \u2192 symbol &amp; current volume\npublic Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Lot constraints\npublic Task&lt;(double min, double step, double max)&gt; GetVolumeConstraintsAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Ensure symbol visibility (best\u2011effort)\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Partial close (deviation is fixed internally for this wrapper)\npublic Task ClosePositionPartialAsync(\n    ulong ticket,\n    double volume,\n    int deviation,\n    CancellationToken cancellationToken);\n</code></pre>"},{"location":"Orders_Positions/Partial-close/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var pcTicketOpt  = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket to partially close\") { IsRequired = true };\nvar pcPercentOpt = new Option&lt;int?&gt;(new[] { \"--percent\", \"-P\" }, \"Percent of current volume to close (1..100)\");\nvar pcVolumeOpt  = new Option&lt;double?&gt;(new[] { \"--volume\", \"-v\" }, \"Exact volume to close (lots)\");\n\nvar pclose = new Command(\"partial-close\", \"Partially close a position by ticket\");\npclose.AddAlias(\"pc\");\n\npclose.AddOption(profileOpt);\npclose.AddOption(pcTicketOpt);\npclose.AddOption(pcPercentOpt);\npclose.AddOption(pcVolumeOpt);\npclose.AddOption(timeoutOpt);\npclose.AddOption(dryRunOpt);\n\npclose.SetHandler(async (string profile, ulong ticket, int? percent, double? volume, int timeoutMs, bool dryRun) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    if ((percent is null &amp;&amp; volume is null) || (percent is not null &amp;&amp; volume is not null))\n    {\n        Console.WriteLine(\"Provide exactly one of --percent or --volume.\");\n        Environment.ExitCode = 2; return;\n    }\n    if (percent is not null &amp;&amp; (percent &lt;= 0 || percent &gt; 100))\n        throw new ArgumentOutOfRangeException(nameof(percent), \"Percent must be in (0;100].\");\n    if (volume is not null &amp;&amp; volume &lt;= 0)\n        throw new ArgumentOutOfRangeException(nameof(volume), \"Volume must be &gt; 0.\");\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:PARTIAL-CLOSE Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} Pct:{Pct} Vol:{Vol}\", ticket, percent, volume))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine(percent is not null\n                ? $\"[DRY-RUN] PARTIAL-CLOSE #{ticket} pct={percent}\"\n                : $\"[DRY-RUN] PARTIAL-CLOSE #{ticket} vol={volume}\");\n            return;\n        }\n\n        try\n        {\n            await ConnectAsync();\n\n            // 1) resolve symbol &amp; current volume\n            var opened = await _mt5Account.OpenedOrdersAsync();\n            var pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket || unchecked((ulong)p.Ticket) == ticket);\n            if (pos is null) { Console.WriteLine($\"Position #{ticket} not found.\"); Environment.ExitCode = 2; return; }\n\n            var symbol = pos.Symbol;\n            var currentVol = pos.Volume;\n\n            // 2) compute requested\n            double req = volume ?? currentVol * (percent!.Value / 100.0);\n\n            // 3) normalize by symbol constraints\n            var (min, step, max) = await _mt5Account.GetVolumeConstraintsAsync(symbol);\n            double eff = Math.Max(min, Math.Min(currentVol, Math.Floor(req / step + 1e-9) * step));\n            if (eff &lt; min || eff &lt;= 0) { Console.WriteLine(\"Computed close volume below MinLot after step.\"); Environment.ExitCode = 2; return; }\n\n            // 4) best\u2011effort visibility\n            try { await _mt5Account.EnsureSymbolVisibleAsync(symbol, TimeSpan.FromSeconds(3)); } catch { }\n\n            // 5) execute (fixed deviation = 10 for this wrapper)\n            await _mt5Account.ClosePositionPartialAsync(ticket, eff, deviation: 10, CancellationToken.None);\n            Console.WriteLine($\"\\u2714 partial-close done: ticket={ticket} closed={eff}\");\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n}, profileOpt, pcTicketOpt, pcPercentOpt, pcVolumeOpt, timeoutOpt, dryRunOpt);\n</code></pre>"},{"location":"Orders_Positions/Partial-close/#see-also","title":"See also","text":"<ul> <li><code>close.partial</code> \u2014 close an exact lot amount</li> <li><code>close.percent</code> \u2014 close a percentage of current volume</li> <li><code>symbol limits</code> \u2014 min/step/max lot constraints</li> </ul>"},{"location":"Orders_Positions/Pending/","title":"Pending (<code>pending</code>) \ud83d\udd52","text":"<p>Utilities for working with pending orders. The group currently exposes:</p> <ul> <li><code>pending list</code> \u2014 list current pending orders with details (type, symbol, price, SL/TP, expiration).</li> <li>See also: <code>Pending.modify</code> and <code>Pending.move</code> for editing/moving pendings.</li> </ul> <p>\u2139\ufe0f If you only need ticket IDs, use the top\u2011level <code>orders</code> command (it prints tickets for both pendings and positions). The built\u2011in <code>pending list</code> here prints detailed rows, not tickets\u2011only.</p>"},{"location":"Orders_Positions/Pending/#subcommand-pending-list-ls","title":"Subcommand: <code>pending list</code> (<code>ls</code>)","text":"<p>Lists all current pending orders for the selected profile/account.</p>"},{"location":"Orders_Positions/Pending/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--output</code>, <code>-o</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>). <p>PowerShell shortcut in <code>ps/shortcasts.ps1</code>: <code>pdls</code> expands to <code>mt5 pending list -p &lt;profile&gt; --timeout-ms 90000</code>.</p>"},{"location":"Orders_Positions/Pending/#output","title":"Output \u2b06\ufe0f","text":"<p>Text mode (preview up to 50 rows):</p> <pre><code>Pending orders (N):\n#&lt;ticket&gt;  &lt;type&gt;  &lt;symbol&gt;  vol=&lt;lots&gt;  price=&lt;p&gt;  SL=&lt;sl&gt;  TP=&lt;tp&gt;  exp=&lt;iso-or-\u2013&gt;\n...\n</code></pre> <p>JSON mode:</p> <ul> <li>Raw payload: array from <code>OpenedOrdersData.PendingInfos</code> (fields depend on your proto/build).</li> </ul>"},{"location":"Orders_Positions/Pending/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>List may be empty if all orders were filled/expired.</li> <li>For cancellation: use <code>Cancel</code> or <code>Cancel_All</code>.</li> <li>For precise price shifts by points: <code>Pending.move</code>.</li> </ul>"},{"location":"Orders_Positions/Pending/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Pending/#proto-reference","title":"Proto reference","text":"<pre><code>message OpenedOrdersData {\n  repeated OpenedOrderInfo opened_orders = 1;\n  repeated PositionInfo    position_infos = 2;\n}\n</code></pre>"},{"location":"Orders_Positions/Pending/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>await ConnectAsync();\n\nvar opened   = await _mt5Account.OpenedOrdersAsync();\nvar pendings = opened.PendingInfos; // your build exposes this collection\n\nif (IsJson(output))\n{\n    Console.WriteLine(ToJson(pendings));\n}\nelse\n{\n    if (pendings.Count == 0) { Console.WriteLine(\"No pending orders.\"); return; }\n    Console.WriteLine($\"Pending orders ({pendings.Count}):\");\n    foreach (var p in pendings.Take(50))\n        Console.WriteLine($\"#{p.Ticket}  {p.Type}  {p.Symbol}  vol={p.Volume}  price={p.Price}  SL={p.StopLoss}  TP={p.TakeProfit}  exp={p.Expiration}\");\n}\n</code></pre>"},{"location":"Orders_Positions/Pending/#see-also","title":"See also","text":"<ul> <li><code>Pending_List</code> \u2014 standalone page for this subcommand (user\u2011facing)</li> <li><code>Pending.modify</code> \u2014 set exact prices/SL/TP/TIF</li> <li><code>Pending.move</code> \u2014 shift prices by \u00b1N points</li> <li><code>Cancel</code>, <code>Cancel_All</code></li> <li><code>Ticket_Show</code> \u2014 inspect a specific ticket</li> </ul>"},{"location":"Orders_Positions/Place/","title":"Place (<code>place</code>) \ud83e\uddf1","text":"<p>Places a pending order. Supports Limit, Stop, and Stop\u2011Limit types, optional SL/TP, and TIF/expiry.</p> <p>Market orders are not handled here \u2014 use Buy / Sell.</p>"},{"location":"Orders_Positions/Place/#supported-types","title":"Supported Types","text":"<p><code>buylimit</code>, <code>selllimit</code>, <code>buystop</code>, <code>sellstop</code>, <code>buystoplimit</code>, <code>sellstoplimit</code></p>"},{"location":"Orders_Positions/Place/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--symbol</code>, <code>-s</code> string no Symbol (e.g., <code>EURUSD</code>). Defaults to app option <code>DefaultSymbol</code>. <code>--volume</code>, <code>-v</code> double yes Volume in lots. <code>--type</code> string yes One of supported types above. <code>--price</code> double? no Entry price for Limit/Stop (not for Stop\u2011Limit). <code>--stop</code> double? no Trigger price for Stop\u2011Limit. <code>--limit</code> double? no Limit price for Stop\u2011Limit. <code>--tif</code> string? no Time\u2011in\u2011force: <code>GTC</code> <code>DAY</code> <code>GTD</code> (aliases: <code>SPECIFIED</code>, <code>SPECIFIED_DAY</code> \u2192 GTD). <code>--expire</code> DateTimeOffset? no Expiry (ISO\u20118601) when <code>--tif=GTD</code>. <code>--sl</code> double? no Stop Loss price. <code>--tp</code> double? no Take Profit price. <code>--timeout-ms</code> int no Per\u2011RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending a request."},{"location":"Orders_Positions/Place/#validation-rules","title":"Validation Rules","text":"<ul> <li> <p>Stop\u2011Limit (<code>buystoplimit</code>/<code>sellstoplimit</code>):</p> </li> <li> <p><code>--stop</code> and <code>--limit</code> required; do not pass <code>--price</code>.</p> </li> <li>Buy Stop\u2011Limit: <code>limit \u2264 stop</code>; Sell Stop\u2011Limit: <code>limit \u2265 stop</code>.</li> <li> <p>Limit/Stop (<code>buylimit</code>/<code>selllimit</code>/<code>buystop</code>/<code>sellstop</code>):</p> </li> <li> <p><code>--price</code> is required and must be <code>&gt; 0</code>.</p> </li> <li>TIF: if <code>--tif=GTD</code>, then <code>--expire</code> is required.</li> </ul>"},{"location":"Orders_Positions/Place/#output","title":"Output \u2b06\ufe0f","text":"<ul> <li>Text log only, e.g.: <code>PLACE done: ticket=&lt;id&gt;</code></li> <li>Exit codes: <code>0</code> success; <code>2</code> not supported/validation; <code>1</code> fatal error (printed via ErrorPrinter).</li> </ul>"},{"location":"Orders_Positions/Place/#how-to-use","title":"How to Use","text":"<pre><code># Buy Limit @ 1.0950 (0.10 lots)\ndotnet run -- place -p demo -s EURUSD -v 0.10 --type buylimit --price 1.0950 --sl 1.0900 --tp 1.1000\n\n# Sell Stop @ 1.0900 for today (DAY)\ndotnet run -- place -p demo -s EURUSD -v 0.20 --type sellstop --price 1.0900 --tif DAY\n\n# Stop\u2011Limit: trigger 1.1000, limit 1.0995 (GTD)\ndotnet run -- place -p demo -s EURUSD -v 0.10 --type buystoplimit --stop 1.1000 --limit 1.0995 --tif GTD --expire 2025-09-30T15:00:00Z\n\n# Dry\u2011run (no request)\ndotnet run -- place -p demo -s EURUSD -v 0.10 --type buystop --price 1.1000 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Place/#notes-safety","title":"Notes &amp; Safety","text":"<ul> <li>Best\u2011effort EnsureSymbolVisibleAsync (\u22483s) before placing to avoid \"symbol not selected\".</li> <li><code>--sl</code>/<code>--tp</code> are prices; must respect broker StopsLevel / min distance.</li> <li><code>volume</code> must respect min/step/max \u2014 see symbol limits.</li> <li>If server doesn\u2019t support a type/TIF, a descriptive error is printed.</li> </ul>"},{"location":"Orders_Positions/Place/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task EnsureSymbolVisibleAsync(string symbol, TimeSpan? maxWait = null, TimeSpan? pollInterval = null, DateTime? deadline = null, CancellationToken cancellationToken = default);\n\npublic Task&lt;ulong&gt; PlacePendingOrderAsync(\n    string symbol,\n    string type,    // buylimit|selllimit|buystop|sellstop\n    double volume,\n    double price,   // entry price for limit/stop\n    double? sl,\n    double? tp,\n    string? tif,    // GTC|DAY|GTD (aliases SPECIFIED, SPECIFIED_DAY)\n    DateTimeOffset? expire,\n    CancellationToken ct);\n\npublic Task&lt;ulong&gt; PlaceStopLimitOrderAsync(\n    string symbol,\n    string type,    // buystoplimit|sellstoplimit\n    double volume,\n    double stop,    // trigger\n    double limit,   // limit\n    double? sl,\n    double? tp,\n    string? tif,    // GTC|DAY|GTD (aliases SPECIFIED, SPECIFIED_DAY)\n    DateTimeOffset? expire,\n    CancellationToken ct);\n</code></pre>"},{"location":"Orders_Positions/Place/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>place.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var s         = Validators.EnsureSymbol(ctx.ParseResult.GetValueForOption(symbolOpt) ?? GetOptions().DefaultSymbol);\n    var vol       = ctx.ParseResult.GetValueForOption(volumeOpt);\n    var typeStr   = ctx.ParseResult.GetValueForOption(placeTypeOpt)!;\n    var price     = ctx.ParseResult.GetValueForOption(placePriceOpt);\n    var stop      = ctx.ParseResult.GetValueForOption(placeStopOpt);\n    var limit     = ctx.ParseResult.GetValueForOption(placeLimitOpt);\n    var tif       = ctx.ParseResult.GetValueForOption(placeTifOpt);\n    var expire    = ctx.ParseResult.GetValueForOption(placeExpireOpt);\n    var sl        = ctx.ParseResult.GetValueForOption(slOpt);\n    var tp        = ctx.ParseResult.GetValueForOption(tpOpt);\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    Validators.EnsureVolume(vol);\n\n    var isStopLimit   = typeStr is \"buystoplimit\" or \"sellstoplimit\";\n    var isLimitOrStop = typeStr is \"buylimit\" or \"selllimit\" or \"buystop\" or \"sellstop\";\n\n    if (isStopLimit)\n    {\n        if (!stop.HasValue || !limit.HasValue) throw new ArgumentException(\"Stop-limit requires both --stop and --limit.\");\n        if (typeStr == \"buystoplimit\"  &amp;&amp; !(limit &lt;= stop)) throw new ArgumentException(\"Buy Stop-Limit: limit &lt;= stop.\");\n        if (typeStr == \"sellstoplimit\" &amp;&amp; !(limit &gt;= stop)) throw new ArgumentException(\"Sell Stop-Limit: limit &gt;= stop.\");\n        if (price.HasValue) throw new ArgumentException(\"Do not pass --price for stop-limit.\");\n    }\n    else if (isLimitOrStop)\n    {\n        if (!price.HasValue || price.Value &lt;= 0) throw new ArgumentOutOfRangeException(nameof(price), \"--price must be &gt; 0.\");\n    }\n    else throw new NotSupportedException(\"Use buy/sell for market orders.\");\n\n    if (string.Equals(tif, \"GTD\", StringComparison.OrdinalIgnoreCase) &amp;&amp; !expire.HasValue)\n        throw new ArgumentException(\"When --tif=GTD, --expire is required.\");\n\n    using (UseOpTimeout(timeoutMs))\n    {\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] PLACE {typeStr} {s} price={price} stop={stop} limit={limit} vol={vol} SL={sl} TP={tp} TIF={tif} exp={expire}\");\n            return;\n        }\n\n        await ConnectAsync();\n        try { await _mt5Account.EnsureSymbolVisibleAsync(s, TimeSpan.FromSeconds(3)); } catch { }\n\n        ulong ticket = isStopLimit\n            ? await _mt5Account.PlaceStopLimitOrderAsync(s, typeStr, vol, stop!.Value, limit!.Value, sl, tp, tif, expire, CancellationToken.None)\n            : await _mt5Account.PlacePendingOrderAsync   (s, typeStr, vol, price!.Value,              sl, tp, tif, expire, CancellationToken.None);\n\n        Console.WriteLine($\"PLACE done: ticket={ticket}\");\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Place/#see-also","title":"See also","text":"<ul> <li>Pending.modify \u2014 set exact prices/SL/TP/TIF</li> <li>Pending.move \u2014 shift by \u00b1N points</li> <li>symbol limits \u2014 min/step/max lots</li> <li>Pending_List \u2014 review current pendings</li> </ul>"},{"location":"Orders_Positions/Position.modify/","title":"Position Modify (<code>position.modify</code>) \u270f\ufe0f","text":""},{"location":"Orders_Positions/Position.modify/#what-it-does","title":"What it Does","text":"<p>Updates Stop Loss and/or Take Profit for an open position by ticket.</p> <p>Alias: <code>posmod</code></p>"},{"location":"Orders_Positions/Position.modify/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Description <code>--profile</code>, <code>-p</code> string Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong Position ticket. Must be <code>&gt; 0</code>. <code>--sl</code> double? New Stop Loss price (absolute). <code>--tp</code> double? New Take Profit price (absolute). <code>--timeout-ms</code> int RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag Print intended action without sending. <p>At least one of <code>--sl</code> or <code>--tp</code> must be provided.</p>"},{"location":"Orders_Positions/Position.modify/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"Field Type Description <code>Ticket</code> ulong Modified ticket. <code>NewSL</code> double Applied Stop Loss (if provided). <code>NewTP</code> double Applied Take Profit (if provided). <code>Status</code> string <code>OK</code> or error description."},{"location":"Orders_Positions/Position.modify/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Orders_Positions/Position.modify/#cli","title":"CLI","text":"<pre><code># Set SL and TP\ndotnet run -- position.modify -p demo -t 123456 --sl 1.0950 --tp 1.1050\n\n# Only SL\ndotnet run -- position.modify -p demo -t 123456 --sl 1.0900\n\n# Dry\u2011run (no request)\ndotnet run -- position.modify -p demo -t 123456 --tp 1.1100 --dry-run\n</code></pre>"},{"location":"Orders_Positions/Position.modify/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell Shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nposmod -t 123456 -sl 1.0900 -tp 1.1100\n# expands to: mt5 position.modify -p demo -t 123456 --sl 1.0900 --tp 1.1100 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Position.modify/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li><code>--sl</code> / <code>--tp</code> are prices (not offsets). They must respect broker StopsLevel (min distance).</li> <li>If neither <code>--sl</code> nor <code>--tp</code> is provided, the command fails fast with a clear error.</li> <li>Use <code>symbol show</code>/<code>limits</code> to verify instrument properties and allowable distances.</li> </ul>"},{"location":"Orders_Positions/Position.modify/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var posModTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket\") { IsRequired = true };\nvar posModSlOpt     = new Option&lt;double?&gt;(new[] { \"--sl\" }, \"New Stop Loss (price)\");\nvar posModTpOpt     = new Option&lt;double?&gt;(new[] { \"--tp\" }, \"New Take Profit (price)\");\n\nvar posModify = new Command(\"position.modify\", \"Modify SL/TP for a position by ticket\");\nposModify.AddAlias(\"posmod\");\n\nposModify.AddOption(profileOpt);\nposModify.AddOption(posModTicketOpt);\nposModify.AddOption(posModSlOpt);\nposModify.AddOption(posModTpOpt);\nposModify.AddOption(timeoutOpt);\nposModify.AddOption(dryRunOpt);\n\nposModify.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var ticket    = ctx.ParseResult.GetValueForOption(posModTicketOpt);\n    var sl        = ctx.ParseResult.GetValueForOption(posModSlOpt);\n    var tp        = ctx.ParseResult.GetValueForOption(posModTpOpt);\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n</code></pre>"},{"location":"Orders_Positions/Position.modify.points/","title":"Position Modify Points (<code>position.modify.points</code>) \ud83d\udcd0","text":"<p>Sets Stop Loss and/or Take Profit by a distance in points from a chosen base price \u2014 either the entry price or the current market price.</p> <p>Alias: <code>pmp</code></p>"},{"location":"Orders_Positions/Position.modify.points/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes Position ticket (&gt; 0). <code>--sl-points</code> int? no SL distance in points (\u2265 0). <code>--tp-points</code> int? no TP distance in points (\u2265 0). <code>--from</code> string no Base price: <code>entry</code> (default) or <code>market</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending the request. <p>At least one of <code>--sl-points</code> or <code>--tp-points</code> must be provided. <code>--from</code> selects the base price: entry uses <code>PriceOpen</code>; market uses Bid for BUY and Ask for SELL.</p>"},{"location":"Orders_Positions/Position.modify.points/#how-prices-are-calculated","title":"How Prices Are Calculated \ud83e\uddee","text":"<p>Let <code>Pbase</code> be the base price (<code>entry</code> or <code>market</code>), and <code>point</code> be the instrument point size.</p> <ul> <li> <p>For BUY positions:</p> </li> <li> <p><code>SL = Pbase \u2212 sl_points \u00d7 point</code></p> </li> <li><code>TP = Pbase + tp_points \u00d7 point</code></li> <li> <p>For SELL positions:</p> </li> <li> <p><code>SL = Pbase + sl_points \u00d7 point</code></p> </li> <li><code>TP = Pbase \u2212 tp_points \u00d7 point</code></li> </ul> <p>Point size guess: uses <code>_mt5Account.PointGuess(symbol)</code>; if it returns \u2264 0, falls back to <code>0.01</code> for JPY symbols, otherwise <code>0.0001</code>.</p>"},{"location":"Orders_Positions/Position.modify.points/#output","title":"Output \u2b06\ufe0f","text":"Field Type Description <code>Ticket</code> ulong Modified ticket. <code>NewSL</code> double Applied SL price (if provided). <code>NewTP</code> double Applied TP price (if provided). <code>From</code> string <code>entry</code> or <code>market</code> used for base price. <code>Status</code> string <code>OK</code> or error description. <p>Text only. Exit codes: <code>0</code> success; <code>2</code> validation/not found; <code>1</code> fatal error.</p>"},{"location":"Orders_Positions/Position.modify.points/#how-to-use","title":"How to Use","text":"<pre><code># SL 150 pts below entry, TP 300 pts above entry (BUY logic)\ndotnet run -- position.modify.points -p demo -t 123456 --sl-points 150 --tp-points 300\n\n# From MARKET (SELL logic): SL 200 pts, TP 100 pts\ndotnet run -- position.modify.points -p demo -t 123456 --from market --sl-points 200 --tp-points 100\n\n# Only TP by points\ndotnet run -- position.modify.points -p demo -t 123456 --tp-points 250\n\n# Dry\u2011run\ndotnet run -- position.modify.points -p demo -t 123456 --from market --sl-points 120 --dry-run\n</code></pre> <p>Shortcast (from <code>ps/shortcasts.ps1</code>):</p> <pre><code>pmp -t 123456 -slp 150 -tpp 300 -from entry\n# \u2192 mt5 position.modify.points -p demo -t 123456 --sl-points 150 --tp-points 300 --from entry --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Position.modify.points/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Distances are in points, not pips; confirm the instrument\u2019s point value (see Quote or Symbol).</li> <li>Resulting prices must respect broker StopsLevel / min distance.</li> <li>For market base, uses Bid for BUY and Ask for SELL to avoid instant stops.</li> <li>If both point distances are omitted, the command fails fast with a clear error.</li> </ul>"},{"location":"Orders_Positions/Position.modify.points/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;TickData&gt; SymbolInfoTickAsync(\n    string symbol,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic double PointGuess(string symbol);\n\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;bool&gt; ModifyPositionSlTpAsync(\n    ulong ticket,\n    double? sl,\n    double? tp,\n    CancellationToken ct);\n</code></pre>"},{"location":"Orders_Positions/Position.modify.points/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>posModPts.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var ticket    = ctx.ParseResult.GetValueForOption(pmpTicketOpt);\n    var slPts     = ctx.ParseResult.GetValueForOption(pmpSlPtsOpt);\n    var tpPts     = ctx.ParseResult.GetValueForOption(pmpTpPtsOpt);\n    var fromStr   = (ctx.ParseResult.GetValueForOption(pmpFromOpt) ?? \"entry\").Trim().ToLowerInvariant();\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    Validators.EnsureTicket(ticket);\n    if (fromStr is not (\"entry\" or \"market\")) throw new ArgumentException(\"--from must be entry|market\");\n    if (slPts is null &amp;&amp; tpPts is null) throw new ArgumentException(\"Provide --sl-points and/or --tp-points\");\n    if (slPts is &lt; 0 || tpPts is &lt; 0) throw new ArgumentOutOfRangeException(\"Point distances must be &gt;= 0\");\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:POSITION.MODIFY.POINTS Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} SLpts:{SL} TPpts:{TP} From:{From}\", ticket, slPts, tpPts, fromStr))\n    {\n        await ConnectAsync();\n\n        var opened = await _mt5Account.OpenedOrdersAsync();\n        var pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket || unchecked((ulong)p.Ticket) == ticket);\n        if (pos is null) { Console.WriteLine($\"Position #{ticket} not found.\"); Environment.ExitCode = 2; return; }\n\n        var symbol  = pos.Symbol;\n        var isLong  = IsLongPosition(pos); // helper in project\n        var point   = _mt5Account.PointGuess(symbol);\n        if (point &lt;= 0) point = symbol.EndsWith(\"JPY\", StringComparison.OrdinalIgnoreCase) ? 0.01 : 0.0001;\n\n        // Base price\n        double pbase;\n        if (fromStr == \"entry\") pbase = pos.PriceOpen;\n        else\n        {\n            var tick = await _mt5Account.SymbolInfoTickAsync(symbol);\n            pbase = isLong ? tick.Bid : tick.Ask; // BUY\u2192Bid, SELL\u2192Ask\n        }\n\n        // Compute targets\n        double? newSl = null, newTp = null;\n        if (slPts is not null)\n            newSl = isLong ? pbase - slPts.Value * point : pbase + slPts.Value * point;\n        if (tpPts is not null)\n            newTp = isLong ? pbase + tpPts.Value * point : pbase - tpPts.Value * point;\n\n        // Round to point grid\n        static double R(double v, double pt) =&gt; Math.Round(v / pt) * pt;\n        if (newSl is not null) newSl = R(newSl.Value, point);\n        if (newTp is not null) newTp = R(newTp.Value, point);\n\n        // Best\u2011effort ensure visibility (non\u2011fatal)\n        try { await _mt5Account.EnsureSymbolVisibleAsync(symbol, TimeSpan.FromSeconds(3)); } catch { }\n\n        if (dryRun)\n        {\n            Console.WriteLine($\"[DRY-RUN] POSITION.MODIFY.POINTS #{ticket} {symbol} from={fromStr} SL-&gt;{newSl} TP-&gt;{newTp}\");\n            return;\n        }\n\n        await _mt5Account.ModifyPositionSlTpAsync(ticket, newSl, newTp, CancellationToken.None);\n        Console.WriteLine($\"\u2714 position.modify.points done: ticket={ticket} from={fromStr} SL={newSl} TP={newTp}\");\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Position.modify.points/#see-also","title":"See also","text":"<ul> <li>Modify (by price) \u2014 set absolute SL/TP</li> <li>Limits \u2014 min/step/max</li> <li>Quote \u2014 check current Bid/Ask</li> </ul>"},{"location":"Orders_Positions/Positions/","title":"Positions (<code>positions</code>) \ud83d\udcc8","text":"<p>Lists all active (open) positions for the selected profile/account.</p> <p>Alias: <code>pos</code></p>"},{"location":"Orders_Positions/Positions/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--output</code>, <code>-o</code> string no Output format: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no RPC timeout in ms (default: <code>30000</code>)."},{"location":"Orders_Positions/Positions/#output","title":"Output \u2b06\ufe0f","text":"<p>Text</p> <pre><code>Positions: N\nSYMBOL  #TICKET  vol=V  open=PRICE  pnl=PROFIT\n...\n</code></pre> <p>*Prints up to 10 positions; if more exist, shows <code>... and K more</code>.*</p> <p>JSON</p> <pre><code>{\n  \"PositionInfos\": [\n    { \"Ticket\": 123456, \"Symbol\": \"EURUSD\", \"Volume\": 0.10, \"PriceOpen\": 1.0950, \"Profit\": 12.34 }\n  ]\n}\n</code></pre>"},{"location":"Orders_Positions/Positions/#method-signature","title":"Method Signature","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Positions/#how-to-use","title":"How to Use","text":"<pre><code># Text\ndotnet run -- positions -p demo\n\n# JSON\ndotnet run -- positions -p demo -o json\n</code></pre> <p>Shortcasts (from <code>ps/shortcasts.ps1</code>):</p> <pre><code>positions   # \u2192 mt5 positions -p demo --timeout-ms 90000\npos         # alias to the same\n</code></pre>"},{"location":"Orders_Positions/Positions/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var positions = new Command(\"positions\", \"List active positions\");\npositions.AddAlias(\"pos\");\npositions.AddOption(profileOpt);\npositions.AddOption(outputOpt);\npositions.AddOption(timeoutOpt);\n\npositions.SetHandler(async (string profile, string output, int timeoutMs) =&gt;\n{\n    Validators.EnsureProfile(profile);\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:POSITIONS Profile:{Profile}\", profile))\n    {\n        try\n        {\n            await ConnectAsync();\n            var opened = await _mt5Account.OpenedOrdersAsync();\n            var list = opened.PositionInfos;\n\n            if (string.Equals(output, \"json\", StringComparison.OrdinalIgnoreCase))\n            {\n                Console.WriteLine(ToJson(new { PositionInfos = list }));\n                return;\n            }\n\n            if (list.Count == 0)\n            {\n                Console.WriteLine(\"No positions.\");\n                return;\n            }\n\n            Console.WriteLine($\"Positions: {list.Count}\");\n            foreach (var p in list.Take(10))\n                Console.WriteLine($\"{p.Symbol}  #{p.Ticket}  vol={p.Volume}  open={p.PriceOpen}  pnl={p.Profit}\");\n            if (list.Count &gt; 10) Console.WriteLine($\"... and {list.Count - 10} more\");\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n}, profileOpt, outputOpt, timeoutOpt);\n</code></pre>"},{"location":"Orders_Positions/Positions/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>This is a quick overview; use Ticket_Show.md for detailed info on a specific ticket.</li> <li>PnL shown is a snapshot and may change between calls.</li> </ul> <p>See also: Orders.md, Ticket_Show.md</p>"},{"location":"Orders_Positions/Sell/","title":"Sell (<code>sell</code>) \ud83d\udcc9","text":"<p>Sends a market SELL order for the selected symbol and volume.</p> <p>Alias: <code>s</code></p>"},{"location":"Orders_Positions/Sell/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile from <code>profiles.json</code>. <code>--symbol</code>, <code>-s</code> string no Symbol (e.g., <code>EURUSD</code>). Defaults to profile\u2019s <code>DefaultSymbol</code>. <code>--volume</code>, <code>-v</code> double yes Volume in lots. <code>--sl</code> double? no Stop Loss price (absolute). <code>--tp</code> double? no Take Profit price (absolute). <code>--deviation</code> int no Max slippage in points (default: <code>10</code>). <code>--output</code>, <code>-o</code> string no <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int no Per\u2011RPC timeout in ms (default: <code>30000</code>). <code>--dry-run</code> flag no Print intended action without sending order."},{"location":"Orders_Positions/Sell/#output","title":"Output \u2b06\ufe0f","text":"<p>Text (logger):</p> <pre><code>SELL done: ticket=12345678\n</code></pre> <p>JSON:</p> <pre><code>{\n  \"Side\": \"SELL\",\n  \"Symbol\": \"EURUSD\",\n  \"Volume\": 0.1,\n  \"Deviation\": 10,\n  \"SL\": 1.1000,\n  \"TP\": 1.0800,\n  \"Ticket\": 12345678\n}\n</code></pre> <p>Exit codes: <code>0</code> success; <code>1</code> fatal error.</p>"},{"location":"Orders_Positions/Sell/#how-to-use","title":"How to Use","text":"<pre><code># Basic sell (text)\ndotnet run -- sell -p demo -s EURUSD -v 0.10\n\n# With SL/TP + JSON\ndotnet run -- sell -p demo -s EURUSD -v 0.10 --sl 1.1000 --tp 1.0800 -o json\n\n# Dry\u2011run\ndotnet run -- sell -p demo -s EURUSD -v 0.10 --dry-run\n</code></pre> <p>Shortcast (from <code>ps/shortcasts.ps1</code>):</p> <pre><code>s -s EURUSD -v 0.10 -sl 1.1000 -tp 1.0800\n# \u2192 mt5 sell -p demo -s EURUSD -v 0.10 --sl 1.1000 --tp 1.0800 --timeout-ms 90000\n</code></pre>"},{"location":"Orders_Positions/Sell/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Best\u2011effort EnsureSymbolVisibleAsync (\\~3s) before sending the order.</li> <li><code>--sl</code>/<code>--tp</code> are absolute prices and must respect broker StopsLevel / min distance.</li> <li>Use <code>--deviation</code> to control tolerance in volatile markets.</li> <li>Check lot min/step/max before trading (see Limits).</li> </ul>"},{"location":"Orders_Positions/Sell/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;ulong&gt; SendMarketOrderAsync(\n    string symbol,\n    bool isBuy,\n    double volume,\n    int deviation,\n    double? stopLoss = null,\n    double? takeProfit = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Orders_Positions/Sell/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var sell = new Command(\"sell\", \"Market sell\");\nsell.AddAlias(\"s\");\n\nsell.AddOption(profileOpt);\nsell.AddOption(symbolOpt);\nsell.AddOption(volumeOpt);\nsell.AddOption(slOpt);\nsell.AddOption(tpOpt);\nsell.AddOption(devOpt);\nsell.AddOption(outputOpt);\nsell.AddOption(timeoutOpt);\nsell.AddOption(dryRunOpt);\n\nsell.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile   = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var symbolV   = ctx.ParseResult.GetValueForOption(symbolOpt);\n    var volume    = ctx.ParseResult.GetValueForOption(volumeOpt);\n    var sl        = ctx.ParseResult.GetValueForOption(slOpt);\n    var tp        = ctx.ParseResult.GetValueForOption(tpOpt);\n    var deviation = ctx.ParseResult.GetValueForOption(devOpt);\n    var output    = ctx.ParseResult.GetValueForOption(outputOpt) ?? \"text\";\n    var timeoutMs = ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun    = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    Validators.EnsureVolume(volume);\n    Validators.EnsureDeviation(deviation);\n\n    var s = Validators.EnsureSymbol(symbolV ?? GetOptions().DefaultSymbol);\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:SELL Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Symbol:{Symbol}\", s))\n    using (_logger.BeginScope(\"OrderParams Vol:{Vol} Dev:{Dev} SL:{SL} TP:{TP}\", volume, deviation, sl, tp))\n    {\n        if (dryRun)\n        {\n            if (string.Equals(output, \"json\", StringComparison.OrdinalIgnoreCase))\n            {\n                Console.WriteLine(JsonSerializer.Serialize(new { DryRun = true, Side = \"SELL\", Symbol = s, Volume = volume, Deviation = deviation, SL = sl, TP = tp }));\n            }\n            else\n            {\n                Console.WriteLine($\"[DRY-RUN] SELL {s} vol={volume} dev={deviation} SL={sl} TP={tp}\");\n            }\n            return;\n        }\n\n        try\n        {\n            await ConnectAsync();\n\n            // Best\u2011effort visibility (non\u2011fatal if fails)\n            try { await _mt5Account.EnsureSymbolVisibleAsync(s, TimeSpan.FromSeconds(3)); } catch { }\n\n            // Send SELL\n            var ticket = await _mt5Account.SendMarketOrderAsync(s, isBuy: false, volume: volume, deviation: deviation, stopLoss: sl, takeProfit: tp, cancellationToken: CancellationToken.None);\n\n            if (string.Equals(output, \"json\", StringComparison.OrdinalIgnoreCase))\n                Console.WriteLine(JsonSerializer.Serialize(new { Side = \"SELL\", Symbol = s, Volume = volume, Deviation = deviation, SL = sl, TP = tp, Ticket = ticket }));\n            else\n                _logger.LogInformation(\"SELL done: ticket={Ticket}\", ticket);\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n});\n</code></pre>"},{"location":"Orders_Positions/Sell/#see-also","title":"See also","text":"<ul> <li>Buy \u2014 market BUY</li> <li>Limits \u2014 lot min/step/max</li> <li>Quote \u2014 quick snapshot price</li> </ul>"},{"location":"Orders_Positions/Trail.start/","title":"Trail Start (<code>trail.start</code>) \ud83d\udea6","text":"<p>Starts a local trailing stop for an existing position (by ticket). The app monitors ticks and moves SL according to chosen mode and distances.</p> <p>Client\u2011side feature: trailing works while the CLI/app is running and connected.</p> <p>Alias: <code>trstart</code></p>"},{"location":"Orders_Positions/Trail.start/#modes","title":"Modes \u2699\ufe0f","text":"<ul> <li><code>classic</code> \u2014 SL trails price by a fixed distance (points), updating only when price moves by at least step points.</li> <li><code>chandelier</code> \u2014 SL follows an internal high/low buffer (ATR\u2011style), honoring <code>distance</code> and <code>step</code> (requires enum <code>MT5Account.TrailMode</code>).</li> </ul>"},{"location":"Orders_Positions/Trail.start/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Default Description <code>--profile</code>, <code>-p</code> string yes \u2014 Profile from <code>profiles.json</code>. <code>--ticket</code>, <code>-t</code> ulong yes \u2014 Position ticket to trail. <code>--distance</code> int no 150 Distance in points from price to SL. <code>--step</code> int no 20 Minimal price move (points) to update. <code>--mode</code> string no classic <code>classic</code> or <code>chandelier</code>. <code>--timeout-ms</code> int no 30000 RPC timeout for initial queries. <code>--dry-run</code> flag no \u2014 Print intent without starting trailing. <p>Validation: <code>distance &gt; 0</code>, <code>step &gt; 0</code>, <code>mode \u2208 {classic, chandelier}</code> (case\u2011insensitive).</p>"},{"location":"Orders_Positions/Trail.start/#output","title":"Output \u2b06\ufe0f","text":"<ul> <li>Success: <code>\u2714 trail.start scheduled</code></li> <li>Dry\u2011run: plan with parameters</li> <li>Errors: detailed log + non\u2011zero exit code</li> </ul>"},{"location":"Orders_Positions/Trail.start/#how-to-use","title":"How to Use","text":"<pre><code># Classic trailing: 150 pts distance, 20 pts step\ndotnet run -- trail.start -p demo -t 123456 --distance 150 --step 20 --mode classic\n\n# Chandelier: wider distances\ndotnet run -- trail.start -p demo -t 123456 --distance 300 --step 50 --mode chandelier\n\n# Dry\u2011run\ndotnet run -- trail.start -p demo -t 123456 --distance 200 --step 30 --dry-run\n</code></pre> <p>Optional shortcast (<code>ps/shortcasts.ps1</code>):</p> <pre><code>function trstart { param([ulong]$t,[int]$dist=150,[int]$step=20,[string]$mode='classic',[string]$p=$PF,[int]$to=$TO)\n  mt5 trail.start -p $p -t $t --distance $dist --step $step --mode $mode --timeout-ms $to }\n</code></pre>"},{"location":"Orders_Positions/Trail.start/#method-signatures","title":"Method Signatures","text":"<pre><code>public Task&lt;OpenedOrdersData&gt; OpenedOrdersAsync(\n    BMT5_ENUM_OPENED_ORDER_SORT_TYPE sortMode = BMT5_ENUM_OPENED_ORDER_SORT_TYPE.Bmt5OpenedOrderSortByOpenTimeAsc,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic double PointGuess(string symbol);\n\npublic Task EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\npublic Task&lt;bool&gt; ModifyPositionSlTpAsync(\n    ulong ticket,\n    double? sl,\n    double? tp,\n    CancellationToken ct);\n</code></pre> <p>Trailing tick feed/loop is implemented in the command handler (Program) using quotes; initial snapshot may use <code>SymbolInfoTickAsync</code>. No extra MT5Account RPCs are required beyond SL updates.</p>"},{"location":"Orders_Positions/Trail.start/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var trTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket\") { IsRequired = true };\nvar trDistOpt   = new Option&lt;int&gt;(new[] { \"--distance\" }, () =&gt; 150, \"Distance in POINTS from price to SL\");\nvar trStepOpt   = new Option&lt;int&gt;(new[] { \"--step\" }, () =&gt; 20, \"Minimal move in POINTS to update SL\");\nvar trModeOpt   = new Option&lt;string&gt;(new[] { \"--mode\" }, () =&gt; \"classic\", \"classic|chandelier\");\n\nvar trailStart = new Command(\"trail.start\", \"Start local trailing stop for a position\");\ntrailStart.AddOption(profileOpt);\ntrailStart.AddOption(trTicketOpt);\ntrailStart.AddOption(trDistOpt);\ntrailStart.AddOption(trStepOpt);\ntrailStart.AddOption(trModeOpt);\ntrailStart.AddOption(timeoutOpt);\ntrailStart.AddOption(dryRunOpt);\n\ntrailStart.SetHandler(async (InvocationContext ctx) =&gt;\n{\n    var profile  = ctx.ParseResult.GetValueForOption(profileOpt)!;\n    var ticket   = ctx.ParseResult.GetValueForOption(trTicketOpt);\n    var distance = ctx.ParseResult.GetValueForOption(trDistOpt);\n    var step     = ctx.ParseResult.GetValueForOption(trStepOpt);\n    var modeStr  = ctx.ParseResult.GetValueForOption(trModeOpt) ?? \"classic\";\n    var timeoutMs= ctx.ParseResult.GetValueForOption(timeoutOpt);\n    var dryRun   = ctx.ParseResult.GetValueForOption(dryRunOpt);\n\n    Validators.EnsureProfile(profile);\n    Validators.EnsureTicket(ticket);\n    if (distance &lt;= 0) throw new ArgumentOutOfRangeException(nameof(distance));\n    if (step &lt;= 0)     throw new ArgumentOutOfRangeException(nameof(step));\n    if (!Enum.TryParse&lt;MT5Account.TrailMode&gt;(modeStr, ignoreCase: true, out var mode))\n        throw new ArgumentException(\"Invalid --mode. Use classic|chandelier.\");\n\n    using (UseOpTimeout(timeoutMs))\n    using (_logger.BeginScope(\"Cmd:TRAIL.START Profile:{Profile}\", profile))\n    using (_logger.BeginScope(\"Ticket:{Ticket} Dist:{Dist} Step:{Step} Mode:{Mode}\", ticket, distance, step, mode))\n    {\n        try\n        {\n            await ConnectAsync();\n\n            // Ensure the symbol is visible (best\u2011effort, non\u2011fatal if fails)\n            var opened = await _mt5Account.OpenedOrdersAsync();\n            var pos = opened.PositionInfos.FirstOrDefault(p =&gt; (ulong)p.Ticket == ticket || p.Ticket == (long)ticket)\n                      ?? throw new InvalidOperationException($\"Position #{ticket} not found.\");\n            try { await _mt5Account.EnsureSymbolVisibleAsync(pos.Symbol, TimeSpan.FromSeconds(3)); } catch { }\n\n            if (dryRun)\n            {\n                Console.WriteLine($\"[DRY-RUN] TRAIL.START ticket={ticket} mode={mode} dist={distance} step={step}\");\n                return;\n            }\n\n            // Launch trailing (helper in Program; loops ticks &amp; calls ModifyPositionSlTpAsync)\n            _ = RunTrailingAsync(ticket, pos.Symbol, distance, step, mode, CancellationToken.None);\n            Console.WriteLine(\"\u2714 trail.start scheduled\");\n        }\n        catch (Exception ex)\n        {\n            ErrorPrinter.Print(_logger, ex, IsDetailed());\n            Environment.ExitCode = 1;\n        }\n        finally\n        {\n            try { await _mt5Account.DisconnectAsync(); } catch { }\n        }\n    }\n});\n\n// Helper (Program): advances SL only toward profit depending on mode\nstatic async Task RunTrailingAsync(ulong ticket, string symbol, int distance, int step, MT5Account.TrailMode mode, CancellationToken ct)\n{\n    // Pseudocode: subscribe or poll quotes, compute target SL, call ModifyPositionSlTpAsync when step threshold reached.\n}\n</code></pre>"},{"location":"Orders_Positions/Trail.start/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Local process: trailing stops when CLI/app exits or disconnects.</li> <li>SL only moves toward profit (never widens risk in <code>classic</code>).</li> <li>Distances are in points (not pips). Verify point size via Symbol \u2192 Limits or Quote.</li> <li>Broker StopsLevel / FreezeLevel rules still apply.</li> <li>Works only with positions (not pendings). For pending orders see Pending.md.</li> </ul>"},{"location":"Orders_Positions/Trail.start/#see-also","title":"See also","text":"<ul> <li>Position.modify.points \u2014 set SL/TP by point distance</li> <li>Modify \u2014 set SL/TP by absolute price</li> <li>Trail.stop \u2014 stop a running trailing session</li> <li>Subscribe \u2014 price stream fundamentals</li> </ul>"},{"location":"Orders_Positions/Trail.stop/","title":"Trail Stop (<code>trail.stop</code>) \ud83d\uded1","text":"<p>Stops a local trailing stop previously started with <code>trail.start</code>.</p> <p>This cancels the client\u2011side trailing loop for a given position. No server RPC is required.</p> <p>Alias: <code>trstop</code></p>"},{"location":"Orders_Positions/Trail.stop/#purpose","title":"Purpose","text":"<ul> <li>Cancel the active trailing logic for a specific position ticket.</li> <li>Useful when you no longer want SL to auto\u2011adjust.</li> </ul>"},{"location":"Orders_Positions/Trail.stop/#usage","title":"Usage \ud83d\udcbb","text":"<pre><code>dotnet run -- trail.stop -p demo -t 123456\n</code></pre>"},{"location":"Orders_Positions/Trail.stop/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--profile</code>, <code>-p</code> string yes Profile name (from <code>profiles.json</code>). <code>--ticket</code>, <code>-t</code> ulong yes Position ticket (numeric ID)."},{"location":"Orders_Positions/Trail.stop/#output","title":"Output \u2b06\ufe0f","text":"<p>Text</p> <ul> <li><code>\u2714 trailing stopped for #&lt;ticket&gt;</code> \u2014 success (exit code <code>0</code>).</li> <li><code>No active trailing for #&lt;ticket&gt;</code> \u2014 nothing to stop (exit code <code>2</code>).</li> <li>Errors are printed with details; fatal error sets exit code <code>1</code>.</li> </ul>"},{"location":"Orders_Positions/Trail.stop/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>Trailing is client\u2011side \u2014 it runs only while your app/CLI is running.</li> <li>Stopping a trailer does not modify SL/TP on the server; it only stops further automatic updates.</li> <li>You can manually adjust SL/TP afterwards using Modify or Position.modify.points.</li> </ul>"},{"location":"Orders_Positions/Trail.stop/#method-signatures","title":"Method Signatures","text":""},{"location":"Orders_Positions/Trail.stop/#preferred-if-implemented-in-service-layer-public-void-stoptrailingulong-ticket-if-_activetrailstryremoveticket-out-var-cts","title":"<pre><code>// Preferred, if implemented in service layer\npublic void StopTrailing(ulong ticket)\n    {\n        if (_activeTrails.TryRemove(ticket, out var cts))\n</code></pre>","text":""},{"location":"Orders_Positions/Trail.stop/#code-reference","title":"Code Reference \ud83e\udde9","text":"<pre><code>var trTicketOpt = new Option&lt;ulong&gt;(new[] { \"--ticket\", \"-t\" }, \"Position ticket\") { IsRequired = true };\n\nvar trailStop = new Command(\"trail.stop\", \"Stop local trailing stop for a position\");\ntrailStop.AddOption(profileOpt);\ntrailStop.AddOption(trTicketOpt);\n\ntrailStop.SetHandler((string profile, ulong ticket) =&gt;\n{\n    Validators.EnsureProfile(profile);\n    Validators.EnsureTicket(ticket);\n\n    if (StopTrailingLocal(ticket))\n        Console.WriteLine($\"\\u2714 trailing stopped for #{ticket}\");\n    else\n    {\n        Console.WriteLine($\"No active trailing for #{ticket}\");\n        Environment.ExitCode = 2;\n    }\n}, profileOpt, trTicketOpt);\n\n// Helper in Program:\nstatic readonly ConcurrentDictionary&lt;ulong, CancellationTokenSource&gt; _trailSessions = new();\nstatic bool StopTrailingLocal(ulong ticket)\n{\n    return _trailSessions.TryRemove(ticket, out var cts) &amp;&amp; TryCancel(cts);\n}\nstatic bool TryCancel(CancellationTokenSource cts)\n{\n    try { cts.Cancel(); return true; } catch { return false; }\n}\n</code></pre>"},{"location":"Orders_Positions/Trail.stop/#see-also","title":"See also","text":"<ul> <li>Trail.start \u2014 start a local trailing session</li> <li>Modify \u2014 set SL/TP by absolute price</li> <li>Position.modify.points \u2014 set SL/TP by distance in points</li> <li>Subscribe \u2014 streaming quotes used by trailing</li> </ul>"},{"location":"Risk_Tools/Lot.calc/","title":"Lot Calc (<code>lot.calc</code>) \ud83d\udcd0","text":""},{"location":"Risk_Tools/Lot.calc/#what-it-does","title":"What it Does \ud83c\udfaf","text":"<p>Calculates a position volume (lots) from risk % and Stop-Loss distance (points). Returns a size that fits the risk budget and respects the symbol\u2019s min/step/max limits.</p>"},{"location":"Risk_Tools/Lot.calc/#input-parameters","title":"Input Parameters \u2b07\ufe0f","text":"Parameter Type Required Description <code>--symbol</code>, <code>-s</code> string \u2705 Symbol to trade (e.g. <code>EURUSD</code>). <code>--risk-pct</code> double \u2705 Risk percent of balance to put at stake (e.g. <code>1.0</code>). <code>--sl-points</code> int \u2705 Stop-Loss distance in points (e.g. <code>200</code>). <code>--balance</code> double \u2705 Account balance used for the calc (e.g. <code>1000</code>). <code>--min-lot</code> double \u2705 Minimum lot allowed for the symbol. <code>--lot-step</code> double \u2705 Lot increment step. <code>--max-lot</code> double \u274c Maximum lot (optional; if omitted, no upper clamp beyond server limits). <code>--output</code>, <code>-o</code> string \u274c Output: <code>text</code> (default) or <code>json</code>. <code>--timeout-ms</code> int \u274c Timeout in ms (default: 30000). ---"},{"location":"Risk_Tools/Lot.calc/#output-fields","title":"Output Fields \u2b06\ufe0f","text":"Field Type Description <code>symbol</code> string Target symbol used for calculation. <code>balance</code> double Balance value passed in the request. <code>risk_pct</code> double Risk percentage applied to balance. <code>sl_points</code> int Stop-loss distance in points. <code>point_value_per_lot</code> double Money value per point per 1 lot (from server). <code>volume_raw</code> double Calculated raw volume before rounding. <code>volume</code> double Final recommended volume (after rounding/clamping). <code>lot_step</code> double Lot step used for rounding. <code>min_lot</code> double Minimum lot allowed. <code>max_lot</code> double? Maximum lot cap (if specified). ---"},{"location":"Risk_Tools/Lot.calc/#how-to-use","title":"How to Use \ud83d\udee0\ufe0f","text":""},{"location":"Risk_Tools/Lot.calc/#cli","title":"CLI","text":"<pre><code># 1% risk, 200 pts SL, 1000 balance, typical FX limits\ndotnet run -- lot.calc --symbol EURUSD --risk-pct 1 --sl-points 200 --balance 1000 --min-lot 0.01 --lot-step 0.01 --max-lot 5 -o json\n</code></pre>"},{"location":"Risk_Tools/Lot.calc/#powershell-shortcuts-from-shortcastsps1","title":"PowerShell Shortcuts (from <code>shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-sym EURUSD\nlc -s EURUSD -riskPct 1 -slPts 200 -balance 1000 -minLot 0.01 -lotStep 0.01 -maxLot 5 -o json\n# expands to: mt5 lot.calc --symbol EURUSD --risk-pct 1 --sl-points 200 --balance 1000 --min-lot 0.01 --lot-step 0.01 --max-lot 5 -o json --timeout-ms 90000\n</code></pre>"},{"location":"Risk_Tools/Lot.calc/#formula-concept","title":"Formula (Concept) \ud83e\uddee","text":"<ol> <li>Risk amount = <code>Balance * RiskPct / 100</code></li> <li>Points value for 1 lot = <code>ValuePerPoint</code> (depends on symbol, contract size, tick value)</li> <li>Lots (raw) = <code>Risk amount / (SL points * ValuePerPoint)</code></li> <li>Round to <code>lot-step</code>, then clamp to <code>[min-lot, max-lot]</code>.</li> </ol> <p>Your implementation may compute <code>ValuePerPoint</code> on the server side. If you compute locally, make sure to use correct contract size and pip/point definitions for the symbol.</p>"},{"location":"Risk_Tools/Lot.calc/#when-to-use","title":"When to Use \u2753","text":"<ul> <li>Pre\u2011trade sizing for buy/sell commands.</li> <li>Risk controls in bots and scripts.</li> <li>UI validations (disable order button if calc \u2192 below min-lot).</li> </ul>"},{"location":"Risk_Tools/Lot.calc/#notes-safety","title":"Notes &amp; Safety \ud83d\udee1\ufe0f","text":"<ul> <li>If <code>sl-points</code> is too small, the required volume may exceed <code>max-lot</code> \u2014 the result will be clamped and actual risk may be lower than requested.</li> <li>Always confirm the point size and contract size for non\u2011FX symbols (CFDs, metals, crypto).</li> <li>For netting vs hedging modes, risk logic might differ; adjust accordingly.</li> </ul>"},{"location":"Risk_Tools/Lot.calc/#code-reference-exact","title":"Code Reference (exact) \ud83e\udde9","text":"<pre><code>var lcSymbolOpt   = new Option&lt;string&gt;(new[] { \"--symbol\", \"-s\" }, () =&gt; GetOptions().DefaultSymbol, \"Symbol\");\nvar lcRiskPctOpt  = new Option&lt;double&gt;(new[] { \"--risk-pct\" }, \"Risk percent of balance (e.g., 1 for 1%)\") { IsRequired = true };\nvar lcSlPtsOpt    = new Option&lt;int&gt;(new[] { \"--sl-points\" }, \"Stop-loss distance in POINTS\") { IsRequired = true };\nvar lcBalanceOpt  = new Option&lt;double&gt;(new[] { \"--balance\" }, \"Account balance (same currency as risk)\") { IsRequired = true };\nvar lcMinLotOpt   = new Option&lt;double&gt;(new[] { \"--min-lot\" }, () =&gt; 0.01, \"Min lot size\");\nvar lcStepLotOpt  = new Option&lt;double&gt;(new[] { \"--lot-step\" }, () =&gt; 0.01, \"Lot step\");\nvar lcMaxLotOpt   = new Option&lt;double?&gt;(new[] { \"--max-lot\" }, \"Max lot size cap (optional)\");\n\nvar lotCalc = new Command(\"lot.calc\", \"Calculate position volume by risk % and SL distance (points)\");\nlotCalc.AddAlias(\"lc\");\n\nlotCalc.AddOption(lcSymbolOpt);\nlotCalc.AddOption(lcRiskPctOpt);\nlotCalc.AddOption(lcSlPtsOpt);\nlotCalc.AddOption(lcBalanceOpt);\nlotCalc.AddOption(lcMinLotOpt);\nlotCalc.AddOption(lcStepLotOpt);\nlotCalc.AddOption(lcMaxLotOpt);\nlotCalc.AddOption(timeoutOpt);\nlotCalc.AddOption(outputOpt);\n\nlotCalc.SetHandler(async (InvocationContext ctx) =&gt;\n</code></pre>"},{"location":"Streaming/Subscribe/","title":"Stream (<code>stream</code>) \ud83d\udce1","text":""},{"location":"Streaming/Subscribe/#what-it-does","title":"What it does","text":"<p>Subscribes to real\u2011time events and writes concise text logs:</p> <ul> <li>Ticks for a symbol (prints only <code>Symbol</code> and <code>Ask</code>).</li> <li>Trade events (short service line).</li> <li>Position P\\&amp;L updates (short service line).</li> <li>Position &amp; pending\u2011order tickets (short service line).</li> </ul> <p>Keeps auto\u2011reconnecting until the requested duration elapses.</p>"},{"location":"Streaming/Subscribe/#input-parameters","title":"Input parameters \u2b07\ufe0f","text":"Parameter Type Description <code>--profile</code>, <code>-p</code> string Profile name from <code>profiles.json</code>. <code>--seconds</code>, <code>-S</code> int How many seconds to run. Default: <code>10</code>. <code>--symbol</code>, <code>-s</code> string Desired symbol. Current behavior: the subscription internally uses the profile\u2019s <code>DefaultSymbol</code>; this flag does not change the actual subscription. <code>--timeout-ms</code> int Global per\u2011RPC timeout (applies to RPC calls). Default: <code>30000</code>. <p>\u26a0\ufe0f Not supported: <code>--output</code> and JSON mode. The command prints text logs only.</p>"},{"location":"Streaming/Subscribe/#what-gets-printed","title":"What gets printed \u2b06\ufe0f","text":""},{"location":"Streaming/Subscribe/#ticks","title":"Ticks","text":"<p>One line per tick:</p> <pre><code>OnSymbolTickAsync: Symbol=EURUSD Ask=1.23456\n</code></pre> <p>Fields <code>Bid</code>, <code>Time</code>, <code>Mid</code>, <code>Spread</code> are not printed.</p>"},{"location":"Streaming/Subscribe/#other-event-lines","title":"Other event lines","text":"<p>Periodic service lines may appear:</p> <pre><code>OnTradeAsync: Trade event received\nOnPositionProfitAsync: Update received\nOnPositionsAndPendingOrdersTicketsAsync: Update received\n</code></pre>"},{"location":"Streaming/Subscribe/#how-to-use","title":"How to use \ud83d\udee0\ufe0f","text":""},{"location":"Streaming/Subscribe/#cli","title":"CLI","text":"<pre><code># 10 seconds of streaming (text logs)\ndotnet run -- stream -p demo -s EURUSD --seconds 10\n\n# Command alias\ndotnet run -- st -p demo -S 15 -s XAUUSD\n</code></pre>"},{"location":"Streaming/Subscribe/#powershell-shortcuts-from-psshortcastsps1","title":"PowerShell shortcuts (from <code>ps/shortcasts.ps1</code>)","text":"<pre><code>. .\\ps\\shortcasts.ps1\nuse-pf demo\nuse-sym EURUSD\nst 15 EURUSD   # expands to: mt5 stream -p demo --seconds 15 -s EURUSD --timeout-ms 90000\n</code></pre>"},{"location":"Streaming/Subscribe/#notes","title":"Notes","text":"<ul> <li>Before subscribing, the code calls <code>EnsureSymbolVisibleAsync(symbol, ~3s)</code> to avoid \u201csymbol not selected\u201d. Prep errors are non\u2011fatal.</li> <li>The actual subscription uses <code>DefaultSymbol</code> from the profile, not the <code>--symbol</code> value.</li> <li>Auto\u2011reconnect with backoff is implemented and runs until <code>--seconds</code> is reached.</li> <li>On completion/cancellation the command logs a summary and attempts a clean disconnect.</li> <li>On connection/stream setup failures the process sets <code>Environment.ExitCode = 1</code>.</li> </ul>"},{"location":"Streaming/Subscribe/#method-signatures","title":"Method signatures \ud83e\udde9","text":"<pre><code>// Ensure a symbol is visible in the terminal (best\u2011effort wait)\nTask EnsureSymbolVisibleAsync(\n    string symbol,\n    TimeSpan? maxWait = null,\n    TimeSpan? pollInterval = null,\n    DateTime? deadline = null,\n    CancellationToken cancellationToken = default);\n\n// Subscribe to real\u2011time ticks (code uses profile DefaultSymbol)\nIAsyncEnumerable&lt;OnSymbolTickData&gt; OnSymbolTickAsync(\n    IEnumerable&lt;string&gt; symbols,\n    CancellationToken cancellationToken = default);\n\n// Trade\u2011related events\nIAsyncEnumerable&lt;OnTradeData&gt; OnTradeAsync(\n    CancellationToken cancellationToken = default);\n\n// Periodic/snapshot P&amp;L updates\nIAsyncEnumerable&lt;OnPositionProfitData&gt; OnPositionProfitAsync(\n    int intervalMs,\n    bool ignoreEmpty = true,\n    CancellationToken cancellationToken = default);\n\n// Tickets for positions &amp; pending orders\nIAsyncEnumerable&lt;OnPositionsAndPendingOrdersTicketsData&gt; OnPositionsAndPendingOrdersTicketsAsync(\n    int intervalMs,\n    CancellationToken cancellationToken = default);\n</code></pre>"},{"location":"Streaming/Subscribe/#sample-logs","title":"Sample logs \ud83e\uddfe","text":"<pre><code>info: Cmd:STREAM Profile:demo\ninfo: Symbol:EURUSD Seconds:10\ninfo: Streaming started (auto-reconnect enabled).\ninfo: OnSymbolTickAsync: Symbol=EURUSD Ask=1.09321\ninfo: OnPositionProfitAsync: Update received\ninfo: OnTradeAsync: Trade event received\ninfo: OnPositionsAndPendingOrdersTicketsAsync: Update received\ninfo: Streaming stopped. Elapsed=10.0s\n</code></pre>"}]}